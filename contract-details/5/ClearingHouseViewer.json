{
  "address": "0xFd581492b91E5C93fF16B6f9C829E534579a6808",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IClearingHouse",
          "name": "_clearingHouse",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ClearingHouseViewer_LpTokenAmountPassedLargerThanBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ClearingHouseViewer_ReductionRatioTooLarge",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "paramIndex",
          "type": "uint8"
        }
      ],
      "name": "ClearingHouseViewer_ZeroAddressConstructor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PRBMathSD59x18__AbsInputTooSmall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PRBMathSD59x18__DivInputTooSmall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rAbs",
          "type": "uint256"
        }
      ],
      "name": "PRBMathSD59x18__DivOverflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PRBMathSD59x18__MulInputTooSmall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rAbs",
          "type": "uint256"
        }
      ],
      "name": "PRBMathSD59x18__MulOverflow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prod1",
          "type": "uint256"
        }
      ],
      "name": "PRBMath__MulDivFixedPointOverflow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prod1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "denominator",
          "type": "uint256"
        }
      ],
      "name": "PRBMath__MulDivOverflow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "accountLeverage",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "clearingHouse",
      "outputs": [
        {
          "internalType": "contract IClearingHouse",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenIdx",
          "type": "uint256"
        }
      ],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        }
      ],
      "name": "getBaseBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        }
      ],
      "name": "getBaseDust",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        },
        {
          "internalType": "uint256[2]",
          "name": "amounts",
          "type": "uint256[2]"
        }
      ],
      "name": "getExpectedLpTokenAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vQuoteAmountToSpend",
          "type": "uint256"
        }
      ],
      "name": "getExpectedVBaseAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vQuoteAmountToSpend",
          "type": "uint256"
        }
      ],
      "name": "getExpectedVBaseAmountExFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vBaseAmountToSpend",
          "type": "uint256"
        }
      ],
      "name": "getExpectedVQuoteAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vBaseAmountToSpend",
          "type": "uint256"
        }
      ],
      "name": "getExpectedVQuoteAmountExFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "lpTokenAmountToWithdraw",
          "type": "uint256"
        }
      ],
      "name": "getExpectedVirtualTokenAmountsFromLpTokenAmount",
      "outputs": [
        {
          "internalType": "uint256[2]",
          "name": "",
          "type": "uint256[2]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "ratio",
          "type": "int256"
        }
      ],
      "name": "getFreeCollateralByRatio",
      "outputs": [
        {
          "internalType": "int256",
          "name": "freeCollateral",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getFundingPayments",
      "outputs": [
        {
          "internalType": "int256",
          "name": "fundingPayments",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getFundingPaymentsAcrossMarkets",
      "outputs": [
        {
          "internalType": "int256",
          "name": "fundingPayments",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        }
      ],
      "name": "getGlobalPosition",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "timeOfLastTrade",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "timeOfLastTwapUpdate",
              "type": "uint64"
            },
            {
              "internalType": "int128",
              "name": "cumFundingRate",
              "type": "int128"
            },
            {
              "internalType": "uint256",
              "name": "totalQuoteProvided",
              "type": "uint256"
            },
            {
              "internalType": "uint128",
              "name": "currentBlockTradeAmount",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "totalTradingFeesGrowth",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "totalBaseFeesGrowth",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "totalQuoteFeesGrowth",
              "type": "uint128"
            }
          ],
          "internalType": "struct LibPerpetual.GlobalPosition",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getLpEstimatedPnl",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getLpFundingPayments",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getLpPosition",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int128",
              "name": "openNotional",
              "type": "int128"
            },
            {
              "internalType": "int128",
              "name": "positionSize",
              "type": "int128"
            },
            {
              "internalType": "int128",
              "name": "cumFundingRate",
              "type": "int128"
            },
            {
              "internalType": "uint128",
              "name": "liquidityBalance",
              "type": "uint128"
            },
            {
              "internalType": "uint64",
              "name": "depositTime",
              "type": "uint64"
            },
            {
              "internalType": "uint128",
              "name": "totalTradingFeesGrowth",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "totalBaseFeesGrowth",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "totalQuoteFeesGrowth",
              "type": "uint128"
            }
          ],
          "internalType": "struct LibPerpetual.LiquidityProviderPosition",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getLpPositionAfterWithdrawal",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int128",
              "name": "openNotional",
              "type": "int128"
            },
            {
              "internalType": "int128",
              "name": "positionSize",
              "type": "int128"
            },
            {
              "internalType": "int128",
              "name": "cumFundingRate",
              "type": "int128"
            }
          ],
          "internalType": "struct LibPerpetual.TraderPosition",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "reductionRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "iter",
          "type": "uint256"
        },
        {
          "internalType": "uint256[2]",
          "name": "minVTokenAmounts",
          "type": "uint256[2]"
        }
      ],
      "name": "getLpProposedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "proposedAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getLpTradingFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getLpUnrealizedPnL",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        }
      ],
      "name": "getMarket",
      "outputs": [
        {
          "internalType": "contract ICryptoSwap",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        }
      ],
      "name": "getQuoteBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isDiscounted",
          "type": "bool"
        }
      ],
      "name": "getReserveValue",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        }
      ],
      "name": "getTotalLiquidityProvided",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getTraderFundingPayments",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getTraderPosition",
      "outputs": [
        {
          "components": [
            {
              "internalType": "int128",
              "name": "openNotional",
              "type": "int128"
            },
            {
              "internalType": "int128",
              "name": "positionSize",
              "type": "int128"
            },
            {
              "internalType": "int128",
              "name": "cumFundingRate",
              "type": "int128"
            }
          ],
          "internalType": "struct LibPerpetual.TraderPosition",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "reductionRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "iter",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmount",
          "type": "uint256"
        }
      ],
      "name": "getTraderProposedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "proposedAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getTraderUnrealizedPnL",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        }
      ],
      "name": "indexPrice",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        }
      ],
      "name": "insuranceFee",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isLpPositionOpen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "ratio",
          "type": "int256"
        }
      ],
      "name": "isMarginValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isPositionOpen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isTraderPositionOpen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "marginRatio",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "marketLeverage",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        }
      ],
      "name": "marketPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidityAmountToRemove",
          "type": "uint256"
        },
        {
          "internalType": "uint256[2]",
          "name": "minVTokenAmounts",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256",
          "name": "proposedAmount",
          "type": "uint256"
        },
        {
          "internalType": "enum LibPerpetual.Side",
          "name": "direction",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "withCurveTradingFees",
          "type": "bool"
        }
      ],
      "name": "removeLiquiditySwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "proceeds",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "idx",
          "type": "uint256"
        }
      ],
      "name": "totalLpTokenSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x07c912004628dc0331e1bd4dbef92f55386e167fd9fef2f386238e6bd7bb9e4f",
  "receipt": {
    "to": null,
    "from": "0x69C7c048e7C286B0a8Bcf7cD7620E71Ef7569421",
    "contractAddress": "0x6b8440CA61c2915EA3d104d8cd840d5E600fA609",
    "transactionIndex": 34,
    "gasUsed": "3589439",
    "logsBloom": "0x
    "blockHash": "0x378475797ab096ec9475a9d55506472987c641ee97ab934746a58eeff3b1ca91",
    "transactionHash": "0x07c912004628dc0331e1bd4dbef92f55386e167fd9fef2f386238e6bd7bb9e4f",
    "logs": [],
    "blockNumber": 7995352,
    "cumulativeGasUsed": "16645096",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x147A6744D330C1A667a29C501Ff12843dD5B28f5"
  ],
  "numDeployments": 1,
  "solcInputHash": "7ff88e90c8e0ebb2dab522f6b81e8fbd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IClearingHouse\",\"name\":\"_clearingHouse\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ClearingHouseViewer_LpTokenAmountPassedLargerThanBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClearingHouseViewer_ReductionRatioTooLarge\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"paramIndex\",\"type\":\"uint8\"}],\"name\":\"ClearingHouseViewer_ZeroAddressConstructor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PRBMathSD59x18__AbsInputTooSmall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PRBMathSD59x18__DivInputTooSmall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAbs\",\"type\":\"uint256\"}],\"name\":\"PRBMathSD59x18__DivOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PRBMathSD59x18__MulInputTooSmall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rAbs\",\"type\":\"uint256\"}],\"name\":\"PRBMathSD59x18__MulOverflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\"}],\"name\":\"PRBMath__MulDivFixedPointOverflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prod1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"denominator\",\"type\":\"uint256\"}],\"name\":\"PRBMath__MulDivOverflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"accountLeverage\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearingHouse\",\"outputs\":[{\"internalType\":\"contract IClearingHouse\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenIdx\",\"type\":\"uint256\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"getBaseBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"getBaseDust\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"amounts\",\"type\":\"uint256[2]\"}],\"name\":\"getExpectedLpTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vQuoteAmountToSpend\",\"type\":\"uint256\"}],\"name\":\"getExpectedVBaseAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vQuoteAmountToSpend\",\"type\":\"uint256\"}],\"name\":\"getExpectedVBaseAmountExFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vBaseAmountToSpend\",\"type\":\"uint256\"}],\"name\":\"getExpectedVQuoteAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vBaseAmountToSpend\",\"type\":\"uint256\"}],\"name\":\"getExpectedVQuoteAmountExFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"lpTokenAmountToWithdraw\",\"type\":\"uint256\"}],\"name\":\"getExpectedVirtualTokenAmountsFromLpTokenAmount\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"ratio\",\"type\":\"int256\"}],\"name\":\"getFreeCollateralByRatio\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"freeCollateral\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getFundingPayments\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"fundingPayments\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getFundingPaymentsAcrossMarkets\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"fundingPayments\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"getGlobalPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"timeOfLastTrade\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"timeOfLastTwapUpdate\",\"type\":\"uint64\"},{\"internalType\":\"int128\",\"name\":\"cumFundingRate\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"totalQuoteProvided\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"currentBlockTradeAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"totalTradingFeesGrowth\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"totalBaseFeesGrowth\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"totalQuoteFeesGrowth\",\"type\":\"uint128\"}],\"internalType\":\"struct LibPerpetual.GlobalPosition\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getLpEstimatedPnl\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getLpFundingPayments\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getLpPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"int128\",\"name\":\"openNotional\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"positionSize\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"cumFundingRate\",\"type\":\"int128\"},{\"internalType\":\"uint128\",\"name\":\"liquidityBalance\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"depositTime\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"totalTradingFeesGrowth\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"totalBaseFeesGrowth\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"totalQuoteFeesGrowth\",\"type\":\"uint128\"}],\"internalType\":\"struct LibPerpetual.LiquidityProviderPosition\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getLpPositionAfterWithdrawal\",\"outputs\":[{\"components\":[{\"internalType\":\"int128\",\"name\":\"openNotional\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"positionSize\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"cumFundingRate\",\"type\":\"int128\"}],\"internalType\":\"struct LibPerpetual.TraderPosition\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reductionRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"iter\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"minVTokenAmounts\",\"type\":\"uint256[2]\"}],\"name\":\"getLpProposedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"proposedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getLpTradingFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getLpUnrealizedPnL\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"getMarket\",\"outputs\":[{\"internalType\":\"contract ICryptoSwap\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"getQuoteBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isDiscounted\",\"type\":\"bool\"}],\"name\":\"getReserveValue\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"getTotalLiquidityProvided\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getTraderFundingPayments\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getTraderPosition\",\"outputs\":[{\"components\":[{\"internalType\":\"int128\",\"name\":\"openNotional\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"positionSize\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"cumFundingRate\",\"type\":\"int128\"}],\"internalType\":\"struct LibPerpetual.TraderPosition\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reductionRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"iter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"name\":\"getTraderProposedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"proposedAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getTraderUnrealizedPnL\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"indexPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"insuranceFee\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isLpPositionOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"ratio\",\"type\":\"int256\"}],\"name\":\"isMarginValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPositionOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isTraderPositionOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"marginRatio\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"marketLeverage\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"marketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidityAmountToRemove\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"minVTokenAmounts\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256\",\"name\":\"proposedAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum LibPerpetual.Side\",\"name\":\"direction\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"withCurveTradingFees\",\"type\":\"bool\"}],\"name\":\"removeLiquiditySwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"proceeds\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idx\",\"type\":\"uint256\"}],\"name\":\"totalLpTokenSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"accountLeverage(address)\":{\"params\":{\"account\":\"User to get the account leverage from\"}},\"getBalance(address,uint256)\":{\"params\":{\"tokenIdx\":\"Token to get the balance of\",\"user\":\"User to get the balance of\"}},\"getBaseBalance(uint256)\":{\"params\":{\"idx\":\"Index of the perpetual market\"}},\"getBaseDust(uint256)\":{\"returns\":{\"_0\":\"Base balance of Governance. 18 decimals\"}},\"getExpectedLpTokenAmount(uint256,uint256[2])\":{\"details\":\"Given that the estimated amount might be slightly off (slippage) and that the market may move a bit      between this call and the next, users should apply a small reduction on the returned amount.\",\"params\":{\"amounts\":\"Array of 2 amounts, a vQuote and a vBase amount\",\"idx\":\"Index of the perpetual market\"}},\"getExpectedVBaseAmount(uint256,uint256)\":{\"details\":\"It's up to the client to apply a reduction of this amount (e.g. -1%) to then use it as a reasonable value for `minAmount` in `extendPosition`\",\"params\":{\"idx\":\"Index of the perpetual market\",\"vQuoteAmountToSpend\":\"Amount of vQuote to be exchanged against some vBase. 18 decimals\"}},\"getExpectedVBaseAmountExFees(uint256,uint256)\":{\"details\":\"It's up to the client to apply a reduction of this amount (e.g. -1%) to then use it as a reasonable value for `minAmount` in `extendPosition`\",\"params\":{\"idx\":\"Index of the perpetual market\",\"vQuoteAmountToSpend\":\"Amount of vQuote to be exchanged against some vBase. 18 decimals\"}},\"getExpectedVQuoteAmount(uint256,uint256)\":{\"details\":\"It's up to the client to apply a reduction of this amount (e.g. -1%) to then use it as a reasonable value for `minAmount` in `extendPosition`\",\"params\":{\"idx\":\"Index of the perpetual market\",\"vBaseAmountToSpend\":\"Amount of vBase to be exchanged against some vQuote. 18 decimals\"}},\"getExpectedVQuoteAmountExFees(uint256,uint256)\":{\"details\":\"It's up to the client to apply a reduction of this amount (e.g. -1%) to then use it as a reasonable value for `minAmount` in `extendPosition`\",\"params\":{\"idx\":\"Index of the perpetual market\",\"vBaseAmountToSpend\":\"Amount of vBase to be exchanged against some vQuote. 18 decimals\"}},\"getExpectedVirtualTokenAmountsFromLpTokenAmount(uint256,address,uint256)\":{\"details\":\"Apply a small reduction to the token amounts to ensure that the call to `removeLiquidity` passes\",\"params\":{\"account\":\"Address of the LP account\",\"idx\":\"Index of the perpetual market\",\"lpTokenAmountToWithdraw\":\"Amount of LP tokens to return to the market\"}},\"getFreeCollateralByRatio(address,int256)\":{\"details\":\"free collateral = profit + discounted collaterals USD value\"},\"getFundingPayments(uint256,address)\":{\"params\":{\"account\":\"User to get the funding payments of\",\"idx\":\"Index of the perpetual market\"}},\"getFundingPaymentsAcrossMarkets(address)\":{\"params\":{\"account\":\"User to get the funding payments of\"}},\"getGlobalPosition(uint256)\":{\"params\":{\"idx\":\"Index of the perpetual market\"}},\"getLpEstimatedPnl(uint256,address)\":{\"params\":{\"account\":\"Lp to get the pnl and trading fees earned from\"},\"returns\":{\"_0\":\"pnl Unrealized profit and loss and trading fees earned. 18 decimals\"}},\"getLpFundingPayments(uint256,address)\":{\"params\":{\"account\":\"Lp to get the funding payments\",\"idx\":\"Index of the perpetual market\"}},\"getLpPosition(uint256,address)\":{\"params\":{\"account\":\"Address to get the LP position from\",\"idx\":\"Index of the perpetual market\"}},\"getLpPositionAfterWithdrawal(uint256,address)\":{\"params\":{\"account\":\"Liquidity Provider\"},\"returns\":{\"_0\":\"(Active) Liquidity Provider position\"}},\"getLpProposedAmount(uint256,address,uint256,uint256,uint256[2])\":{\"params\":{\"idx\":\"Index of the perpetual market\",\"iter\":\"Maximum iterations\",\"minVTokenAmounts\":\"Minimum amount that the user is willing to accept of remove liquidity. 18 decimals\",\"reductionRatio\":\"Percentage of the position that the user wishes to close. Min: 0. Max: 1e18\",\"user\":\"Account\"},\"returns\":{\"proposedAmount\":\"Amount of tokens to swap. 18 decimals\"}},\"getLpTradingFees(uint256,address)\":{\"params\":{\"account\":\"Lp to get the trading fees earned from\",\"idx\":\"Index of the perpetual market\"},\"returns\":{\"_0\":\"tradingFeesEarned Trading fees earned by the Liquidity Provider. 18 decimals\"}},\"getLpUnrealizedPnL(uint256,address)\":{\"params\":{\"account\":\"Lp to get the unrealized PnL from\",\"idx\":\"Index of the perpetual market\"}},\"getMarket(uint256)\":{\"params\":{\"idx\":\"Index of the perpetual market\"}},\"getQuoteBalance(uint256)\":{\"params\":{\"idx\":\"Index of the perpetual market\"}},\"getReserveValue(address,bool)\":{\"params\":{\"account\":\"Address to get the portfolio value from\",\"isDiscounted\":\"Whether or not the reserve value should be discounted by the weight of the collateral\"},\"returns\":{\"_0\":\"reserveValue Value of collaterals in USD. 18 decimals\"}},\"getTotalLiquidityProvided(uint256)\":{\"params\":{\"idx\":\"Index of the perpetual market\"}},\"getTraderFundingPayments(uint256,address)\":{\"params\":{\"account\":\"User to get the funding payments of\",\"idx\":\"Index of the perpetual market\"}},\"getTraderPosition(uint256,address)\":{\"params\":{\"account\":\"Address to get the trading position from\",\"idx\":\"Index of the perpetual market\"}},\"getTraderProposedAmount(uint256,address,uint256,uint256,uint256)\":{\"params\":{\"idx\":\"Index of the perpetual market\",\"iter\":\"Maximum iterations\",\"minAmount\":\"Minimum amount that the user is willing to accept. 18 decimals\",\"reductionRatio\":\"Percentage of the position that the user wishes to close. Min: 0. Max: 1e18\",\"user\":\"Account\"},\"returns\":{\"proposedAmount\":\"Amount of tokens to swap. 18 decimals\"}},\"getTraderUnrealizedPnL(uint256,address)\":{\"params\":{\"account\":\"Trader to get the unrealized PnL from\",\"idx\":\"Index of the perpetual market\"}},\"indexPrice(uint256)\":{\"params\":{\"idx\":\"Index of the perpetual market\"}},\"insuranceFee(uint256)\":{\"params\":{\"idx\":\"Index of the perpetual market\"}},\"isLpPositionOpen(uint256,address)\":{\"params\":{\"account\":\"Address of the LP account\",\"idx\":\"Index of the perpetual market\"}},\"isMarginValid(address,int256)\":{\"details\":\"Differ from `ClearingHouse._isPositionValid` in that it includes an estimate of pending funding payments,      also `_isPositionValid` formula is arranged differently\",\"params\":{\"account\":\"Account of the position to get the margin ratio from\",\"ratio\":\"Proposed ratio to compare the position against\"}},\"isPositionOpen(address)\":{\"params\":{\"account\":\"Address of the user account\"}},\"isTraderPositionOpen(uint256,address)\":{\"params\":{\"account\":\"Address of the trading account\",\"idx\":\"Index of the perpetual market\"}},\"marginRatio(address)\":{\"details\":\"Unlike ClearingHouse.getFreeCollateralByRatio, ClearingHouseViewer.marginRatio includes fundingPayments      and formula is arranged differently\",\"params\":{\"account\":\"Account of the position to get the margin ratio from\"}},\"marketLeverage(uint256,address)\":{\"params\":{\"account\":\"User to get the account leverage from\",\"idx\":\"Index of the perpetual market\"}},\"marketPrice(uint256)\":{\"params\":{\"idx\":\"Index of the perpetual market\"}},\"removeLiquiditySwap(uint256,address,uint256,uint256[2],uint256,uint8,bool)\":{\"params\":{\"direction\":\"If Long, vQuote should be traded for vBase otherwise vBase should be traded for vQuote    /// @return proceeds received from swapping after removing liquidity\",\"idx\":\"Index of the perpetual market\",\"liquidityAmountToRemove\":\"Amount of liquidity (in LP tokens) to be removed from the pool. 18 decimals\",\"minVTokenAmounts\":\"Minimum amount of virtual tokens [vQuote, vBase] withdrawn from the curve pool. 18 decimals\",\"proposedAmount\":\"Amount at which to get the LP position (in vBase if LONG, in vQuote if SHORT). 18 decimals\",\"withCurveTradingFees\":\"Whether or not Curve trading fees should be included\"}},\"totalLpTokenSupply(uint256)\":{\"params\":{\"idx\":\"Index of the perpetual market\"}}},\"title\":\"Clearing House Helper Contract\",\"version\":1},\"userdoc\":{\"errors\":{\"ClearingHouseViewer_LpTokenAmountPassedLargerThanBalance()\":[{\"notice\":\"Emitted when the amount of LP tokens passed is larger than the user LP token balance\"}],\"ClearingHouseViewer_ReductionRatioTooLarge()\":[{\"notice\":\"Emitted when the reduction ratio given is larger than 1e18\"}],\"ClearingHouseViewer_ZeroAddressConstructor(uint8)\":[{\"notice\":\"Emitted when the zero address is provided as a parameter in the constructor\"}],\"PRBMathSD59x18__AbsInputTooSmall()\":[{\"notice\":\"Emitted when the input is MIN_SD59x18.\"}],\"PRBMathSD59x18__DivInputTooSmall()\":[{\"notice\":\"Emitted when one of the inputs is MIN_SD59x18.\"}],\"PRBMathSD59x18__DivOverflow(uint256)\":[{\"notice\":\"Emitted when one of the intermediary unsigned results overflows SD59x18.\"}],\"PRBMathSD59x18__MulInputTooSmall()\":[{\"notice\":\"Emitted when one of the inputs is MIN_SD59x18.\"}],\"PRBMathSD59x18__MulOverflow(uint256)\":[{\"notice\":\"Emitted when the intermediary absolute result overflows SD59x18.\"}],\"PRBMath__MulDivFixedPointOverflow(uint256)\":[{\"notice\":\"Emitted when the result overflows uint256.\"}],\"PRBMath__MulDivOverflow(uint256,uint256)\":[{\"notice\":\"Emitted when the result overflows uint256.\"}]},\"kind\":\"user\",\"methods\":{\"accountLeverage(address)\":{\"notice\":\"Get the account leverage across markets\"},\"getBalance(address,uint256)\":{\"notice\":\"Get User Collateral balance\"},\"getBaseBalance(uint256)\":{\"notice\":\"Return the total supply of base tokens provided to a perpetual market\"},\"getBaseDust(uint256)\":{\"notice\":\"Get the current (base) dust balance\"},\"getExpectedLpTokenAmount(uint256,uint256[2])\":{\"notice\":\"Return amount of LP tokens one would receive from exchanging `amounts` in a selected market\"},\"getExpectedVBaseAmount(uint256,uint256)\":{\"notice\":\"Return amount for vBase one would receive for exchanging `vQuoteAmountToSpend` in a select market (excluding slippage)\"},\"getExpectedVBaseAmountExFees(uint256,uint256)\":{\"notice\":\"Return amount for vBase one would receive for exchanging `vQuoteAmountToSpend` in a select market (excluding slippage)\"},\"getExpectedVQuoteAmount(uint256,uint256)\":{\"notice\":\"Return amount for vQuote one would receive for exchanging `vBaseAmountToSpend` in a select market (excluding slippage)\"},\"getExpectedVQuoteAmountExFees(uint256,uint256)\":{\"notice\":\"Return amount for vQuote one would receive for exchanging `vBaseAmountToSpend` in a select market (excluding slippage)\"},\"getExpectedVirtualTokenAmountsFromLpTokenAmount(uint256,address,uint256)\":{\"notice\":\"Return estimation of quote and base tokens one LP should get in exchange for LP tokens\"},\"getFreeCollateralByRatio(address,int256)\":{\"notice\":\"Get free collateral of a user, with a given ratio applied on his debts\"},\"getFundingPayments(uint256,address)\":{\"notice\":\"Get the funding payments of an user on a perpetual markets\"},\"getFundingPaymentsAcrossMarkets(address)\":{\"notice\":\"Get the funding payments of an user across all perpetual markets\"},\"getGlobalPosition(uint256)\":{\"notice\":\"Return a the GlobalPosition struct of a given market\"},\"getLpEstimatedPnl(uint256,address)\":{\"notice\":\"Get the unrealized profit and Loss and the trading fees earned of a  Liquidity Provider\"},\"getLpFundingPayments(uint256,address)\":{\"notice\":\"Calculate missed funding payments\"},\"getLpPosition(uint256,address)\":{\"notice\":\"Get Lp position\"},\"getLpPositionAfterWithdrawal(uint256,address)\":{\"notice\":\"Get the (active) position of a liquidity provider after withdrawing liquidity\"},\"getLpProposedAmount(uint256,address,uint256,uint256,uint256[2])\":{\"notice\":\"Get the proposed amount needed to close a lp position\"},\"getMarket(uint256)\":{\"notice\":\"Return the address of the curve market from a perpetual index\"},\"getQuoteBalance(uint256)\":{\"notice\":\"Return the total supply of quote tokens provided to a perpetual market\"},\"getReserveValue(address,bool)\":{\"notice\":\"Get the portfolio value of a trader / lp\"},\"getTotalLiquidityProvided(uint256)\":{\"notice\":\"Return the total supply of liquidity tokens in a perpetual market\"},\"getTraderFundingPayments(uint256,address)\":{\"notice\":\"Calculate missed funding payments\"},\"getTraderPosition(uint256,address)\":{\"notice\":\"Get trader position\"},\"getTraderProposedAmount(uint256,address,uint256,uint256,uint256)\":{\"notice\":\"Get the proposed amount needed to close a trader position\"},\"getTraderUnrealizedPnL(uint256,address)\":{\"notice\":\"Calculate missed funding payments\"},\"indexPrice(uint256)\":{\"notice\":\"Return the current off-chain exchange rate for vBase/vQuote\"},\"insuranceFee(uint256)\":{\"notice\":\"Return the insurance fee of a perpetual market\"},\"isLpPositionOpen(uint256,address)\":{\"notice\":\"Whether a given LP position is open\"},\"isMarginValid(address,int256)\":{\"notice\":\"Approximately determine whether or not a position is valid for a given margin ratio\"},\"isPositionOpen(address)\":{\"notice\":\"Whether any trader/lp position is open\"},\"isTraderPositionOpen(uint256,address)\":{\"notice\":\"Whether a given trader position is open\"},\"marginRatio(address)\":{\"notice\":\"Get the margin ratio of a user, i.e. all trading and LP positions across all markets\"},\"marketLeverage(uint256,address)\":{\"notice\":\"Get the account leverage for an market\"},\"marketPrice(uint256)\":{\"notice\":\"Return the last traded price (used for TWAP)\"},\"removeLiquiditySwap(uint256,address,uint256,uint256[2],uint256,uint8,bool)\":{\"notice\":\"ONLY STATIC CALLReturns amount of swapping after removing liquidityUsed to estimate proposedAmount for removing liquidity\"},\"totalLpTokenSupply(uint256)\":{\"notice\":\"Return the total supply of LP tokens in the market\"}},\"notice\":\"Utility functions to easily extract data from Perpetual Contracts\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ClearingHouseViewer.sol\":\"ClearingHouseViewer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248) {\\n        require(value >= type(int248).min && value <= type(int248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return int248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240) {\\n        require(value >= type(int240).min && value <= type(int240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return int240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232) {\\n        require(value >= type(int232).min && value <= type(int232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return int232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224) {\\n        require(value >= type(int224).min && value <= type(int224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return int224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216) {\\n        require(value >= type(int216).min && value <= type(int216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return int216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208) {\\n        require(value >= type(int208).min && value <= type(int208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return int208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200) {\\n        require(value >= type(int200).min && value <= type(int200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return int200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192) {\\n        require(value >= type(int192).min && value <= type(int192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return int192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184) {\\n        require(value >= type(int184).min && value <= type(int184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return int184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176) {\\n        require(value >= type(int176).min && value <= type(int176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return int176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168) {\\n        require(value >= type(int168).min && value <= type(int168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return int168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160) {\\n        require(value >= type(int160).min && value <= type(int160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return int160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152) {\\n        require(value >= type(int152).min && value <= type(int152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return int152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144) {\\n        require(value >= type(int144).min && value <= type(int144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return int144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136) {\\n        require(value >= type(int136).min && value <= type(int136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return int136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120) {\\n        require(value >= type(int120).min && value <= type(int120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return int120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112) {\\n        require(value >= type(int112).min && value <= type(int112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return int112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104) {\\n        require(value >= type(int104).min && value <= type(int104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return int104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96) {\\n        require(value >= type(int96).min && value <= type(int96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return int96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88) {\\n        require(value >= type(int88).min && value <= type(int88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return int88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80) {\\n        require(value >= type(int80).min && value <= type(int80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return int80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72) {\\n        require(value >= type(int72).min && value <= type(int72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return int72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56) {\\n        require(value >= type(int56).min && value <= type(int56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return int56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48) {\\n        require(value >= type(int48).min && value <= type(int48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return int48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40) {\\n        require(value >= type(int40).min && value <= type(int40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return int40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24) {\\n        require(value >= type(int24).min && value <= type(int24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return int24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x02686c31ccb9ee77a299fa5f47327af5271f251a707a0e24f321957166ff0434\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb3ebde1c8d27576db912d87c3560dab14adfb9cd001be95890ec4ba035e652e7\",\"license\":\"MIT\"},\"contracts/ClearingHouseViewer.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.16;\\n\\n// contracts\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n// interfaces\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {IClearingHouse} from \\\"./interfaces/IClearingHouse.sol\\\";\\nimport {IClearingHouseViewer} from \\\"./interfaces/IClearingHouseViewer.sol\\\";\\nimport {ICryptoSwap} from \\\"./interfaces/ICryptoSwap.sol\\\";\\nimport {IPerpetual} from \\\"./interfaces/IPerpetual.sol\\\";\\n\\n// libraries\\nimport {LibMath} from \\\"./lib/LibMath.sol\\\";\\nimport {LibPerpetual} from \\\"./lib/LibPerpetual.sol\\\";\\n\\n/// @title Clearing House Helper Contract\\n/// @notice Utility functions to easily extract data from Perpetual Contracts\\ncontract ClearingHouseViewer is IClearingHouseViewer {\\n    using LibMath for uint256;\\n    using LibMath for int256;\\n    using SafeERC20 for IERC20Metadata;\\n\\n    // constants\\n    uint256 internal constant VQUOTE_INDEX = 0; // index of quote asset in curve pool\\n    uint256 internal constant VBASE_INDEX = 1; // index of base asset in curve pool\\n\\n    // dependencies\\n    IClearingHouse public clearingHouse;\\n\\n    constructor(IClearingHouse _clearingHouse) {\\n        if (address(_clearingHouse) == address(0)) revert ClearingHouseViewer_ZeroAddressConstructor(0);\\n        clearingHouse = _clearingHouse;\\n    }\\n\\n    /* ****************** */\\n    /*   Market viewer    */\\n    /* ****************** */\\n\\n    /// @notice Return amount for vBase one would receive for exchanging `vQuoteAmountToSpend` in a select market (excluding slippage)\\n    /// @dev It's up to the client to apply a reduction of this amount (e.g. -1%) to then use it as a reasonable value for `minAmount` in `extendPosition`\\n    /// @param idx Index of the perpetual market\\n    /// @param vQuoteAmountToSpend Amount of vQuote to be exchanged against some vBase. 18 decimals\\n    function getExpectedVBaseAmountExFees(uint256 idx, uint256 vQuoteAmountToSpend) external view returns (uint256) {\\n        return\\n            clearingHouse.perpetuals(idx).curveCryptoViews().get_dy_ex_fees(\\n                getMarket(idx),\\n                VQUOTE_INDEX,\\n                VBASE_INDEX,\\n                vQuoteAmountToSpend\\n            );\\n    }\\n\\n    /// @notice Return amount for vQuote one would receive for exchanging `vBaseAmountToSpend` in a select market (excluding slippage)\\n    /// @dev It's up to the client to apply a reduction of this amount (e.g. -1%) to then use it as a reasonable value for `minAmount` in `extendPosition`\\n    /// @param idx Index of the perpetual market\\n    /// @param vBaseAmountToSpend Amount of vBase to be exchanged against some vQuote. 18 decimals\\n    function getExpectedVQuoteAmountExFees(uint256 idx, uint256 vBaseAmountToSpend) external view returns (uint256) {\\n        return\\n            clearingHouse.perpetuals(idx).curveCryptoViews().get_dy_ex_fees(\\n                getMarket(idx),\\n                VBASE_INDEX,\\n                VQUOTE_INDEX,\\n                vBaseAmountToSpend\\n            );\\n    }\\n\\n    /// @notice Return amount for vBase one would receive for exchanging `vQuoteAmountToSpend` in a select market (excluding slippage)\\n    /// @dev It's up to the client to apply a reduction of this amount (e.g. -1%) to then use it as a reasonable value for `minAmount` in `extendPosition`\\n    /// @param idx Index of the perpetual market\\n    /// @param vQuoteAmountToSpend Amount of vQuote to be exchanged against some vBase. 18 decimals\\n    function getExpectedVBaseAmount(uint256 idx, uint256 vQuoteAmountToSpend) external view override returns (uint256) {\\n        return clearingHouse.perpetuals(idx).market().get_dy(VQUOTE_INDEX, VBASE_INDEX, vQuoteAmountToSpend);\\n    }\\n\\n    /// @notice Return amount for vQuote one would receive for exchanging `vBaseAmountToSpend` in a select market (excluding slippage)\\n    /// @dev It's up to the client to apply a reduction of this amount (e.g. -1%) to then use it as a reasonable value for `minAmount` in `extendPosition`\\n    /// @param idx Index of the perpetual market\\n    /// @param vBaseAmountToSpend Amount of vBase to be exchanged against some vQuote. 18 decimals\\n    function getExpectedVQuoteAmount(uint256 idx, uint256 vBaseAmountToSpend) external view override returns (uint256) {\\n        return clearingHouse.perpetuals(idx).market().get_dy(VBASE_INDEX, VQUOTE_INDEX, vBaseAmountToSpend);\\n    }\\n\\n    /// @notice Return amount of LP tokens one would receive from exchanging `amounts` in a selected market\\n    /// @dev Given that the estimated amount might be slightly off (slippage) and that the market may move a bit\\n    ///      between this call and the next, users should apply a small reduction on the returned amount.\\n    /// @param idx Index of the perpetual market\\n    /// @param amounts Array of 2 amounts, a vQuote and a vBase amount\\n    function getExpectedLpTokenAmount(uint256 idx, uint256[2] calldata amounts)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return clearingHouse.perpetuals(idx).market().calc_token_amount(amounts);\\n    }\\n\\n    /// @notice Return estimation of quote and base tokens one LP should get in exchange for LP tokens\\n    /// @dev Apply a small reduction to the token amounts to ensure that the call to `removeLiquidity` passes\\n    /// @param idx Index of the perpetual market\\n    /// @param account Address of the LP account\\n    /// @param lpTokenAmountToWithdraw Amount of LP tokens to return to the market\\n    function getExpectedVirtualTokenAmountsFromLpTokenAmount(\\n        uint256 idx,\\n        address account,\\n        uint256 lpTokenAmountToWithdraw\\n    ) external view override returns (uint256[2] memory) {\\n        if (getLpPosition(idx, account).liquidityBalance < lpTokenAmountToWithdraw)\\n            revert ClearingHouseViewer_LpTokenAmountPassedLargerThanBalance();\\n\\n        uint256 lpTotalSupply = totalLpTokenSupply(idx);\\n\\n        uint256 eQuoteTokenWithdrawn = ((lpTokenAmountToWithdraw - 1) *\\n            clearingHouse.perpetuals(idx).market().balances(VQUOTE_INDEX)) / lpTotalSupply;\\n\\n        uint256 eBaseTokenWithdrawn = ((lpTokenAmountToWithdraw - 1) *\\n            clearingHouse.perpetuals(idx).market().balances(VBASE_INDEX)) / lpTotalSupply;\\n\\n        return [eQuoteTokenWithdrawn, eBaseTokenWithdrawn];\\n    }\\n\\n    /// @notice Return the last traded price (used for TWAP)\\n    /// @param idx Index of the perpetual market\\n    function marketPrice(uint256 idx) public view override returns (uint256) {\\n        return clearingHouse.perpetuals(idx).marketPrice();\\n    }\\n\\n    /// @notice Return the current off-chain exchange rate for vBase/vQuote\\n    /// @param idx Index of the perpetual market\\n    function indexPrice(uint256 idx) external view override returns (int256) {\\n        return clearingHouse.perpetuals(idx).indexPrice();\\n    }\\n\\n    /// @notice Return the total supply of LP tokens in the market\\n    /// @param idx Index of the perpetual market\\n    function totalLpTokenSupply(uint256 idx) public view override returns (uint256) {\\n        return IERC20Metadata(clearingHouse.perpetuals(idx).market().token()).totalSupply();\\n    }\\n\\n    /// @notice Return a the GlobalPosition struct of a given market\\n    /// @param idx Index of the perpetual market\\n    function getGlobalPosition(uint256 idx) external view override returns (LibPerpetual.GlobalPosition memory) {\\n        return clearingHouse.perpetuals(idx).getGlobalPosition();\\n    }\\n\\n    /// @notice Return the address of the curve market from a perpetual index\\n    /// @param idx Index of the perpetual market\\n    function getMarket(uint256 idx) public view override returns (ICryptoSwap) {\\n        return clearingHouse.perpetuals(idx).market();\\n    }\\n\\n    /// @notice Return the insurance fee of a perpetual market\\n    /// @param idx Index of the perpetual market\\n    function insuranceFee(uint256 idx) external view override returns (int256) {\\n        return clearingHouse.perpetuals(idx).insuranceFee();\\n    }\\n\\n    /// @notice Return the total supply of base tokens provided to a perpetual market\\n    /// @param idx Index of the perpetual market\\n    function getBaseBalance(uint256 idx) external view override returns (uint256) {\\n        return clearingHouse.perpetuals(idx).vBase().totalSupply();\\n    }\\n\\n    /// @notice Return the total supply of quote tokens provided to a perpetual market\\n    /// @param idx Index of the perpetual market\\n    function getQuoteBalance(uint256 idx) external view override returns (uint256) {\\n        return clearingHouse.perpetuals(idx).vQuote().totalSupply();\\n    }\\n\\n    /// @notice Return the total supply of liquidity tokens in a perpetual market\\n    /// @param idx Index of the perpetual market\\n    function getTotalLiquidityProvided(uint256 idx) external view override returns (uint256) {\\n        return clearingHouse.perpetuals(idx).getTotalLiquidityProvided();\\n    }\\n\\n    /* ****************** */\\n    /*   User viewer      */\\n    /* ****************** */\\n\\n    /// @notice Get free collateral of a user, with a given ratio applied on his debts\\n    /// @dev free collateral = profit + discounted collaterals USD value\\n    function getFreeCollateralByRatio(address account, int256 ratio) external view returns (int256 freeCollateral) {\\n        int256 pnl = clearingHouse.getPnLAcrossMarkets(account);\\n        int256 fundingPayments = getFundingPaymentsAcrossMarkets(account);\\n\\n        int256 userDebt = clearingHouse.getDebtAcrossMarkets(account);\\n        int256 marginRequired = userDebt.wadMul(ratio);\\n\\n        // if no trading or LP position open on any market, margin ratio is 100%\\n        if (userDebt == 0) {\\n            marginRequired = 0;\\n        }\\n        int256 reserveValue = getReserveValue(account, false);\\n\\n        // We define freeCollateral as follows:\\n        // freeCollateral = min(totalCollateralValue, totalCollateralValue + pnl) - marginRequired)\\n        // This is a conservative approach when compared to\\n        // freeCollateral = totalCollateralValue + pnl - marginRequired\\n        // since the unrealized pnl depends on the index price\\n        // where a deviation could allow a trader to empty the vault\\n\\n        return reserveValue.min(reserveValue + pnl) + fundingPayments - marginRequired;\\n    }\\n\\n    /// @notice Approximately determine whether or not a position is valid for a given margin ratio\\n    /// @dev Differ from `ClearingHouse._isPositionValid` in that it includes an estimate of pending funding payments,\\n    ///      also `_isPositionValid` formula is arranged differently\\n    /// @param account Account of the position to get the margin ratio from\\n    /// @param ratio Proposed ratio to compare the position against\\n    function isMarginValid(address account, int256 ratio) external view override returns (bool) {\\n        return marginRatio(account) >= ratio;\\n    }\\n\\n    /// @notice Get the margin ratio of a user, i.e. all trading and LP positions across all markets\\n    /// @dev Unlike ClearingHouse.getFreeCollateralByRatio, ClearingHouseViewer.marginRatio includes fundingPayments\\n    ///      and formula is arranged differently\\n    /// @param account Account of the position to get the margin ratio from\\n    function marginRatio(address account) public view override returns (int256) {\\n        // margin ratio = (collateral + unrealizedPositionPnl) / trader.openNotional\\n        // all amounts must be expressed in vQuote (e.g. USD), otherwise the end result doesn't make sense\\n\\n        int256 unrealizedPositionPnl = clearingHouse.getPnLAcrossMarkets(account);\\n        int256 userDebt = clearingHouse.getDebtAcrossMarkets(account);\\n        int256 fundingPayments = getFundingPaymentsAcrossMarkets(account);\\n\\n        // if no trading or LP position open on any market, margin ratio is 100%\\n        if (userDebt == 0) {\\n            return 1e18;\\n        }\\n\\n        int256 collateral = getReserveValue(account, false);\\n\\n        return _computeMarginRatio(collateral, unrealizedPositionPnl, fundingPayments, userDebt);\\n    }\\n\\n    /// @notice Get the account leverage across markets\\n    /// @param account User to get the account leverage from\\n    function accountLeverage(address account) external view override returns (int256) {\\n        int256 unrealizedPositionPnl = clearingHouse.getPnLAcrossMarkets(account);\\n        int256 userDebt = clearingHouse.getDebtAcrossMarkets(account);\\n        int256 fundingPayments = getFundingPaymentsAcrossMarkets(account);\\n\\n        // if no trading or LP position open on any market, margin ratio is 100%\\n        if (userDebt == 0) {\\n            return 0;\\n        }\\n\\n        int256 collateral = getReserveValue(account, false);\\n\\n        return _computeLeverage(collateral, unrealizedPositionPnl, fundingPayments, userDebt);\\n    }\\n\\n    /// @notice Get the account leverage for an market\\n    /// @param idx Index of the perpetual market\\n    /// @param account User to get the account leverage from\\n    function marketLeverage(uint256 idx, address account) external view override returns (int256) {\\n        IPerpetual perp = clearingHouse.perpetuals(idx);\\n        int256 unrealizedPositionPnl = perp.getPendingPnL(account);\\n        int256 userDebt = perp.getUserDebt(account).wadMul(perp.riskWeight().toInt256());\\n        int256 fundingPayments = getFundingPayments(idx, account);\\n\\n        // if no trading or LP position open on any market, margin ratio is 100%\\n        if (userDebt == 0) {\\n            return 0;\\n        }\\n\\n        int256 collateral = getReserveValue(account, false);\\n\\n        return _computeLeverage(collateral, unrealizedPositionPnl, fundingPayments, userDebt);\\n    }\\n\\n    /// @notice Get the funding payments of an user across all perpetual markets\\n    /// @param account User to get the funding payments of\\n    function getFundingPaymentsAcrossMarkets(address account) public view override returns (int256 fundingPayments) {\\n        for (uint256 i = 0; i < clearingHouse.getNumMarkets(); i++) {\\n            fundingPayments += getFundingPayments(i, account);\\n        }\\n    }\\n\\n    /// @notice Get the funding payments of an user on a perpetual markets\\n    /// @param account User to get the funding payments of\\n    /// @param idx Index of the perpetual market\\n    function getFundingPayments(uint256 idx, address account) public view override returns (int256 fundingPayments) {\\n        return\\n            clearingHouse.perpetuals(idx).getTraderFundingPayments(account) +\\n            clearingHouse.perpetuals(idx).getLpFundingPayments(account);\\n    }\\n\\n    /// @notice Calculate missed funding payments\\n    /// @param idx Index of the perpetual market\\n    /// @param account User to get the funding payments of\\n    function getTraderFundingPayments(uint256 idx, address account) external view override returns (int256) {\\n        return clearingHouse.perpetuals(idx).getTraderFundingPayments(account);\\n    }\\n\\n    /// @notice Calculate missed funding payments\\n    /// @param idx Index of the perpetual market\\n    /// @param account Trader to get the unrealized PnL from\\n    function getTraderUnrealizedPnL(uint256 idx, address account) external view override returns (int256) {\\n        if (!isTraderPositionOpen(idx, account)) {\\n            return 0;\\n        }\\n\\n        return clearingHouse.perpetuals(idx).getTraderUnrealizedPnL(account);\\n    }\\n\\n    /// @notice Get the portfolio value of a trader / lp\\n    /// @param account Address to get the portfolio value from\\n    /// @param isDiscounted Whether or not the reserve value should be discounted by the weight of the collateral\\n    /// @return reserveValue Value of collaterals in USD. 18 decimals\\n    function getReserveValue(address account, bool isDiscounted) public view override returns (int256) {\\n        return clearingHouse.vault().getReserveValue(account, isDiscounted);\\n    }\\n\\n    /// @notice Get User Collateral balance\\n    /// @param user User to get the balance of\\n    /// @param tokenIdx Token to get the balance of\\n    function getBalance(address user, uint256 tokenIdx) external view override returns (int256) {\\n        return clearingHouse.vault().getBalance(user, tokenIdx);\\n    }\\n\\n    /// @notice Get trader position\\n    /// @param idx Index of the perpetual market\\n    /// @param account Address to get the trading position from\\n    function getTraderPosition(uint256 idx, address account)\\n        public\\n        view\\n        override\\n        returns (LibPerpetual.TraderPosition memory)\\n    {\\n        return clearingHouse.perpetuals(idx).getTraderPosition(account);\\n    }\\n\\n    /// @notice Whether a given trader position is open\\n    /// @param idx Index of the perpetual market\\n    /// @param account Address of the trading account\\n    function isTraderPositionOpen(uint256 idx, address account) public view override returns (bool) {\\n        return clearingHouse.perpetuals(idx).isTraderPositionOpen(account);\\n    }\\n\\n    /// @notice Whether a given LP position is open\\n    /// @param idx Index of the perpetual market\\n    /// @param account Address of the LP account\\n    function isLpPositionOpen(uint256 idx, address account) public view override returns (bool) {\\n        return clearingHouse.perpetuals(idx).isLpPositionOpen(account);\\n    }\\n\\n    /// @notice Whether any trader/lp position is open\\n    /// @param account Address of the user account\\n    function isPositionOpen(address account) external view override returns (bool) {\\n        uint256 numMarkets = clearingHouse.getNumMarkets();\\n        for (uint256 i = 0; i < numMarkets; ) {\\n            if (isTraderPositionOpen(i, account) || isLpPositionOpen(i, account)) return true;\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /// @notice Calculate missed funding payments\\n    /// @param idx Index of the perpetual market\\n    /// @param account Lp to get the funding payments\\n    function getLpFundingPayments(uint256 idx, address account) external view override returns (int256) {\\n        return clearingHouse.perpetuals(idx).getLpFundingPayments(account);\\n    }\\n\\n    /// @param idx Index of the perpetual market\\n    /// @param account Lp to get the unrealized PnL from\\n    function getLpUnrealizedPnL(uint256 idx, address account) public view override returns (int256) {\\n        if (!isLpPositionOpen(idx, account)) {\\n            return 0;\\n        }\\n\\n        return clearingHouse.perpetuals(idx).getLpUnrealizedPnL(account);\\n    }\\n\\n    /// @param idx Index of the perpetual market\\n    /// @param account Lp to get the trading fees earned from\\n    /// @return tradingFeesEarned Trading fees earned by the Liquidity Provider. 18 decimals\\n    function getLpTradingFees(uint256 idx, address account) public view override returns (uint256) {\\n        if (!isLpPositionOpen(idx, account)) {\\n            return 0;\\n        }\\n\\n        return clearingHouse.perpetuals(idx).getLpTradingFees(account);\\n    }\\n\\n    /// @notice Get the unrealized profit and Loss and the trading fees earned of a  Liquidity Provider\\n    /// @param  account Lp to get the pnl and trading fees earned from\\n    /// @return pnl Unrealized profit and loss and trading fees earned. 18 decimals\\n    function getLpEstimatedPnl(uint256 idx, address account) external view override returns (int256) {\\n        if (!isLpPositionOpen(idx, account)) {\\n            return 0;\\n        }\\n\\n        return getLpUnrealizedPnL(idx, account) + getLpTradingFees(idx, account).toInt256();\\n    }\\n\\n    /// @notice Get the (active) position of a liquidity provider after withdrawing liquidity\\n    /// @param account Liquidity Provider\\n    /// @return (Active) Liquidity Provider position\\n    function getLpPositionAfterWithdrawal(uint256 idx, address account)\\n        public\\n        view\\n        override\\n        returns (LibPerpetual.TraderPosition memory)\\n    {\\n        return clearingHouse.perpetuals(idx).getLpPositionAfterWithdrawal(account);\\n    }\\n\\n    /// @notice Get Lp position\\n    /// @param idx Index of the perpetual market\\n    /// @param account Address to get the LP position from\\n    function getLpPosition(uint256 idx, address account)\\n        public\\n        view\\n        override\\n        returns (LibPerpetual.LiquidityProviderPosition memory)\\n    {\\n        return clearingHouse.perpetuals(idx).getLpPosition(account);\\n    }\\n\\n    /// @notice Get the current (base) dust balance\\n    /// @return Base balance of Governance. 18 decimals\\n    function getBaseDust(uint256 idx) external view override returns (int256) {\\n        return getTraderPosition(idx, address(clearingHouse)).positionSize;\\n    }\\n\\n    /// @notice Get the proposed amount needed to close a trader position\\n    /// @param idx Index of the perpetual market\\n    /// @param user Account\\n    /// @param reductionRatio Percentage of the position that the user wishes to close. Min: 0. Max: 1e18\\n    /// @param iter Maximum iterations\\n    /// @param minAmount Minimum amount that the user is willing to accept. 18 decimals\\n    /// @return proposedAmount Amount of tokens to swap. 18 decimals\\n    function getTraderProposedAmount(\\n        uint256 idx,\\n        address user,\\n        uint256 reductionRatio,\\n        uint256 iter,\\n        uint256 minAmount\\n    ) external view override returns (uint256 proposedAmount) {\\n        int256 positionSize = getTraderPosition(idx, user).positionSize;\\n\\n        if (reductionRatio > 1e18) revert ClearingHouseViewer_ReductionRatioTooLarge();\\n        int256 targetPositionSize = positionSize.wadMul(reductionRatio.toInt256());\\n\\n        uint256 amountOut = 0;\\n        if (positionSize > 0) {\\n            proposedAmount = targetPositionSize.toUint256();\\n        } else {\\n            // initial estimate\\n            uint256 position = (-targetPositionSize).toUint256();\\n            proposedAmount = position.wadMul(marketPrice(idx));\\n            // binary search in [marketPrice * 0.7, marketPrice * 1.3]\\n            uint256 maxVal = (proposedAmount * 15) / 10;\\n            uint256 minVal = (proposedAmount * 5) / 10;\\n\\n            // find the best estimate with binary search\\n            for (uint256 i = 0; i < iter; ) {\\n                proposedAmount = (minVal + maxVal) / 2;\\n\\n                amountOut = clearingHouse.perpetuals(idx).curveCryptoViews().get_dy_ex_fees(\\n                    getMarket(idx),\\n                    VQUOTE_INDEX,\\n                    VBASE_INDEX,\\n                    proposedAmount\\n                );\\n\\n                if (amountOut == position) {\\n                    break;\\n                } else if (amountOut < position) {\\n                    minVal = proposedAmount;\\n                } else {\\n                    maxVal = proposedAmount;\\n                }\\n\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n\\n            // take maxVal to make sure we are above the target\\n            if (amountOut < position) {\\n                proposedAmount = maxVal;\\n            }\\n            // so proposed amount function can not be frontun\\n            if (amountOut <= minAmount) revert(\\\"Amount is too small\\\");\\n        }\\n        return proposedAmount;\\n    }\\n\\n    /// @notice Get the proposed amount needed to close a lp position\\n    /// @param idx Index of the perpetual market\\n    /// @param user Account\\n    /// @param reductionRatio Percentage of the position that the user wishes to close. Min: 0. Max: 1e18\\n    /// @param iter Maximum iterations\\n    /// @param minVTokenAmounts Minimum amount that the user is willing to accept of remove liquidity. 18 decimals\\n    /// @return proposedAmount Amount of tokens to swap. 18 decimals\\n    // todo: start with get_dx best estimate\\n    // todo: add minAmount for secondary swap\\n    function getLpProposedAmount(\\n        uint256 idx,\\n        address user,\\n        uint256 reductionRatio,\\n        uint256 iter,\\n        uint256[2] calldata minVTokenAmounts\\n    ) external override returns (uint256 proposedAmount) {\\n        int256 positionSize = getLpPositionAfterWithdrawal(idx, user).positionSize;\\n\\n        if (reductionRatio > 1e18) revert ClearingHouseViewer_ReductionRatioTooLarge();\\n        int256 targetPositionSize = positionSize.wadMul(reductionRatio.toInt256());\\n\\n        if (targetPositionSize > 0) {\\n            proposedAmount = targetPositionSize.toUint256();\\n        } else {\\n            uint256 liquidityAmountToRemove = uint256(getLpPosition(idx, user).liquidityBalance).wadMul(reductionRatio);\\n            uint256 amountOut = 0;\\n\\n            // initial estimate\\n            uint256 position = (-targetPositionSize).toUint256();\\n            proposedAmount = position.wadMul(getMarket(idx).price_oracle());\\n\\n            // binary search in [marketPrice * 0.7, marketPrice * 1.3]\\n            uint256 maxVal = (proposedAmount * 15) / 10;\\n            uint256 minVal = (proposedAmount * 5) / 10;\\n\\n            // find the best estimate with binary search\\n            for (uint256 i = 0; i < iter; ) {\\n                proposedAmount = (minVal + maxVal) / 2;\\n                amountOut = removeLiquiditySwap(\\n                    idx,\\n                    user,\\n                    liquidityAmountToRemove,\\n                    minVTokenAmounts,\\n                    proposedAmount,\\n                    LibPerpetual.Side.Long,\\n                    true\\n                );\\n\\n                if (amountOut < position) {\\n                    minVal = proposedAmount;\\n                } else if (amountOut > position) {\\n                    maxVal = proposedAmount;\\n                } else {\\n                    break;\\n                }\\n                if (maxVal - minVal == 1) {\\n                    proposedAmount = maxVal;\\n                    break;\\n                }\\n\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n\\n            // take maxVal to make sure we are above the target\\n            if (amountOut < position) {\\n                proposedAmount = maxVal;\\n                amountOut = removeLiquiditySwap(\\n                    idx,\\n                    user,\\n                    liquidityAmountToRemove,\\n                    minVTokenAmounts,\\n                    proposedAmount,\\n                    LibPerpetual.Side.Long,\\n                    true\\n                );\\n            }\\n        }\\n        return proposedAmount;\\n    }\\n\\n    /* ******************** */\\n    /*    Static Helpers    */\\n    /* ******************** */\\n\\n    /// @notice ONLY STATIC CALL\\n    /// @notice Returns amount of swapping after removing liquidity\\n    /// @notice Used to estimate proposedAmount for removing liquidity\\n    /// @param idx Index of the perpetual market\\n    /// @param liquidityAmountToRemove Amount of liquidity (in LP tokens) to be removed from the pool. 18 decimals\\n    /// @param minVTokenAmounts Minimum amount of virtual tokens [vQuote, vBase] withdrawn from the curve pool. 18 decimals\\n    /// @param proposedAmount Amount at which to get the LP position (in vBase if LONG, in vQuote if SHORT). 18 decimals\\n    /// @param direction If Long, vQuote should be traded for vBase otherwise vBase should be traded for vQuote    /// @return proceeds received from swapping after removing liquidity\\n    /// @param withCurveTradingFees Whether or not Curve trading fees should be included\\n    function removeLiquiditySwap(\\n        uint256 idx,\\n        address user,\\n        uint256 liquidityAmountToRemove,\\n        uint256[2] calldata minVTokenAmounts,\\n        uint256 proposedAmount,\\n        LibPerpetual.Side direction,\\n        bool withCurveTradingFees\\n    ) public override returns (uint256 proceeds) {\\n        try\\n            clearingHouse.perpetuals(idx).removeLiquiditySwap(\\n                user,\\n                liquidityAmountToRemove,\\n                minVTokenAmounts,\\n                proposedAmount,\\n                direction,\\n                withCurveTradingFees\\n            )\\n        {\\n            // slither-disable-next-line uninitialized-local,variable-scope\\n        } catch (bytes memory errorMessage) {\\n            // slither-disable-next-line variable-scope\\n            return abi.decode(errorMessage, (uint256));\\n        }\\n    }\\n\\n    /* ****************** */\\n    /*   Internal viewer  */\\n    /* ****************** */\\n    function _computeMarginRatio(\\n        int256 collateral,\\n        int256 unrealizedPositionPnl,\\n        int256 fundingPayments,\\n        int256 userDebt\\n    ) internal pure returns (int256) {\\n        return (collateral + unrealizedPositionPnl + fundingPayments).wadDiv(userDebt.abs());\\n    }\\n\\n    function _computeLeverage(\\n        int256 collateral,\\n        int256 unrealizedPositionPnl,\\n        int256 fundingPayments,\\n        int256 userDebt\\n    ) internal pure returns (int256) {\\n        return (userDebt.abs()).wadDiv(collateral + unrealizedPositionPnl + fundingPayments);\\n    }\\n}\\n\",\"keccak256\":\"0x88cad7b66410d05d76bf6c1241e691761a42893b57d54ba7b38cebfac4325261\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IClearingHouse.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.16;\\n\\n// interfaces\\nimport {IClearingHouse} from \\\"./IClearingHouse.sol\\\";\\nimport {IPerpetual} from \\\"./IPerpetual.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {IVault} from \\\"./IVault.sol\\\";\\nimport {IInsurance} from \\\"./IInsurance.sol\\\";\\nimport {ICryptoSwap} from \\\"./ICryptoSwap.sol\\\";\\nimport {IStakingContract} from \\\"./IStakingContract.sol\\\";\\n\\n// libraries\\nimport {LibPerpetual} from \\\"../lib/LibPerpetual.sol\\\";\\n\\ninterface IClearingHouse {\\n    struct ClearingHouseParams {\\n        int256 minMargin;\\n        int256 minMarginAtCreation;\\n        uint256 minPositiveOpenNotional;\\n        uint256 liquidationReward;\\n        uint256 insuranceRatio;\\n        uint256 liquidationRewardInsuranceShare;\\n        uint256 liquidationDiscount;\\n        uint256 nonUACollSeizureDiscount;\\n        int256 uaDebtSeizureThreshold;\\n    }\\n\\n    /* ****************** */\\n    /*     Errors         */\\n    /* ****************** */\\n\\n    /// @notice Emitted when the zero address is provided\\n    error ClearingHouse_ZeroAddress();\\n\\n    /// @notice Emitted when passing the address of a perpetual market which has already been added\\n    error ClearingHouse_PerpetualMarketAlreadyAssigned();\\n\\n    /// @notice Emitted when there is not enough margin to withdraw the requested amount\\n    error ClearingHouse_WithdrawInsufficientMargin();\\n\\n    /// @notice Emitted when the position is not reduced entirely using closePositionWithdrawCollateral\\n    error ClearingHouse_ClosePositionStillOpen();\\n\\n    /// @notice Emitted when the liquidatee does not have an open position\\n    error ClearingHouse_LiquidateInvalidPosition();\\n\\n    /// @notice Emitted when the margin of the liquidatee's position is still valid\\n    error ClearingHouse_LiquidateValidMargin();\\n\\n    /// @notice Emitted when the attempted liquidation does not close the full position\\n    error ClearingHouse_LiquidateInsufficientProposedAmount();\\n\\n    /// @notice Emitted when a user attempts to provide liquidity with amount equal to 0\\n    error ClearingHouse_ProvideLiquidityZeroAmount();\\n\\n    /// @notice Emitted when a user attempts to provide liquidity with amount larger than his free collateral or collateral balance\\n    error ClearingHouse_AmountProvidedTooLarge();\\n\\n    /// @notice Emitted when a user attempts to withdraw more liquidity than they have\\n    error ClearingHouse_RemoveLiquidityInsufficientFunds();\\n\\n    /// @notice Emitted when the proposed minMargin is too low or too high\\n    error ClearingHouse_InvalidMinMargin();\\n\\n    /// @notice Emitted when the proposed minimum open notional is too high\\n    error ClearingHouse_ExcessivePositiveOpenNotional();\\n\\n    /// @notice Emitted when the proposed minMarginAtCreation is too low or too high\\n    error ClearingHouse_InvalidMinMarginAtCreation();\\n\\n    /// @notice Emitted when the proposed liquidation reward is too low or too high\\n    error ClearingHouse_InvalidLiquidationReward();\\n\\n    /// @notice Emitted when the proposed insurance ratio is too low or too high\\n    error ClearingHouse_InvalidInsuranceRatio();\\n\\n    /// @notice Emitted when the proposed share of the liquidation reward for the insurance is too high\\n    error ClearingHouse_ExcessiveLiquidationRewardInsuranceShare();\\n\\n    /// @notice Emitted when the difference between liquidationDiscount and nonUACollSeizureDiscount isn't large enough\\n    error ClearingHouse_InsufficientDiffBtwLiquidationDiscountAndNonUACollSeizureDiscount();\\n\\n    /// @notice Emitted when the liquidationDiscount is too high\\n    error ClearingHouse_ExcessiveLiquidationDiscount();\\n\\n    /// @notice Emitted when the proposed UA debt limit is lower than the minimum acceptable value\\n    error ClearingHouse_InsufficientUaDebtSeizureThreshold();\\n\\n    /// @notice Emitted when a user attempts to extend their position with amount equal to 0\\n    error ClearingHouse_ExtendPositionZeroAmount();\\n\\n    /// @notice Emitted when there is not enough margin to extend to the proposed position amount\\n    error ClearingHouse_ExtendPositionInsufficientMargin();\\n\\n    /// @notice Emitted when a user attempts to reduce their position with amount equal to 0\\n    error ClearingHouse_ReducePositionZeroAmount();\\n\\n    /// @notice Emitted when a user attempts to change his position with no amount\\n    error ClearingHouse_ChangePositionZeroAmount();\\n\\n    /// @notice Emitted when a user tries to open a position with an incorrect open notional amount\\n    error ClearingHouse_UnderOpenNotionalAmountRequired();\\n\\n    /// @notice Emitted when a collateral liquidation for a user with no UA debt is tried\\n    error ClearingHouse_LiquidationDebtSizeZero();\\n\\n    /// @notice Emitted when a liquidator tries seizing collateral of user with sufficient collaterals level\\n    error ClearingHouse_SufficientUserCollateral();\\n\\n    /// @notice Emitted when governance tries to sell dust with a negative balance\\n    error ClearingHouse_NegativeDustProceeds();\\n\\n    /* ****************** */\\n    /*     Events         */\\n    /* ****************** */\\n\\n    /// @notice Emitted when new perpetual market is added\\n    /// @param perpetual New perpetual market\\n    /// @param numPerpetuals New number of perpetual markets\\n    event MarketAdded(IPerpetual indexed perpetual, uint256 numPerpetuals);\\n\\n    /// @notice Emitted when a position is opened/extended\\n    /// @param idx Index of the perpetual market\\n    /// @param user User who opened/extended a position\\n    /// @param direction Whether the position is LONG or SHORT\\n    /// @param addedOpenNotional Notional (USD assets/debt) added to the position\\n    /// @param addedPositionSize PositionSize (Base assets/debt) added to the position\\n    /// @param profit Sum of pnL + tradingFeesPayed - insurance fees\\n    /// @param tradingFeesPayed \\\"tbd\\\"\\n    /// @param insuranceFeesPayed \\\"tbd\\\"\\n    /// @param isPositionIncreased Whether the position was extended or reduced / reversed\\n    /// @param isPositionClosed Whether the position was closed\\n    event ChangePosition(\\n        uint256 indexed idx,\\n        address indexed user,\\n        LibPerpetual.Side direction,\\n        int256 addedOpenNotional,\\n        int256 addedPositionSize,\\n        int256 profit,\\n        int256 tradingFeesPayed,\\n        int256 insuranceFeesPayed,\\n        bool isPositionIncreased,\\n        bool isPositionClosed\\n    );\\n\\n    /// @notice Emitted when an user position is liquidated\\n    /// @param idx Index of the perpetual market\\n    /// @param liquidatee User who gets liquidated\\n    /// @param liquidator User who is liquidating\\n    /// @param notional Notional amount of the liquidatee\\n    /// @param profit Profit of the trader\\n    /// @param isTrader Whether the user is a trader\\n    event LiquidationCall(\\n        uint256 indexed idx,\\n        address indexed liquidatee,\\n        address indexed liquidator,\\n        uint256 notional,\\n        int256 profit,\\n        int256 tradingFeesPayed,\\n        bool isTrader\\n    );\\n\\n    /// @notice Emitted when an user non-UA collaterals are seized\\n    /// @param liquidatee User whose non-UA assets are seized\\n    /// @param liquidator User who is seizing the assets\\n    event SeizeCollateral(address indexed liquidatee, address indexed liquidator);\\n\\n    /// @notice Emitted when (additional) liquidity is provided\\n    /// @param idx Index of the perpetual market\\n    /// @param liquidityProvider User who provides liquidity\\n    /// @param quoteAmount vQuote amount (i.e. USD amount) to be added to the targeted market\\n    /// @param baseAmount vBase amount (i.e. Base amount) to be added to the targeted market\\n    /// @param tradingFeesEarned Trading fees earned by the liquidity provider\\n    event LiquidityProvided(\\n        uint256 indexed idx,\\n        address indexed liquidityProvider,\\n        uint256 quoteAmount,\\n        uint256 baseAmount,\\n        int256 tradingFeesEarned\\n    );\\n\\n    /// @notice Emitted when liquidity is removed\\n    /// @param idx Index of the perpetual market\\n    /// @param liquidityProvider User who provides liquidity\\n    /// @param profit Sum of pnL + Trading fees earned - Trading fees payed - Insurance fees payed\\n    /// @param tradingFeesPayed Trading fees payed for closing the active position\\n    /// @param reductionRatio Percentage of previous position reduced\\n    event LiquidityRemoved(\\n        uint256 indexed idx,\\n        address indexed liquidityProvider,\\n        uint256 reductionRatio,\\n        int256 profit,\\n        int256 tradingFeesPayed,\\n        bool isPositionClosed\\n    );\\n\\n    /// @notice Emitted when dust is sold by governance\\n    /// @param idx Index of the perpetual market\\n    /// @param profit Amount of profit generated by the dust sale. 18 decimals\\n    /// @param tradingFeesPayed Trading fees payed on dust sell. 18 decimals\\n    event DustSold(uint256 indexed idx, int256 profit, int256 tradingFeesPayed);\\n\\n    /// @notice Emitted when parameters are changed\\n    event ClearingHouseParametersChanged(\\n        int256 newMinMargin,\\n        int256 newMinMarginAtCreation,\\n        uint256 newMinPositiveOpenNotional,\\n        uint256 newLiquidationReward,\\n        uint256 newInsuranceRatio,\\n        uint256 newLiquidationRewardInsuranceShare,\\n        uint256 newLiquidationDiscount,\\n        uint256 nonUACollSeizureDiscount,\\n        int256 uaDebtSeizureThreshold\\n    );\\n\\n    event StakingContractChanged(IStakingContract newStakingContract);\\n\\n    /* ****************** */\\n    /*     Viewer         */\\n    /* ****************** */\\n\\n    function vault() external view returns (IVault);\\n\\n    function insurance() external view returns (IInsurance);\\n\\n    function perpetuals(uint256 idx) external view returns (IPerpetual);\\n\\n    function stakingContract() external view returns (IStakingContract);\\n\\n    function getNumMarkets() external view returns (uint256);\\n\\n    function minMargin() external view returns (int256);\\n\\n    function minMarginAtCreation() external view returns (int256);\\n\\n    function minPositiveOpenNotional() external view returns (uint256);\\n\\n    function liquidationReward() external view returns (uint256);\\n\\n    function insuranceRatio() external view returns (uint256);\\n\\n    function liquidationRewardInsuranceShare() external view returns (uint256);\\n\\n    function liquidationDiscount() external view returns (uint256);\\n\\n    function nonUACollSeizureDiscount() external view returns (uint256);\\n\\n    function uaDebtSeizureThreshold() external view returns (int256);\\n\\n    function getPnLAcrossMarkets(address account) external view returns (int256);\\n\\n    function getDebtAcrossMarkets(address account) external view returns (int256);\\n\\n    /* ****************** */\\n    /*  State modifying   */\\n    /* ****************** */\\n\\n    function allowListPerpetual(IPerpetual perp) external;\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function settleDust(\\n        uint256 idx,\\n        uint256 proposedAmount,\\n        uint256 minAmount,\\n        LibPerpetual.Side direction\\n    ) external;\\n\\n    function setParameters(ClearingHouseParams memory params) external;\\n\\n    function updateGlobalState() external;\\n\\n    function addStakingContract(IStakingContract staking) external;\\n\\n    function deposit(uint256 amount, IERC20Metadata token) external;\\n\\n    function withdraw(uint256 amount, IERC20Metadata token) external;\\n\\n    function withdrawAll(IERC20Metadata token) external;\\n\\n    function changePosition(\\n        uint256 idx,\\n        uint256 amount,\\n        uint256 minAmount,\\n        LibPerpetual.Side direction\\n    ) external;\\n\\n    function extendPositionWithCollateral(\\n        uint256 idx,\\n        uint256 collateralAmount,\\n        IERC20Metadata token,\\n        uint256 positionAmount,\\n        LibPerpetual.Side direction,\\n        uint256 minAmount\\n    ) external;\\n\\n    function closePositionWithdrawCollateral(\\n        uint256 idx,\\n        uint256 proposedAmount,\\n        uint256 minAmount,\\n        IERC20Metadata token\\n    ) external;\\n\\n    function openReversePosition(\\n        uint256 idx,\\n        uint256 closeProposedAmount,\\n        uint256 closeMinAmount,\\n        uint256 openProposedAmount,\\n        uint256 openMinAmount,\\n        LibPerpetual.Side direction\\n    ) external;\\n\\n    function liquidateTrader(\\n        uint256 idx,\\n        address liquidatee,\\n        uint256 proposedAmount,\\n        uint256 minAmount\\n    ) external;\\n\\n    function liquidateLp(\\n        uint256 idx,\\n        address liquidatee,\\n        uint256[2] calldata minVTokenAmounts,\\n        uint256 proposedAmount,\\n        uint256 minAmount\\n    ) external;\\n\\n    function seizeCollateral(address liquidatee) external;\\n\\n    function provideLiquidity(\\n        uint256 idx,\\n        uint256[2] calldata amounts,\\n        uint256 minLpAmount\\n    ) external;\\n\\n    function removeLiquidity(\\n        uint256 idx,\\n        uint256 liquidityAmountToRemove,\\n        uint256[2] calldata minVTokenAmounts,\\n        uint256 proposedAmount,\\n        uint256 minAmount\\n    ) external;\\n}\\n\",\"keccak256\":\"0xeb3a17bec1e69e67a1ef4b27e98dedee466939af097af627abf6a766ee2028b5\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IClearingHouseViewer.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.16;\\n\\n// interfaces\\nimport {IClearingHouse} from \\\"./IClearingHouse.sol\\\";\\nimport {IPerpetual} from \\\"./IPerpetual.sol\\\";\\nimport {IVault} from \\\"./IVault.sol\\\";\\nimport {ICryptoSwap} from \\\"./ICryptoSwap.sol\\\";\\nimport {IInsurance} from \\\"./IInsurance.sol\\\";\\n\\n// libraries\\nimport {LibPerpetual} from \\\"../lib/LibPerpetual.sol\\\";\\n\\ninterface IClearingHouseViewer {\\n    /* ****************** */\\n    /*    Errors          */\\n    /* ****************** */\\n\\n    /// @notice Emitted when the zero address is provided as a parameter in the constructor\\n    error ClearingHouseViewer_ZeroAddressConstructor(uint8 paramIndex);\\n\\n    /// @notice Emitted when the amount of LP tokens passed is larger than the user LP token balance\\n    error ClearingHouseViewer_LpTokenAmountPassedLargerThanBalance();\\n\\n    /// @notice Emitted when the reduction ratio given is larger than 1e18\\n    error ClearingHouseViewer_ReductionRatioTooLarge();\\n\\n    /* ****************** */\\n    /*    Global Getters  */\\n    /* ****************** */\\n\\n    function getExpectedVBaseAmount(uint256 idx, uint256 vQuoteAmountToSpend) external view returns (uint256);\\n\\n    function getExpectedVQuoteAmount(uint256 idx, uint256 vBaseAmountToSpend) external view returns (uint256);\\n\\n    function getExpectedLpTokenAmount(uint256 idx, uint256[2] calldata amounts) external view returns (uint256);\\n\\n    function getExpectedVirtualTokenAmountsFromLpTokenAmount(\\n        uint256 idx,\\n        address account,\\n        uint256 lpTokenAmountToWithdraw\\n    ) external view returns (uint256[2] memory);\\n\\n    function marketPrice(uint256 idx) external view returns (uint256);\\n\\n    function indexPrice(uint256 idx) external view returns (int256);\\n\\n    function totalLpTokenSupply(uint256 idx) external view returns (uint256);\\n\\n    function getGlobalPosition(uint256 idx) external view returns (LibPerpetual.GlobalPosition memory);\\n\\n    function getBaseDust(uint256 idx) external view returns (int256);\\n\\n    function getMarket(uint256 idx) external view returns (ICryptoSwap);\\n\\n    function insuranceFee(uint256 idx) external view returns (int256);\\n\\n    function getBaseBalance(uint256 idx) external view returns (uint256);\\n\\n    function getQuoteBalance(uint256 idx) external view returns (uint256);\\n\\n    function getTotalLiquidityProvided(uint256 idx) external view returns (uint256);\\n\\n    /* ****************** */\\n    /*    User Getters    */\\n    /* ****************** */\\n\\n    function isMarginValid(address account, int256 ratio) external view returns (bool);\\n\\n    function marginRatio(address account) external view returns (int256);\\n\\n    function getFundingPaymentsAcrossMarkets(address account) external view returns (int256 fundingPayments);\\n\\n    function getReserveValue(address account, bool isDiscounted) external view returns (int256);\\n\\n    function getBalance(address user, uint256 tokenIdx) external view returns (int256);\\n\\n    function getTraderFundingPayments(uint256 idx, address account) external view returns (int256);\\n\\n    function getTraderUnrealizedPnL(uint256 idx, address account) external view returns (int256);\\n\\n    function getTraderPosition(uint256 idx, address account) external view returns (LibPerpetual.TraderPosition memory);\\n\\n    function getFundingPayments(uint256 idx, address account) external view returns (int256 fundingPayments);\\n\\n    function getLpFundingPayments(uint256 idx, address account) external view returns (int256);\\n\\n    function getLpEstimatedPnl(uint256 idx, address account) external view returns (int256);\\n\\n    function getLpTradingFees(uint256 idx, address account) external view returns (uint256);\\n\\n    function getLpUnrealizedPnL(uint256 idx, address account) external view returns (int256);\\n\\n    function accountLeverage(address account) external view returns (int256);\\n\\n    function marketLeverage(uint256 idx, address account) external view returns (int256);\\n\\n    function isTraderPositionOpen(uint256 idx, address account) external view returns (bool);\\n\\n    function isLpPositionOpen(uint256 idx, address account) external view returns (bool);\\n\\n    function isPositionOpen(address account) external view returns (bool);\\n\\n    function getLpPositionAfterWithdrawal(uint256 idx, address account)\\n        external\\n        view\\n        returns (LibPerpetual.TraderPosition memory);\\n\\n    function getLpPosition(uint256 idx, address account)\\n        external\\n        view\\n        returns (LibPerpetual.LiquidityProviderPosition memory);\\n\\n    function getTraderProposedAmount(\\n        uint256 idx,\\n        address user,\\n        uint256 reductionRatio,\\n        uint256 iter,\\n        uint256 minAmount\\n    ) external view returns (uint256 proposedAmount);\\n\\n    function getLpProposedAmount(\\n        uint256 idx,\\n        address user,\\n        uint256 reductionRatio,\\n        uint256 iter,\\n        uint256[2] calldata minVTokenAmounts\\n    ) external returns (uint256 proposedAmount);\\n\\n    /* ******************** */\\n    /*    Static Helpers    */\\n    /* ******************** */\\n\\n    function removeLiquiditySwap(\\n        uint256 idx,\\n        address user,\\n        uint256 liquidityAmountToRemove,\\n        uint256[2] calldata minVTokenAmounts,\\n        uint256 proposedAmount,\\n        LibPerpetual.Side direction,\\n        bool withCurveTradingFees\\n    ) external returns (uint256 proceeds);\\n}\\n\",\"keccak256\":\"0x6b3c3b18d82c581fce9569b55efd39e9439ff232d2d358001a0be5000a9779a1\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/ICryptoSwap.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.16;\\n\\n/// @dev Contract https://github.com/curvefi/curve-crypto-contract/blob/master/deployment-logs/2021-11-01.%20EURS%20on%20mainnet/CryptoSwap.vy\\ninterface ICryptoSwap {\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function price_oracle() external view returns (uint256);\\n\\n    function mid_fee() external view returns (uint256);\\n\\n    function out_fee() external view returns (uint256);\\n\\n    function admin_fee() external view returns (uint256);\\n\\n    function A() external view returns (uint256);\\n\\n    function gamma() external view returns (uint256);\\n\\n    function price_scale() external view returns (uint256);\\n\\n    function balances(uint256 i) external view returns (uint256);\\n\\n    function D() external view returns (uint256);\\n\\n    function fee_calc(uint256[2] memory x) external view returns (uint256);\\n\\n    function calc_token_fee(uint256[2] memory amounts, uint256[2] memory xp) external view returns (uint256);\\n\\n    function future_A_gamma_time() external view returns (uint256);\\n\\n    // Swap token i to j with amount dx and min amount min_dy\\n    function exchange(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external returns (uint256);\\n\\n    function get_dy(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function calc_token_amount(uint256[2] calldata amounts) external view returns (uint256);\\n\\n    function add_liquidity(uint256[2] memory amounts, uint256 min_mint_amount) external returns (uint256); // WARNING: Has to be memory to be called within the perpetual contract, but you should use calldata\\n\\n    function remove_liquidity(uint256 _amount, uint256[2] memory min_amounts) external; // WARNING: Has to be memory to be called within the perpetual contract, but you should use calldata\\n\\n    function last_prices() external view returns (uint256);\\n\\n    function token() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd2220ceccbfc25c5bff6940f112654b1ebf74b5ed2e06dadea51c5f0783e241a\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/ICurveCryptoViews.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.16;\\n\\nimport {ICryptoSwap} from \\\"./ICryptoSwap.sol\\\";\\nimport {IMath} from \\\"./IMath.sol\\\";\\n\\ninterface ICurveCryptoViews {\\n    function math() external view returns (IMath);\\n\\n    function get_dy_ex_fees(\\n        ICryptoSwap cryptoSwap,\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function get_dy_fees(\\n        ICryptoSwap cryptoSwap,\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function get_dy_fees_perc(\\n        ICryptoSwap cryptoSwap,\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function get_dx_ex_fees(\\n        ICryptoSwap cryptoSwap,\\n        uint256 i,\\n        uint256 j,\\n        uint256 dy\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3a680a59311efb45a6b54d3744513d799ed1bd57b25b074b6efdd07b98ac87d7\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IInsurance.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.16;\\n\\nimport {IClearingHouse} from \\\"./IClearingHouse.sol\\\";\\n\\ninterface IInsurance {\\n    /* ****************** */\\n    /*     Errors         */\\n    /* ****************** */\\n\\n    /// @notice Emitted when the zero address is provided as a parameter in the constructor\\n    error Insurance_ZeroAddressConstructor(uint8 paramIndex);\\n\\n    /// @notice Emitted when the sender is not the vault address\\n    error Insurance_SenderNotVault();\\n\\n    /// @notice Emitted when the sender is not the clearingHouse address\\n    error Insurance_SenderNotClearingHouse();\\n\\n    /// @notice Emitted when locked insurance falls below insurance ratio\\n    error Insurance_InsufficientInsurance();\\n\\n    /// @notice Emitted when the proposed clearingHouse address is equal to the zero address\\n    error Insurance_ClearingHouseZeroAddress();\\n\\n    /// @notice Emitted when the clearingHouse has already been set (one time call function)\\n    error Insurance_ClearingHouseAlreadySet();\\n\\n    /* ****************** */\\n    /*     Events         */\\n    /* ****************** */\\n\\n    /// @notice Emitted when a new ClearingHouse is connected to the issuer\\n    /// @param newClearingHouse New ClearingHouse contract address\\n    event ClearingHouseChanged(IClearingHouse newClearingHouse);\\n\\n    /// @notice Emitted when some insurance reserves are withdrawn by governance\\n    /// @param amount Amount of insurance reserves withdrawn. 18 decimals\\n    event InsuranceRemoved(uint256 amount);\\n\\n    /// @notice Emitted when the system debt is updated, upwards or downwards\\n    /// @param newSystemDebt New amount of system debt. 18 decimals (accounted for in UA)\\n    event SystemDebtChanged(uint256 newSystemDebt);\\n\\n    /* ****************** */\\n    /*     Viewer         */\\n    /* ****************** */\\n\\n    /* ****************** */\\n    /*  State modifying   */\\n    /* ****************** */\\n\\n    function fundInsurance(uint256 amount) external;\\n\\n    function settleDebt(uint256 amount) external;\\n\\n    function removeInsurance(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xc89f97e65f5cb43959dedef63c172f16b789ce17c1571b8fe7d7c64e8cd6bf4b\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.16;\\n\\ninterface IMath {\\n    function sqrt_int(uint256 x) external view returns (uint256);\\n\\n    function newton_D(\\n        uint256 ANN,\\n        uint256 gamma,\\n        uint256[2] memory x_unsorted\\n    ) external view returns (uint256);\\n\\n    function newton_y(\\n        uint256 ANN,\\n        uint256 gamma,\\n        uint256[2] memory x,\\n        uint256 D,\\n        uint256 i\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x9e55714d11111130444d833ec6b4fd4c8207e7cae681d5c49619e0da5816a2d3\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.16;\\n\\n// interfaces\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n/// @notice Oracle interface created to ease oracle contract switch\\ninterface IOracle {\\n    struct AssetOracle {\\n        uint24 heartBeat;\\n        AggregatorV3Interface aggregator; // aggregator of the ERC20 token for ERC4626 tokens\\n        bool isVaultAsset;\\n        int256 fixedPrice;\\n    }\\n\\n    /* ****************** */\\n    /*     Events         */\\n    /* ****************** */\\n\\n    /// @notice Emitted when oracle heart beat is added or updated\\n    /// @param asset Asset that got linked to an oracle\\n    /// @param aggregator Chainlink aggregator used as the asset oracle\\n    /// @param isVault True if the asset is a ERC-4626 vault asset\\n    event OracleUpdated(address asset, AggregatorV3Interface aggregator, bool isVault);\\n\\n    /// @notice Emitted when an asset got a fixed price when requesting an oracle\\n    /// @param asset Asset which got a fixed price\\n    /// @param fixedPrice Fixed price that the asset got\\n    event AssetGotFixedPrice(address asset, int256 fixedPrice);\\n\\n    /// @notice Emitted when oracle heart beat is updated\\n    /// @param asset Asset whose heartBeat is updated\\n    /// @param newHeartBeat New heart beat value\\n    event HeartBeatUpdated(address asset, uint24 newHeartBeat);\\n\\n    /// @notice Emitted when sequencer uptime feed is updated\\n    /// @param newSequencerUptimeFeed New sequencer uptime feed\\n    event SequencerUptimeFeedUpdated(AggregatorV3Interface newSequencerUptimeFeed);\\n\\n    /// @notice Emitted when grace period is updated\\n    /// @param newGracePeriod New grace period\\n    event GracePeriodUpdated(uint256 newGracePeriod);\\n\\n    /* ****************** */\\n    /*     Errors         */\\n    /* ****************** */\\n\\n    /// @notice Emitted when the latest round is incomplete\\n    error Oracle_InvalidRoundTimestamp();\\n\\n    /// @notice Emitted when the latest round's price is invalid\\n    error Oracle_InvalidRoundPrice();\\n\\n    /// @notice Emitted when the latest round's data is older than the oracle's max refresh time\\n    error Oracle_DataNotFresh();\\n\\n    /// @notice Emitted when the proposed asset address is equal to the zero address\\n    error Oracle_AssetZeroAddress();\\n\\n    /// @notice Emitted when the proposed aggregator address is equal to the zero address\\n    error Oracle_AggregatorZeroAddress();\\n\\n    /// @notice Emitted when the proposed sequencer uptime feed address is equal to the zero address\\n    error Oracle_SequencerUptimeFeedZeroAddress();\\n\\n    /// @notice Emitted when owner tries to set fixed price to an unsupported asset\\n    error Oracle_UnsupportedAsset();\\n\\n    /// @notice Emitted when Zksync sequencer is down\\n    error Oracle_SequencerDown();\\n\\n    /// @notice Emitted when Zksync sequencer hasn't been back up for long enough\\n    error Oracle_GracePeriodNotOver();\\n\\n    /// @notice Emitted when proposed grace period doesn't fit in the defined bounds\\n    error Oracle_IncorrectGracePeriod();\\n\\n    /* ****************** */\\n    /*     Viewer         */\\n    /* ****************** */\\n\\n    function gracePeriod() external view returns (uint256);\\n\\n    function sequencerUptimeFeed() external view returns (AggregatorV3Interface);\\n\\n    function getPrice(address asset, int256 balance) external view returns (int256);\\n\\n    /* ****************** */\\n    /*  State modifying   */\\n    /* ****************** */\\n\\n    function setOracle(\\n        address asset,\\n        AggregatorV3Interface aggregator,\\n        uint24 heartBeat,\\n        bool isVault\\n    ) external;\\n\\n    function setFixedPrice(address asset, int256 fixedPrice) external;\\n\\n    function setHeartBeat(address asset, uint24 newHeartBeat) external;\\n\\n    function setSequencerUptimeFeed(AggregatorV3Interface newSequencerUptimeFeed) external;\\n\\n    function setGracePeriod(uint256 newGracePeriod) external;\\n}\\n\",\"keccak256\":\"0xb9500bba3d3c767464d9b240648abbd9c9131ca28395ffe258204f9ee0481650\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IPerpetual.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.16;\\n\\n// interfaces\\nimport {ICryptoSwap} from \\\"./ICryptoSwap.sol\\\";\\nimport {IVault} from \\\"./IVault.sol\\\";\\nimport {ICryptoSwap} from \\\"./ICryptoSwap.sol\\\";\\nimport {IVBase} from \\\"./IVBase.sol\\\";\\nimport {IVQuote} from \\\"./IVQuote.sol\\\";\\nimport {IInsurance} from \\\"./IInsurance.sol\\\";\\nimport {IClearingHouse} from \\\"./IClearingHouse.sol\\\";\\nimport {ICurveCryptoViews} from \\\"./ICurveCryptoViews.sol\\\";\\n\\n// libraries\\nimport {LibPerpetual} from \\\"../lib/LibPerpetual.sol\\\";\\n\\ninterface IPerpetual {\\n    struct PerpetualParams {\\n        uint256 riskWeight;\\n        uint256 maxLiquidityProvided;\\n        uint256 twapFrequency;\\n        int256 sensitivity;\\n        uint256 maxBlockTradeAmount;\\n        int256 insuranceFee;\\n        int256 lpDebtCoef;\\n        uint256 lockPeriod;\\n    }\\n\\n    /* ****************** */\\n    /*     Errors         */\\n    /* ****************** */\\n\\n    /// @notice Emitted when the zero address is provided as a parameter in the constructor\\n    error Perpetual_ZeroAddressConstructor(uint256 paramIndex);\\n\\n    /// @notice Emitted when the constructor fails to give approval of a virtual token to the market\\n    error Perpetual_VirtualTokenApprovalConstructor(uint256 tokenIndex);\\n\\n    /// @notice Emitted when the curve admin fee is invalid\\n    error Perpetual_InvalidAdminFee();\\n\\n    /// @notice Emitted when the sender is not the clearing house\\n    error Perpetual_SenderNotClearingHouse();\\n\\n    /// @notice Emitted when the sender is not the clearing house owner\\n    error Perpetual_SenderNotClearingHouseOwner();\\n\\n    /// @notice Emitted when the user attempts to reduce their position using extendPosition\\n    error Perpetual_AttemptReducePosition();\\n\\n    /// @notice Emitted when the user attempts to reverse their position using changePosition\\n    error Perpetual_AttemptReversePosition();\\n\\n    /// @notice Emitted when the price impact of a position is too high\\n    error Perpetual_ExcessiveBlockTradeAmount();\\n\\n    /// @notice Emitted when the user does not have an open position\\n    error Perpetual_NoOpenPosition();\\n\\n    /// @notice Emitted when the user attempts to withdraw more liquidity than they have deposited\\n    error Perpetual_LPWithdrawExceedsBalance();\\n\\n    /// @notice Emitted when the proposed twap frequency is insufficient/excessive\\n    error Perpetual_TwapFrequencyInvalid(uint256 twapFrequency);\\n\\n    /// @notice Emitted when the proposed funding rate sensitivity is insufficient/excessive\\n    error Perpetual_SensitivityInvalid(int256 sensitivity);\\n\\n    /// @notice Emitted when the proposed maximum block trade amount is insufficient\\n    error Perpetual_MaxBlockAmountInvalid(uint256 maxBlockTradeAmount);\\n\\n    /// @notice Emitted when the proposed insurance fee is insufficient/excessive\\n    error Perpetual_InsuranceFeeInvalid(int256 fee);\\n\\n    /// @notice Emitted when the proposed lp debt coefficient is insufficient/excessive\\n    error Perpetual_LpDebtCoefInvalid(int256 lpDebtCoef);\\n\\n    /// @notice Emitted when the proposed lp lock period is insufficient/excessive\\n    error Perpetual_LockPeriodInvalid(uint256 lockPeriod);\\n\\n    /// @notice Emitted when the proposed market risk weight is insufficient/excessive\\n    error Perpetual_RiskWeightInvalid(uint256 riskWeight);\\n\\n    /// @notice Emitted when a token balance of the market is lte 1\\n    error Perpetual_MarketBalanceTooLow();\\n\\n    /// @notice Emitted when the liquidity provider has an open position\\n    error Perpetual_LPOpenPosition();\\n\\n    /// @notice Emitted when the max tvl is reached\\n    error Perpetual_MaxLiquidityProvided();\\n\\n    /// @notice Emitted when the position exceeds the max position size\\n    error Perpetual_MaxPositionSize();\\n\\n    /// @notice Emitted when the user attempts provide liquidity with skewed ratios\\n    error Perpetual_LpAmountDeviation();\\n\\n    /// @notice Emitted when the user attempts remove liquidity too early\\n    error Perpetual_LockPeriodNotReached(uint256 withdrawTime);\\n\\n    /* ****************** */\\n    /*     Events         */\\n    /* ****************** */\\n\\n    /// @notice Emitted when TWAP is updated\\n    /// @param newOracleTwap Latest oracle Time-weighted-average-price\\n    /// @param newMarketTwap Latest market Time-weighted-average-price\\n    event TwapUpdated(int256 newOracleTwap, int256 newMarketTwap);\\n\\n    /// @notice Emitted when funding rate is updated\\n    /// @param cumulativeFundingRate Cumulative sum of all funding rate updates\\n    /// @param fundingRate Latest fundingRate update\\n    event FundingRateUpdated(int256 cumulativeFundingRate, int256 fundingRate);\\n\\n    /// @notice Emitted when swap with cryptoswap pool fails\\n    /// @param errorMessage Return error message\\n    event Log(string errorMessage);\\n\\n    /// @notice Emitted when (base) dust is generated\\n    /// @param vBaseAmount Amount of dust\\n    event DustGenerated(int256 vBaseAmount);\\n\\n    /// @notice Emitted when parameters are updated\\n    event PerpetualParametersChanged(\\n        uint256 newRiskWeight,\\n        uint256 newMaxLiquidityProvided,\\n        uint256 newTwapFrequency,\\n        int256 newSensitivity,\\n        uint256 newMaxBlockTradeAmount,\\n        int256 newInsuranceFee,\\n        int256 newLpDebtCoef,\\n        uint256 lockPeriod\\n    );\\n\\n    /// @notice Emitted when funding payments are exchanged for a trader / lp\\n    event FundingPayed(\\n        address indexed account,\\n        int256 amount,\\n        int256 globalCumulativeFundingRate,\\n        int256 userCumulativeFundingRate,\\n        bool isTrader\\n    );\\n\\n    /* ****************** */\\n    /*     Viewer         */\\n    /* ****************** */\\n\\n    function market() external view returns (ICryptoSwap);\\n\\n    function vBase() external view returns (IVBase);\\n\\n    function vQuote() external view returns (IVQuote);\\n\\n    function clearingHouse() external view returns (IClearingHouse);\\n\\n    function curveCryptoViews() external view returns (ICurveCryptoViews);\\n\\n    function maxLiquidityProvided() external view returns (uint256);\\n\\n    function riskWeight() external view returns (uint256);\\n\\n    function twapFrequency() external view returns (uint256);\\n\\n    function sensitivity() external view returns (int256);\\n\\n    function maxBlockTradeAmount() external view returns (uint256);\\n\\n    function maxPosition() external view returns (uint256);\\n\\n    function insuranceFee() external view returns (int256);\\n\\n    function lpDebtCoef() external view returns (int256);\\n\\n    function lockPeriod() external view returns (uint256);\\n\\n    function oracleTwap() external view returns (int128);\\n\\n    function marketTwap() external view returns (int128);\\n\\n    function getTraderPosition(address account) external view returns (LibPerpetual.TraderPosition memory);\\n\\n    function getLpPositionAfterWithdrawal(address account) external view returns (LibPerpetual.TraderPosition memory);\\n\\n    function getLpLiquidity(address account) external view returns (uint256);\\n\\n    function getLpPosition(address account) external view returns (LibPerpetual.LiquidityProviderPosition memory);\\n\\n    function getGlobalPosition() external view returns (LibPerpetual.GlobalPosition memory);\\n\\n    function getTraderUnrealizedPnL(address account) external view returns (int256);\\n\\n    function getTraderFundingPayments(address account) external view returns (int256);\\n\\n    function getLpUnrealizedPnL(address account) external view returns (int256);\\n\\n    function getLpFundingPayments(address account) external view returns (int256);\\n\\n    function getLpTradingFees(address account) external view returns (uint256);\\n\\n    function marketPrice() external view returns (uint256);\\n\\n    function indexPrice() external view returns (int256);\\n\\n    function getTotalLiquidityProvided() external view returns (uint256);\\n\\n    function getPendingPnL(address account) external view returns (int256 pnL);\\n\\n    function getUserDebt(address account) external view returns (int256 debt);\\n\\n    function isTraderPositionOpen(address account) external view returns (bool);\\n\\n    function isLpPositionOpen(address account) external view returns (bool);\\n\\n    function getLpOpenNotional(address account) external view returns (int256);\\n\\n    /* ************* */\\n    /*    Helpers    */\\n    /* ************* */\\n\\n    function removeLiquiditySwap(\\n        address user,\\n        uint256 liquidityAmountToRemove,\\n        uint256[2] calldata minVTokenAmounts,\\n        uint256 proposedAmount,\\n        LibPerpetual.Side direction,\\n        bool withCurveTradingFees\\n    ) external;\\n\\n    /* ****************** */\\n    /*  State modifying   */\\n    /* ****************** */\\n\\n    function changePosition(\\n        address account,\\n        uint256 amount,\\n        uint256 minAmount,\\n        LibPerpetual.Side direction,\\n        bool isLiquidation\\n    )\\n        external\\n        returns (\\n            int256 quoteProceeds,\\n            int256 baseProceeds,\\n            int256 profit,\\n            int256 tradingFeesPayed,\\n            bool isPositionIncreased,\\n            bool isPositionClosed\\n        );\\n\\n    function provideLiquidity(\\n        address account,\\n        uint256[2] calldata amounts,\\n        uint256 minLpAmount\\n    ) external returns (int256 tradingFees);\\n\\n    function removeLiquidity(\\n        address account,\\n        uint256 liquidityAmountToRemove,\\n        uint256[2] calldata minVTokenAmounts,\\n        uint256 proposedAmount,\\n        uint256 minAmount,\\n        bool isLiquidation\\n    )\\n        external\\n        returns (\\n            int256 profit,\\n            int256 tradingFeesPayed,\\n            uint256 reductionRatio,\\n            int256 quoteProceeds,\\n            bool isPositionClosed\\n        );\\n\\n    function settleTrader(address account) external returns (int256 fundingPayments);\\n\\n    function settleLp(address account) external returns (int256 fundingPayments);\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function setParameters(PerpetualParams memory params) external;\\n\\n    function updateGlobalState() external;\\n}\\n\",\"keccak256\":\"0x627a17a621fdfc711f6b8f33f8916d35d587c19d4863ab2098934744363b6476\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IStakingContract.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.16;\\n\\ninterface IStakingContract {\\n    /* ****************** */\\n    /*  State modifying   */\\n    /* ****************** */\\n\\n    function updateStakingPosition(uint256 idx, address lp) external;\\n}\\n\",\"keccak256\":\"0x68d823bee0f375b7d06a7b97a6234e342be487b6d74ee89b67abbf6a19583c94\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IVBase.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.16;\\n\\n// interfaces\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport {IVirtualToken} from \\\"../interfaces/IVirtualToken.sol\\\";\\n\\ninterface IVBase is IVirtualToken {\\n    /* ****************** */\\n    /*     Events         */\\n    /* ****************** */\\n\\n    /// @notice Emitted when oracle heart beat is updated\\n    /// @param newHeartBeat New heart beat value\\n    event HeartBeatUpdated(uint256 newHeartBeat);\\n\\n    /// @notice Emitted when sequencer uptime feed is updated\\n    /// @param newSequencerUptimeFeed New sequencer uptime feed\\n    event SequencerUptimeFeedUpdated(AggregatorV3Interface newSequencerUptimeFeed);\\n\\n    /// @notice Emitted when grace period is updated\\n    /// @param newGracePeriod New grace period\\n    event GracePeriodUpdated(uint256 newGracePeriod);\\n\\n    /* ****************** */\\n    /*     Errors         */\\n    /* ****************** */\\n\\n    /// @notice Emitted when the proposed aggregators decimals are less than PRECISION\\n    error VBase_InsufficientPrecision();\\n\\n    /// @notice Emitted when the latest round is incomplete\\n    error VBase_InvalidRoundTimestamp();\\n\\n    /// @notice Emitted when the latest round's price is invalid\\n    error VBase_InvalidRoundPrice();\\n\\n    /// @notice Emitted when the latest round's data is older than the oracle's max refresh time\\n    error VBase_DataNotFresh();\\n\\n    /// @notice Emitted when proposed sequencer uptime feed address is equal to the zero address\\n    error VBase_SequencerUptimeFeedZeroAddress();\\n\\n    /// @notice Emitted when proposed grace period is outside of the bounds\\n    error VBase_IncorrectGracePeriod();\\n\\n    /// @notice Emitted when Zksync sequencer is down\\n    error VBase_SequencerDown();\\n\\n    /// @notice Emitted when Zksync sequencer hasn't been back up for long enough\\n    error VBase_GracePeriodNotOver();\\n\\n    /* ****************** */\\n    /*     Viewer         */\\n    /* ****************** */\\n\\n    function getIndexPrice() external view returns (int256);\\n\\n    function heartBeat() external view returns (uint256);\\n\\n    function sequencerUptimeFeed() external view returns (AggregatorV3Interface);\\n\\n    function gracePeriod() external view returns (uint256);\\n\\n    /* ****************** */\\n    /*  State modifying   */\\n    /* ****************** */\\n\\n    function setHeartBeat(uint256 newHeartBeat) external;\\n\\n    function setSequencerUptimeFeed(AggregatorV3Interface newSequencerUptimeFeed) external;\\n\\n    function setGracePeriod(uint256 newGracePeriod) external;\\n}\\n\",\"keccak256\":\"0x05b3f42731f3d4b3414846675b931b2e6f2c6d06270442a7a72d6d333a94fb79\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IVQuote.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.16;\\n\\n// interfaces\\nimport {IVirtualToken} from \\\"../interfaces/IVirtualToken.sol\\\";\\n\\ninterface IVQuote is IVirtualToken {}\\n\",\"keccak256\":\"0x6a0496794205671a1f114ba98abfcb56f3b8d9926034d0710d659e9ddfb38768\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.16;\\n\\n// interfaces\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {IInsurance} from \\\"./IInsurance.sol\\\";\\nimport {IOracle} from \\\"./IOracle.sol\\\";\\nimport {IClearingHouse} from \\\"./IClearingHouse.sol\\\";\\n\\ninterface IVault {\\n    struct Collateral {\\n        IERC20Metadata asset;\\n        uint256 weight;\\n        uint8 decimals;\\n        uint256 currentAmount;\\n        uint256 maxAmount;\\n    }\\n\\n    /* ****************** */\\n    /*     Errors         */\\n    /* ****************** */\\n\\n    /// @notice Emitted when the zero address is provided as a parameter in the constructor\\n    error Vault_ZeroAddressConstructor(uint8 paramIndex);\\n\\n    /// @notice Emitted when user tries to withdraw collateral while having a UA debt\\n    error Vault_UADebt();\\n\\n    /// @notice Emitted when the sender is not the clearing house\\n    error Vault_SenderNotClearingHouse();\\n\\n    /// @notice Emitted when the sender is not the clearing house, nor the insurance\\n    error Vault_SenderNotClearingHouseNorInsurance();\\n\\n    /// @notice Emitted when a user attempts to use a token which is not whitelisted as collateral\\n    error Vault_UnsupportedCollateral();\\n\\n    /// @notice Emitted when owner tries to whitelist a collateral already whitelisted\\n    error Vault_CollateralAlreadyWhiteListed();\\n\\n    /// @notice Emitted when a user attempts to withdraw with a reduction ratio above 1e18\\n    error Vault_WithdrawReductionRatioTooHigh();\\n\\n    /// @notice Emitted when a user attempts to withdraw more than their balance\\n    error Vault_WithdrawExcessiveAmount();\\n\\n    /// @notice Emitted when the proposed clearingHouse address is equal to the zero address\\n    error Vault_ClearingHouseZeroAddress();\\n\\n    /// @notice Emitted when the clearingHouse has already been set (one time call function)\\n    error Vault_ClearingHouseAlreadySet();\\n\\n    /// @notice Emitted when the proposed insurance address is equal to the zero address\\n    error Vault_InsuranceZeroAddress();\\n\\n    /// @notice Emitted when the insurance has already been set (one time call function)\\n    error Vault_InsuranceAlreadySet();\\n\\n    /// @notice Emitted when the proposed oracle address is equal to the zero address\\n    error Vault_OracleZeroAddress();\\n\\n    /// @notice Emitted when the proposed collateral weight is under the limit\\n    error Vault_InsufficientCollateralWeight();\\n\\n    /// @notice Emitted when the proposed collateral weight is above the limit\\n    error Vault_ExcessiveCollateralWeight();\\n\\n    /// @notice Emitted when a user attempts to withdraw more collateral than available in vault\\n    error Vault_InsufficientBalance();\\n\\n    /// @notice Emitted when a user attempts to withdraw more collateral than available in vault\\n    error Vault_MaxCollateralAmountExceeded();\\n\\n    /* ****************** */\\n    /*     Events         */\\n    /* ****************** */\\n\\n    /// @notice Emitted when collateral is deposited into the vault\\n    /// @param user User who deposited collateral\\n    /// @param asset Token to be used for the collateral\\n    /// @param amount Amount to be used as collateral. Might not be 18 decimals\\n    event Deposit(address indexed user, address indexed asset, uint256 amount);\\n\\n    /// @notice Emitted when collateral is withdrawn from the vault\\n    /// @param user User who deposited collateral\\n    /// @param asset Token to be used for the collateral\\n    /// @param amount Amount to be used as collateral. Might not be 18 decimals\\n    event Withdraw(address indexed user, address indexed asset, uint256 amount);\\n\\n    /// @notice Emitted when bad debt is settled for by the insurance reserve\\n    /// @param beneficiary Beneficiary of the insurance payment\\n    /// @param amount Amount of bad insurance requested\\n    event TraderBadDebtGenerated(address beneficiary, uint256 amount);\\n\\n    /// @notice Emitted when the ClearingHouse address is updated\\n    /// @param newClearingHouse New ClearingHouse contract address\\n    event ClearingHouseChanged(IClearingHouse newClearingHouse);\\n\\n    /// @notice Emitted when the Insurance address is updated\\n    /// @param newInsurance New Insurance contract address\\n    event InsuranceChanged(IInsurance newInsurance);\\n\\n    /// @notice Emitted when the Oracle address is updated\\n    /// @param newOracle New Oracle contract address\\n    event OracleChanged(IOracle newOracle);\\n\\n    /// @notice Emitted when a new collateral is added to the Vault\\n    /// @param asset Asset added as collateral\\n    /// @param weight Volatility measure of the asset\\n    /// @param maxAmount weight for the collateral\\n    event CollateralAdded(IERC20Metadata asset, uint256 weight, uint256 maxAmount);\\n\\n    /// @notice Emitted when a collateral weight is updated\\n    /// @param asset Asset targeted by the change\\n    /// @param newWeight New volatility measure for the collateral\\n    event CollateralWeightChanged(IERC20Metadata asset, uint256 newWeight);\\n\\n    /// @notice Emitted when a collateral max amount is updated\\n    /// @param asset Asset targeted by the change\\n    /// @param newMaxAmount New max amount for the collateral\\n    event CollateralMaxAmountChanged(IERC20Metadata asset, uint256 newMaxAmount);\\n\\n    /* ****************** */\\n    /*     Viewer         */\\n    /* ****************** */\\n    function insurance() external view returns (IInsurance);\\n\\n    function oracle() external view returns (IOracle);\\n\\n    function clearingHouse() external view returns (IClearingHouse);\\n\\n    // slither-disable-next-line naming-convention\\n    function UA() external view returns (IERC20Metadata);\\n\\n    function tokenToCollateralIdx(IERC20Metadata token) external view returns (uint256);\\n\\n    function getTotalValueLocked() external view returns (int256);\\n\\n    function getWhiteListedCollateral(uint256 idx) external view returns (Collateral memory);\\n\\n    function getNumberOfCollaterals() external view returns (uint256);\\n\\n    function getReserveValue(address trader, bool isDiscounted) external view returns (int256);\\n\\n    function getBalance(address user, uint256 tokenIdx) external view returns (int256);\\n\\n    /* ****************** */\\n    /*  State modifying   */\\n    /* ****************** */\\n\\n    function deposit(\\n        address user,\\n        uint256 amount,\\n        IERC20Metadata token\\n    ) external;\\n\\n    function settlePnL(address user, int256 amount) external;\\n\\n    function withdraw(\\n        address user,\\n        uint256 amount,\\n        IERC20Metadata token\\n    ) external;\\n\\n    function withdrawAll(address user, IERC20Metadata withdrawToken) external;\\n\\n    function settleLiquidationOnCollaterals(address liquidator, address liquidatee) external;\\n\\n    function transferUa(address user, uint256 amount) external;\\n\\n    /* ****************** */\\n    /*     Governance     */\\n    /* ****************** */\\n\\n    function setClearingHouse(IClearingHouse newClearingHouse) external;\\n\\n    function setInsurance(IInsurance newInsurance) external;\\n\\n    function setOracle(IOracle newOracle) external;\\n\\n    function addWhiteListedCollateral(\\n        IERC20Metadata asset,\\n        uint256 weight,\\n        uint256 maxAmount\\n    ) external;\\n\\n    function changeCollateralWeight(IERC20Metadata asset, uint256 newWeight) external;\\n\\n    function changeCollateralMaxAmount(IERC20Metadata asset, uint256 newMaxAmount) external;\\n}\\n\",\"keccak256\":\"0xf7bf98306634cf8febfae415cae986de0942a2ad297699187aa646b4515d16c5\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IVirtualToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.16;\\n\\n// interfaces\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IVirtualToken is IERC20Metadata {\\n    /* ****************** */\\n    /*  State modifying   */\\n    /* ****************** */\\n\\n    function mint(uint256 amount) external;\\n\\n    function burn(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xf3d82350f98f582f742b9b892f3cd9ab2b767d41deea9278fa054db9dcb4a777\",\"license\":\"AGPL-3.0\"},\"contracts/lib/LibMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.16;\\n\\n// libraries\\nimport {PRBMathUD60x18} from \\\"prb-math/contracts/PRBMathUD60x18.sol\\\";\\nimport {PRBMathSD59x18} from \\\"prb-math/contracts/PRBMathSD59x18.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {SignedMath} from \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\n\\n/*\\n * To be used if `b` decimals make `b` larger than what it would be otherwise.\\n * Especially useful for fixed point numbers, i.e. a way to represent decimal\\n * values without using decimals. E.g. 25e2 with 3 decimals represents 2.5%\\n *\\n * In our case, we get exchange rates with a 18 decimal precision\\n * (Solidity doesn't support decimal values natively).\\n * So if we have a BASE positions and want to get the equivalent USD amount\\n * we have to do: BASE_position * BASE_USD / 1e18 else the value would be way too high.\\n * To move from USD to BASE: (USD_position * 1e18) / BASE_USD else the value would\\n * be way too low.\\n *\\n * In essence,\\n * wadMul: a.mul(b).div(WAY)\\n * wadDiv: a.mul(WAY).div(b)\\n * where `WAY` represents the number of decimals\\n */\\nlibrary LibMath {\\n    /* ****************** */\\n    /*   Safe casting     */\\n    /* ****************** */\\n\\n    // int256 -> uint256\\n    function toUint256(int256 x) internal pure returns (uint256) {\\n        return SafeCast.toUint256(x);\\n    }\\n\\n    // uint256 -> int256\\n    function toInt256(uint256 x) internal pure returns (int256) {\\n        return SafeCast.toInt256(x);\\n    }\\n\\n    // uint256 -> uint128\\n    function toUint128(uint256 x) internal pure returns (uint128) {\\n        return SafeCast.toUint128(x);\\n    }\\n\\n    // int256 -> int128\\n    function toInt128(int256 x) internal pure returns (int128) {\\n        return SafeCast.toInt128(x);\\n    }\\n\\n    // uint256 -> uint64\\n    function toUint64(uint256 x) internal pure returns (uint64) {\\n        return SafeCast.toUint64(x);\\n    }\\n\\n    /* ********************* */\\n    /*   Other operations    */\\n    /* ********************* */\\n\\n    // absolute value\\n    function abs(int256 x) internal pure returns (int256) {\\n        return PRBMathSD59x18.abs(x);\\n    }\\n\\n    // min value\\n    function min(int256 x, int256 y) internal pure returns (int256) {\\n        return SignedMath.min(x, y);\\n    }\\n\\n    // int256: wad division / multiplication\\n    function wadDiv(int256 x, int256 y) internal pure returns (int256) {\\n        return PRBMathSD59x18.div(x, y);\\n    }\\n\\n    function wadMul(int256 x, int256 y) internal pure returns (int256) {\\n        return PRBMathSD59x18.mul(x, y);\\n    }\\n\\n    // uint256: wad division / multiplication\\n    function wadMul(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return PRBMathUD60x18.mul(x, y);\\n    }\\n\\n    function wadDiv(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return PRBMathUD60x18.div(x, y);\\n    }\\n}\\n\",\"keccak256\":\"0x1e1c8e6c09c9ecf5d287292f522a6fc51bb5192811618dbc52774b006154df0c\",\"license\":\"AGPL-3.0\"},\"contracts/lib/LibPerpetual.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.16;\\n\\n// libraries\\nimport {LibMath} from \\\"./LibMath.sol\\\";\\n\\nlibrary LibPerpetual {\\n    using LibMath for int256;\\n    using LibMath for uint256;\\n\\n    enum Side {\\n        // long position\\n        Long,\\n        // short position\\n        Short\\n    }\\n\\n    struct LiquidityProviderPosition {\\n        // quote assets or liabilities\\n        int128 openNotional;\\n        // base assets or liabilities\\n        int128 positionSize;\\n        // user cumulative funding rate (updated when open/close position)\\n        int128 cumFundingRate;\\n        // lp token owned (is zero for traders)\\n        uint128 liquidityBalance;\\n\\n        // last time when liquidity was provided\\n        uint64 depositTime;\\n\\n        // total percentage return of liquidity providers index\\n        uint128 totalTradingFeesGrowth;\\n        // total base fees paid in cryptoswap pool\\n        uint128 totalBaseFeesGrowth;\\n        // total quote fees paid in cryptoswap pool\\n        uint128 totalQuoteFeesGrowth;\\n    }\\n\\n    struct TraderPosition {\\n        // quote assets or liabilities\\n        int128 openNotional;\\n        // base assets or liabilities\\n        int128 positionSize;\\n        // user cumulative funding rate (updated when open/close position)\\n        int128 cumFundingRate;\\n    }\\n\\n    struct GlobalPosition {\\n        /* twap state */\\n\\n        // timestamp of last trade\\n        uint64 timeOfLastTrade;\\n        // timestamp of last TWAP update\\n        uint64 timeOfLastTwapUpdate;\\n        // global cumulative funding rate (updated every trade)\\n        int128 cumFundingRate;\\n\\n        // total liquidity provided (in vQuote)\\n        uint256 totalQuoteProvided;\\n        // current trade amount in the block\\n        uint128 currentBlockTradeAmount;\\n        /* fees state */\\n\\n        // total percentage return of liquidity providers index\\n        uint128 totalTradingFeesGrowth;\\n        // total base fees paid in cryptoswap pool\\n        uint128 totalBaseFeesGrowth;\\n        // total quote fees paid in cryptoswap pool\\n        uint128 totalQuoteFeesGrowth;\\n    }\\n}\\n\",\"keccak256\":\"0x793c92e005097d893047efcef3f473af367a7c653467dd61fedb967444441a78\",\"license\":\"AGPL-3.0\"},\"prb-math/contracts/PRBMath.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivFixedPointOverflow(uint256 prod1);\\n\\n/// @notice Emitted when the result overflows uint256.\\nerror PRBMath__MulDivOverflow(uint256 prod1, uint256 denominator);\\n\\n/// @notice Emitted when one of the inputs is type(int256).min.\\nerror PRBMath__MulDivSignedInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows int256.\\nerror PRBMath__MulDivSignedOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is MIN_SD59x18.\\nerror PRBMathSD59x18__AbsInputTooSmall();\\n\\n/// @notice Emitted when ceiling a number overflows SD59x18.\\nerror PRBMathSD59x18__CeilOverflow(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__DivInputTooSmall();\\n\\n/// @notice Emitted when one of the intermediary unsigned results overflows SD59x18.\\nerror PRBMathSD59x18__DivOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathSD59x18__ExpInputTooBig(int256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathSD59x18__Exp2InputTooBig(int256 x);\\n\\n/// @notice Emitted when flooring a number underflows SD59x18.\\nerror PRBMathSD59x18__FloorUnderflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format overflows SD59x18.\\nerror PRBMathSD59x18__FromIntOverflow(int256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format underflows SD59x18.\\nerror PRBMathSD59x18__FromIntUnderflow(int256 x);\\n\\n/// @notice Emitted when the product of the inputs is negative.\\nerror PRBMathSD59x18__GmNegativeProduct(int256 x, int256 y);\\n\\n/// @notice Emitted when multiplying the inputs overflows SD59x18.\\nerror PRBMathSD59x18__GmOverflow(int256 x, int256 y);\\n\\n/// @notice Emitted when the input is less than or equal to zero.\\nerror PRBMathSD59x18__LogInputTooSmall(int256 x);\\n\\n/// @notice Emitted when one of the inputs is MIN_SD59x18.\\nerror PRBMathSD59x18__MulInputTooSmall();\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__MulOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the intermediary absolute result overflows SD59x18.\\nerror PRBMathSD59x18__PowuOverflow(uint256 rAbs);\\n\\n/// @notice Emitted when the input is negative.\\nerror PRBMathSD59x18__SqrtNegativeInput(int256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows SD59x18.\\nerror PRBMathSD59x18__SqrtOverflow(int256 x);\\n\\n/// @notice Emitted when addition overflows UD60x18.\\nerror PRBMathUD60x18__AddOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when ceiling a number overflows UD60x18.\\nerror PRBMathUD60x18__CeilOverflow(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 133.084258667509499441.\\nerror PRBMathUD60x18__ExpInputTooBig(uint256 x);\\n\\n/// @notice Emitted when the input is greater than 192.\\nerror PRBMathUD60x18__Exp2InputTooBig(uint256 x);\\n\\n/// @notice Emitted when converting a basic integer to the fixed-point format format overflows UD60x18.\\nerror PRBMathUD60x18__FromUintOverflow(uint256 x);\\n\\n/// @notice Emitted when multiplying the inputs overflows UD60x18.\\nerror PRBMathUD60x18__GmOverflow(uint256 x, uint256 y);\\n\\n/// @notice Emitted when the input is less than 1.\\nerror PRBMathUD60x18__LogInputTooSmall(uint256 x);\\n\\n/// @notice Emitted when the calculating the square root overflows UD60x18.\\nerror PRBMathUD60x18__SqrtOverflow(uint256 x);\\n\\n/// @notice Emitted when subtraction underflows UD60x18.\\nerror PRBMathUD60x18__SubUnderflow(uint256 x, uint256 y);\\n\\n/// @dev Common mathematical functions used in both PRBMathSD59x18 and PRBMathUD60x18. Note that this shared library\\n/// does not always assume the signed 59.18-decimal fixed-point or the unsigned 60.18-decimal fixed-point\\n/// representation. When it does not, it is explicitly mentioned in the NatSpec documentation.\\nlibrary PRBMath {\\n    /// STRUCTS ///\\n\\n    struct SD59x18 {\\n        int256 value;\\n    }\\n\\n    struct UD60x18 {\\n        uint256 value;\\n    }\\n\\n    /// STORAGE ///\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @dev Largest power of two divisor of SCALE.\\n    uint256 internal constant SCALE_LPOTD = 262144;\\n\\n    /// @dev SCALE inverted mod 2^256.\\n    uint256 internal constant SCALE_INVERSE =\\n        78156646155174841979727994598816262306175212592076161876661_508869554232690281;\\n\\n    /// FUNCTIONS ///\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    /// @dev Has to use 192.64-bit fixed-point numbers.\\n    /// See https://ethereum.stackexchange.com/a/96594/24693.\\n    /// @param x The exponent as an unsigned 192.64-bit fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // Start from 0.5 in the 192.64-bit fixed-point format.\\n            result = 0x800000000000000000000000000000000000000000000000;\\n\\n            // Multiply the result by root(2, 2^-i) when the bit at position i is 1. None of the intermediary results overflows\\n            // because the initial result is 2^191 and all magic factors are less than 2^65.\\n            if (x & 0x8000000000000000 > 0) {\\n                result = (result * 0x16A09E667F3BCC909) >> 64;\\n            }\\n            if (x & 0x4000000000000000 > 0) {\\n                result = (result * 0x1306FE0A31B7152DF) >> 64;\\n            }\\n            if (x & 0x2000000000000000 > 0) {\\n                result = (result * 0x1172B83C7D517ADCE) >> 64;\\n            }\\n            if (x & 0x1000000000000000 > 0) {\\n                result = (result * 0x10B5586CF9890F62A) >> 64;\\n            }\\n            if (x & 0x800000000000000 > 0) {\\n                result = (result * 0x1059B0D31585743AE) >> 64;\\n            }\\n            if (x & 0x400000000000000 > 0) {\\n                result = (result * 0x102C9A3E778060EE7) >> 64;\\n            }\\n            if (x & 0x200000000000000 > 0) {\\n                result = (result * 0x10163DA9FB33356D8) >> 64;\\n            }\\n            if (x & 0x100000000000000 > 0) {\\n                result = (result * 0x100B1AFA5ABCBED61) >> 64;\\n            }\\n            if (x & 0x80000000000000 > 0) {\\n                result = (result * 0x10058C86DA1C09EA2) >> 64;\\n            }\\n            if (x & 0x40000000000000 > 0) {\\n                result = (result * 0x1002C605E2E8CEC50) >> 64;\\n            }\\n            if (x & 0x20000000000000 > 0) {\\n                result = (result * 0x100162F3904051FA1) >> 64;\\n            }\\n            if (x & 0x10000000000000 > 0) {\\n                result = (result * 0x1000B175EFFDC76BA) >> 64;\\n            }\\n            if (x & 0x8000000000000 > 0) {\\n                result = (result * 0x100058BA01FB9F96D) >> 64;\\n            }\\n            if (x & 0x4000000000000 > 0) {\\n                result = (result * 0x10002C5CC37DA9492) >> 64;\\n            }\\n            if (x & 0x2000000000000 > 0) {\\n                result = (result * 0x1000162E525EE0547) >> 64;\\n            }\\n            if (x & 0x1000000000000 > 0) {\\n                result = (result * 0x10000B17255775C04) >> 64;\\n            }\\n            if (x & 0x800000000000 > 0) {\\n                result = (result * 0x1000058B91B5BC9AE) >> 64;\\n            }\\n            if (x & 0x400000000000 > 0) {\\n                result = (result * 0x100002C5C89D5EC6D) >> 64;\\n            }\\n            if (x & 0x200000000000 > 0) {\\n                result = (result * 0x10000162E43F4F831) >> 64;\\n            }\\n            if (x & 0x100000000000 > 0) {\\n                result = (result * 0x100000B1721BCFC9A) >> 64;\\n            }\\n            if (x & 0x80000000000 > 0) {\\n                result = (result * 0x10000058B90CF1E6E) >> 64;\\n            }\\n            if (x & 0x40000000000 > 0) {\\n                result = (result * 0x1000002C5C863B73F) >> 64;\\n            }\\n            if (x & 0x20000000000 > 0) {\\n                result = (result * 0x100000162E430E5A2) >> 64;\\n            }\\n            if (x & 0x10000000000 > 0) {\\n                result = (result * 0x1000000B172183551) >> 64;\\n            }\\n            if (x & 0x8000000000 > 0) {\\n                result = (result * 0x100000058B90C0B49) >> 64;\\n            }\\n            if (x & 0x4000000000 > 0) {\\n                result = (result * 0x10000002C5C8601CC) >> 64;\\n            }\\n            if (x & 0x2000000000 > 0) {\\n                result = (result * 0x1000000162E42FFF0) >> 64;\\n            }\\n            if (x & 0x1000000000 > 0) {\\n                result = (result * 0x10000000B17217FBB) >> 64;\\n            }\\n            if (x & 0x800000000 > 0) {\\n                result = (result * 0x1000000058B90BFCE) >> 64;\\n            }\\n            if (x & 0x400000000 > 0) {\\n                result = (result * 0x100000002C5C85FE3) >> 64;\\n            }\\n            if (x & 0x200000000 > 0) {\\n                result = (result * 0x10000000162E42FF1) >> 64;\\n            }\\n            if (x & 0x100000000 > 0) {\\n                result = (result * 0x100000000B17217F8) >> 64;\\n            }\\n            if (x & 0x80000000 > 0) {\\n                result = (result * 0x10000000058B90BFC) >> 64;\\n            }\\n            if (x & 0x40000000 > 0) {\\n                result = (result * 0x1000000002C5C85FE) >> 64;\\n            }\\n            if (x & 0x20000000 > 0) {\\n                result = (result * 0x100000000162E42FF) >> 64;\\n            }\\n            if (x & 0x10000000 > 0) {\\n                result = (result * 0x1000000000B17217F) >> 64;\\n            }\\n            if (x & 0x8000000 > 0) {\\n                result = (result * 0x100000000058B90C0) >> 64;\\n            }\\n            if (x & 0x4000000 > 0) {\\n                result = (result * 0x10000000002C5C860) >> 64;\\n            }\\n            if (x & 0x2000000 > 0) {\\n                result = (result * 0x1000000000162E430) >> 64;\\n            }\\n            if (x & 0x1000000 > 0) {\\n                result = (result * 0x10000000000B17218) >> 64;\\n            }\\n            if (x & 0x800000 > 0) {\\n                result = (result * 0x1000000000058B90C) >> 64;\\n            }\\n            if (x & 0x400000 > 0) {\\n                result = (result * 0x100000000002C5C86) >> 64;\\n            }\\n            if (x & 0x200000 > 0) {\\n                result = (result * 0x10000000000162E43) >> 64;\\n            }\\n            if (x & 0x100000 > 0) {\\n                result = (result * 0x100000000000B1721) >> 64;\\n            }\\n            if (x & 0x80000 > 0) {\\n                result = (result * 0x10000000000058B91) >> 64;\\n            }\\n            if (x & 0x40000 > 0) {\\n                result = (result * 0x1000000000002C5C8) >> 64;\\n            }\\n            if (x & 0x20000 > 0) {\\n                result = (result * 0x100000000000162E4) >> 64;\\n            }\\n            if (x & 0x10000 > 0) {\\n                result = (result * 0x1000000000000B172) >> 64;\\n            }\\n            if (x & 0x8000 > 0) {\\n                result = (result * 0x100000000000058B9) >> 64;\\n            }\\n            if (x & 0x4000 > 0) {\\n                result = (result * 0x10000000000002C5D) >> 64;\\n            }\\n            if (x & 0x2000 > 0) {\\n                result = (result * 0x1000000000000162E) >> 64;\\n            }\\n            if (x & 0x1000 > 0) {\\n                result = (result * 0x10000000000000B17) >> 64;\\n            }\\n            if (x & 0x800 > 0) {\\n                result = (result * 0x1000000000000058C) >> 64;\\n            }\\n            if (x & 0x400 > 0) {\\n                result = (result * 0x100000000000002C6) >> 64;\\n            }\\n            if (x & 0x200 > 0) {\\n                result = (result * 0x10000000000000163) >> 64;\\n            }\\n            if (x & 0x100 > 0) {\\n                result = (result * 0x100000000000000B1) >> 64;\\n            }\\n            if (x & 0x80 > 0) {\\n                result = (result * 0x10000000000000059) >> 64;\\n            }\\n            if (x & 0x40 > 0) {\\n                result = (result * 0x1000000000000002C) >> 64;\\n            }\\n            if (x & 0x20 > 0) {\\n                result = (result * 0x10000000000000016) >> 64;\\n            }\\n            if (x & 0x10 > 0) {\\n                result = (result * 0x1000000000000000B) >> 64;\\n            }\\n            if (x & 0x8 > 0) {\\n                result = (result * 0x10000000000000006) >> 64;\\n            }\\n            if (x & 0x4 > 0) {\\n                result = (result * 0x10000000000000003) >> 64;\\n            }\\n            if (x & 0x2 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n            if (x & 0x1 > 0) {\\n                result = (result * 0x10000000000000001) >> 64;\\n            }\\n\\n            // We're doing two things at the same time:\\n            //\\n            //   1. Multiply the result by 2^n + 1, where \\\"2^n\\\" is the integer part and the one is added to account for\\n            //      the fact that we initially set the result to 0.5. This is accomplished by subtracting from 191\\n            //      rather than 192.\\n            //   2. Convert the result to the unsigned 60.18-decimal fixed-point format.\\n            //\\n            // This works because 2^(191-ip) = 2^ip / 2^191, where \\\"ip\\\" is the integer part \\\"2^n\\\".\\n            result *= SCALE;\\n            result >>= (191 - (x >> 64));\\n        }\\n    }\\n\\n    /// @notice Finds the zero-based index of the first one in the binary representation of x.\\n    /// @dev See the note on msb in the \\\"Find First Set\\\" Wikipedia article https://en.wikipedia.org/wiki/Find_first_set\\n    /// @param x The uint256 number for which to find the index of the most significant bit.\\n    /// @return msb The index of the most significant bit as an uint256.\\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\\n        if (x >= 2**128) {\\n            x >>= 128;\\n            msb += 128;\\n        }\\n        if (x >= 2**64) {\\n            x >>= 64;\\n            msb += 64;\\n        }\\n        if (x >= 2**32) {\\n            x >>= 32;\\n            msb += 32;\\n        }\\n        if (x >= 2**16) {\\n            x >>= 16;\\n            msb += 16;\\n        }\\n        if (x >= 2**8) {\\n            x >>= 8;\\n            msb += 8;\\n        }\\n        if (x >= 2**4) {\\n            x >>= 4;\\n            msb += 4;\\n        }\\n        if (x >= 2**2) {\\n            x >>= 2;\\n            msb += 2;\\n        }\\n        if (x >= 2**1) {\\n            // No need to shift x any more.\\n            msb += 1;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The multiplicand as an uint256.\\n    /// @param y The multiplier as an uint256.\\n    /// @param denominator The divisor as an uint256.\\n    /// @return result The result as an uint256.\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2^256 + prod0.\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division.\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = prod0 / denominator;\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n        if (prod1 >= denominator) {\\n            revert PRBMath__MulDivOverflow(prod1, denominator);\\n        }\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0].\\n        uint256 remainder;\\n        assembly {\\n            // Compute remainder using mulmod.\\n            remainder := mulmod(x, y, denominator)\\n\\n            // Subtract 256 bit number from 512 bit number.\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n        // See https://cs.stackexchange.com/q/138556/92363.\\n        unchecked {\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 lpotdod = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by lpotdod.\\n                denominator := div(denominator, lpotdod)\\n\\n                // Divide [prod1 prod0] by lpotdod.\\n                prod0 := div(prod0, lpotdod)\\n\\n                // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one.\\n                lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * lpotdod;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f71e18) with full precision.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" with constant folding, i.e. in which the denominator is always 1e18. Before returning the\\n    /// final result, we add 1 if (x * y) % SCALE >= HALF_SCALE. Without this, 6.6e-19 would be truncated to 0 instead of\\n    /// being rounded to 1e-18.  See \\\"Listing 6\\\" and text above it at https://accu.org/index.php/journals/1717.\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within uint256.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\n    /// - It is assumed that the result can never be type(uint256).max when x and y solve the following two equations:\\n    ///     1. x * y = type(uint256).max * SCALE\\n    ///     2. (x * y) % SCALE >= SCALE / 2\\n    ///\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function mulDivFixedPoint(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        if (prod1 >= SCALE) {\\n            revert PRBMath__MulDivFixedPointOverflow(prod1);\\n        }\\n\\n        uint256 remainder;\\n        uint256 roundUpUnit;\\n        assembly {\\n            remainder := mulmod(x, y, SCALE)\\n            roundUpUnit := gt(remainder, 499999999999999999)\\n        }\\n\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = (prod0 / SCALE) + roundUpUnit;\\n                return result;\\n            }\\n        }\\n\\n        assembly {\\n            result := add(\\n                mul(\\n                    or(\\n                        div(sub(prod0, remainder), SCALE_LPOTD),\\n                        mul(sub(prod1, gt(remainder, prod0)), add(div(sub(0, SCALE_LPOTD), SCALE_LPOTD), 1))\\n                    ),\\n                    SCALE_INVERSE\\n                ),\\n                roundUpUnit\\n            )\\n        }\\n    }\\n\\n    /// @notice Calculates floor(x*y\\u00f7denominator) with full precision.\\n    ///\\n    /// @dev An extension of \\\"mulDiv\\\" for signed numbers. Works by computing the signs and the absolute values separately.\\n    ///\\n    /// Requirements:\\n    /// - None of the inputs can be type(int256).min.\\n    /// - The result must fit within int256.\\n    ///\\n    /// @param x The multiplicand as an int256.\\n    /// @param y The multiplier as an int256.\\n    /// @param denominator The divisor as an int256.\\n    /// @return result The result as an int256.\\n    function mulDivSigned(\\n        int256 x,\\n        int256 y,\\n        int256 denominator\\n    ) internal pure returns (int256 result) {\\n        if (x == type(int256).min || y == type(int256).min || denominator == type(int256).min) {\\n            revert PRBMath__MulDivSignedInputTooSmall();\\n        }\\n\\n        // Get hold of the absolute values of x, y and the denominator.\\n        uint256 ax;\\n        uint256 ay;\\n        uint256 ad;\\n        unchecked {\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n            ad = denominator < 0 ? uint256(-denominator) : uint256(denominator);\\n        }\\n\\n        // Compute the absolute value of (x*y)\\u00f7denominator. The result must fit within int256.\\n        uint256 rAbs = mulDiv(ax, ay, ad);\\n        if (rAbs > uint256(type(int256).max)) {\\n            revert PRBMath__MulDivSignedOverflow(rAbs);\\n        }\\n\\n        // Get the signs of x, y and the denominator.\\n        uint256 sx;\\n        uint256 sy;\\n        uint256 sd;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n            sd := sgt(denominator, sub(0, 1))\\n        }\\n\\n        // XOR over sx, sy and sd. This is checking whether there are one or three negative signs in the inputs.\\n        // If yes, the result should be negative.\\n        result = sx ^ sy ^ sd == 0 ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Caveats:\\n    /// - This function does not work with fixed-point numbers.\\n    ///\\n    /// @param x The uint256 number for which to calculate the square root.\\n    /// @return result The result as an uint256.\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        // Set the initial guess to the least power of two that is greater than or equal to sqrt(x).\\n        uint256 xAux = uint256(x);\\n        result = 1;\\n        if (xAux >= 0x100000000000000000000000000000000) {\\n            xAux >>= 128;\\n            result <<= 64;\\n        }\\n        if (xAux >= 0x10000000000000000) {\\n            xAux >>= 64;\\n            result <<= 32;\\n        }\\n        if (xAux >= 0x100000000) {\\n            xAux >>= 32;\\n            result <<= 16;\\n        }\\n        if (xAux >= 0x10000) {\\n            xAux >>= 16;\\n            result <<= 8;\\n        }\\n        if (xAux >= 0x100) {\\n            xAux >>= 8;\\n            result <<= 4;\\n        }\\n        if (xAux >= 0x10) {\\n            xAux >>= 4;\\n            result <<= 2;\\n        }\\n        if (xAux >= 0x8) {\\n            result <<= 1;\\n        }\\n\\n        // The operations can never overflow because the result is max 2^127 when it enters this block.\\n        unchecked {\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1;\\n            result = (result + x / result) >> 1; // Seven iterations should be enough\\n            uint256 roundedDownResult = x / result;\\n            return result >= roundedDownResult ? roundedDownResult : result;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xed164c95012964f5e125b5d2b2d00471a4bdee4def618cd1fcf341d196011b61\",\"license\":\"Unlicense\"},\"prb-math/contracts/PRBMathSD59x18.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\nimport \\\"./PRBMath.sol\\\";\\n\\n/// @title PRBMathSD59x18\\n/// @author Paul Razvan Berg\\n/// @notice Smart contract library for advanced fixed-point math that works with int256 numbers considered to have 18\\n/// trailing decimals. We call this number representation signed 59.18-decimal fixed-point, since the numbers can have\\n/// a sign and there can be up to 59 digits in the integer part and up to 18 decimals in the fractional part. The numbers\\n/// are bound by the minimum and the maximum values permitted by the Solidity type int256.\\nlibrary PRBMathSD59x18 {\\n    /// @dev log2(e) as a signed 59.18-decimal fixed-point number.\\n    int256 internal constant LOG2_E = 1_442695040888963407;\\n\\n    /// @dev Half the SCALE number.\\n    int256 internal constant HALF_SCALE = 5e17;\\n\\n    /// @dev The maximum value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MAX_SD59x18 =\\n        57896044618658097711785492504343953926634992332820282019728_792003956564819967;\\n\\n    /// @dev The maximum whole value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MAX_WHOLE_SD59x18 =\\n        57896044618658097711785492504343953926634992332820282019728_000000000000000000;\\n\\n    /// @dev The minimum value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MIN_SD59x18 =\\n        -57896044618658097711785492504343953926634992332820282019728_792003956564819968;\\n\\n    /// @dev The minimum whole value a signed 59.18-decimal fixed-point number can have.\\n    int256 internal constant MIN_WHOLE_SD59x18 =\\n        -57896044618658097711785492504343953926634992332820282019728_000000000000000000;\\n\\n    /// @dev How many trailing decimals can be represented.\\n    int256 internal constant SCALE = 1e18;\\n\\n    /// INTERNAL FUNCTIONS ///\\n\\n    /// @notice Calculate the absolute value of x.\\n    ///\\n    /// @dev Requirements:\\n    /// - x must be greater than MIN_SD59x18.\\n    ///\\n    /// @param x The number to calculate the absolute value for.\\n    /// @param result The absolute value of x.\\n    function abs(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            if (x == MIN_SD59x18) {\\n                revert PRBMathSD59x18__AbsInputTooSmall();\\n            }\\n            result = x < 0 ? -x : x;\\n        }\\n    }\\n\\n    /// @notice Calculates the arithmetic average of x and y, rounding down.\\n    /// @param x The first operand as a signed 59.18-decimal fixed-point number.\\n    /// @param y The second operand as a signed 59.18-decimal fixed-point number.\\n    /// @return result The arithmetic average as a signed 59.18-decimal fixed-point number.\\n    function avg(int256 x, int256 y) internal pure returns (int256 result) {\\n        // The operations can never overflow.\\n        unchecked {\\n            int256 sum = (x >> 1) + (y >> 1);\\n            if (sum < 0) {\\n                // If at least one of x and y is odd, we add 1 to the result. This is because shifting negative numbers to the\\n                // right rounds down to infinity.\\n                assembly {\\n                    result := add(sum, and(or(x, y), 1))\\n                }\\n            } else {\\n                // If both x and y are odd, we add 1 to the result. This is because if both numbers are odd, the 0.5\\n                // remainder gets truncated twice.\\n                result = sum + (x & y & 1);\\n            }\\n        }\\n    }\\n\\n    /// @notice Yields the least greatest signed 59.18 decimal fixed-point number greater than or equal to x.\\n    ///\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than or equal to MAX_WHOLE_SD59x18.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number to ceil.\\n    /// @param result The least integer greater than or equal to x, as a signed 58.18-decimal fixed-point number.\\n    function ceil(int256 x) internal pure returns (int256 result) {\\n        if (x > MAX_WHOLE_SD59x18) {\\n            revert PRBMathSD59x18__CeilOverflow(x);\\n        }\\n        unchecked {\\n            int256 remainder = x % SCALE;\\n            if (remainder == 0) {\\n                result = x;\\n            } else {\\n                // Solidity uses C fmod style, which returns a modulus with the same sign as x.\\n                result = x - remainder;\\n                if (x > 0) {\\n                    result += SCALE;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Divides two signed 59.18-decimal fixed-point numbers, returning a new signed 59.18-decimal fixed-point number.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" that works with signed numbers. Works by computing the signs and the absolute values separately.\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"PRBMath.mulDiv\\\".\\n    /// - None of the inputs can be MIN_SD59x18.\\n    /// - The denominator cannot be zero.\\n    /// - The result must fit within int256.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"PRBMath.mulDiv\\\".\\n    ///\\n    /// @param x The numerator as a signed 59.18-decimal fixed-point number.\\n    /// @param y The denominator as a signed 59.18-decimal fixed-point number.\\n    /// @param result The quotient as a signed 59.18-decimal fixed-point number.\\n    function div(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == MIN_SD59x18 || y == MIN_SD59x18) {\\n            revert PRBMathSD59x18__DivInputTooSmall();\\n        }\\n\\n        // Get hold of the absolute values of x and y.\\n        uint256 ax;\\n        uint256 ay;\\n        unchecked {\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n        }\\n\\n        // Compute the absolute value of (x*SCALE)\\u00f7y. The result must fit within int256.\\n        uint256 rAbs = PRBMath.mulDiv(ax, uint256(SCALE), ay);\\n        if (rAbs > uint256(MAX_SD59x18)) {\\n            revert PRBMathSD59x18__DivOverflow(rAbs);\\n        }\\n\\n        // Get the signs of x and y.\\n        uint256 sx;\\n        uint256 sy;\\n        assembly {\\n            sx := sgt(x, sub(0, 1))\\n            sy := sgt(y, sub(0, 1))\\n        }\\n\\n        // XOR over sx and sy. This is basically checking whether the inputs have the same sign. If yes, the result\\n        // should be positive. Otherwise, it should be negative.\\n        result = sx ^ sy == 1 ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Returns Euler's number as a signed 59.18-decimal fixed-point number.\\n    /// @dev See https://en.wikipedia.org/wiki/E_(mathematical_constant).\\n    function e() internal pure returns (int256 result) {\\n        result = 2_718281828459045235;\\n    }\\n\\n    /// @notice Calculates the natural exponent of x.\\n    ///\\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    /// - x must be less than 133.084258667509499441.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"exp2\\\".\\n    /// - For any x less than -41.446531673892822322, the result is zero.\\n    ///\\n    /// @param x The exponent as a signed 59.18-decimal fixed-point number.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function exp(int256 x) internal pure returns (int256 result) {\\n        // Without this check, the value passed to \\\"exp2\\\" would be less than -59.794705707972522261.\\n        if (x < -41_446531673892822322) {\\n            return 0;\\n        }\\n\\n        // Without this check, the value passed to \\\"exp2\\\" would be greater than 192.\\n        if (x >= 133_084258667509499441) {\\n            revert PRBMathSD59x18__ExpInputTooBig(x);\\n        }\\n\\n        // Do the fixed-point multiplication inline to save gas.\\n        unchecked {\\n            int256 doubleScaleProduct = x * LOG2_E;\\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\\n        }\\n    }\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    ///\\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\\n    ///\\n    /// Requirements:\\n    /// - x must be 192 or less.\\n    /// - The result must fit within MAX_SD59x18.\\n    ///\\n    /// Caveats:\\n    /// - For any x less than -59.794705707972522261, the result is zero.\\n    ///\\n    /// @param x The exponent as a signed 59.18-decimal fixed-point number.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function exp2(int256 x) internal pure returns (int256 result) {\\n        // This works because 2^(-x) = 1/2^x.\\n        if (x < 0) {\\n            // 2^59.794705707972522262 is the maximum number whose inverse does not truncate down to zero.\\n            if (x < -59_794705707972522261) {\\n                return 0;\\n            }\\n\\n            // Do the fixed-point inversion inline to save gas. The numerator is SCALE * SCALE.\\n            unchecked {\\n                result = 1e36 / exp2(-x);\\n            }\\n        } else {\\n            // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\\n            if (x >= 192e18) {\\n                revert PRBMathSD59x18__Exp2InputTooBig(x);\\n            }\\n\\n            unchecked {\\n                // Convert x to the 192.64-bit fixed-point format.\\n                uint256 x192x64 = (uint256(x) << 64) / uint256(SCALE);\\n\\n                // Safe to convert the result to int256 directly because the maximum input allowed is 192.\\n                result = int256(PRBMath.exp2(x192x64));\\n            }\\n        }\\n    }\\n\\n    /// @notice Yields the greatest signed 59.18 decimal fixed-point number less than or equal to x.\\n    ///\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than or equal to MIN_WHOLE_SD59x18.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number to floor.\\n    /// @param result The greatest integer less than or equal to x, as a signed 58.18-decimal fixed-point number.\\n    function floor(int256 x) internal pure returns (int256 result) {\\n        if (x < MIN_WHOLE_SD59x18) {\\n            revert PRBMathSD59x18__FloorUnderflow(x);\\n        }\\n        unchecked {\\n            int256 remainder = x % SCALE;\\n            if (remainder == 0) {\\n                result = x;\\n            } else {\\n                // Solidity uses C fmod style, which returns a modulus with the same sign as x.\\n                result = x - remainder;\\n                if (x < 0) {\\n                    result -= SCALE;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Yields the excess beyond the floor of x for positive numbers and the part of the number to the right\\n    /// of the radix point for negative numbers.\\n    /// @dev Based on the odd function definition. https://en.wikipedia.org/wiki/Fractional_part\\n    /// @param x The signed 59.18-decimal fixed-point number to get the fractional part of.\\n    /// @param result The fractional part of x as a signed 59.18-decimal fixed-point number.\\n    function frac(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            result = x % SCALE;\\n        }\\n    }\\n\\n    /// @notice Converts a number from basic integer form to signed 59.18-decimal fixed-point representation.\\n    ///\\n    /// @dev Requirements:\\n    /// - x must be greater than or equal to MIN_SD59x18 divided by SCALE.\\n    /// - x must be less than or equal to MAX_SD59x18 divided by SCALE.\\n    ///\\n    /// @param x The basic integer to convert.\\n    /// @param result The same number in signed 59.18-decimal fixed-point representation.\\n    function fromInt(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            if (x < MIN_SD59x18 / SCALE) {\\n                revert PRBMathSD59x18__FromIntUnderflow(x);\\n            }\\n            if (x > MAX_SD59x18 / SCALE) {\\n                revert PRBMathSD59x18__FromIntOverflow(x);\\n            }\\n            result = x * SCALE;\\n        }\\n    }\\n\\n    /// @notice Calculates geometric mean of x and y, i.e. sqrt(x * y), rounding down.\\n    ///\\n    /// @dev Requirements:\\n    /// - x * y must fit within MAX_SD59x18, lest it overflows.\\n    /// - x * y cannot be negative.\\n    ///\\n    /// @param x The first operand as a signed 59.18-decimal fixed-point number.\\n    /// @param y The second operand as a signed 59.18-decimal fixed-point number.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function gm(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        unchecked {\\n            // Checking for overflow this way is faster than letting Solidity do it.\\n            int256 xy = x * y;\\n            if (xy / x != y) {\\n                revert PRBMathSD59x18__GmOverflow(x, y);\\n            }\\n\\n            // The product cannot be negative.\\n            if (xy < 0) {\\n                revert PRBMathSD59x18__GmNegativeProduct(x, y);\\n            }\\n\\n            // We don't need to multiply by the SCALE here because the x*y product had already picked up a factor of SCALE\\n            // during multiplication. See the comments within the \\\"sqrt\\\" function.\\n            result = int256(PRBMath.sqrt(uint256(xy)));\\n        }\\n    }\\n\\n    /// @notice Calculates 1 / x, rounding toward zero.\\n    ///\\n    /// @dev Requirements:\\n    /// - x cannot be zero.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the inverse.\\n    /// @return result The inverse as a signed 59.18-decimal fixed-point number.\\n    function inv(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            // 1e36 is SCALE * SCALE.\\n            result = 1e36 / x;\\n        }\\n    }\\n\\n    /// @notice Calculates the natural logarithm of x.\\n    ///\\n    /// @dev Based on the insight that ln(x) = log2(x) / log2(e).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    /// - This doesn't return exactly 1 for 2718281828459045235, for that we would need more fine-grained precision.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the natural logarithm.\\n    /// @return result The natural logarithm as a signed 59.18-decimal fixed-point number.\\n    function ln(int256 x) internal pure returns (int256 result) {\\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\\n        // can return is 195205294292027477728.\\n        unchecked {\\n            result = (log2(x) * SCALE) / LOG2_E;\\n        }\\n    }\\n\\n    /// @notice Calculates the common logarithm of x.\\n    ///\\n    /// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\\n    /// logarithm based on the insight that log10(x) = log2(x) / log2(10).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the common logarithm.\\n    /// @return result The common logarithm as a signed 59.18-decimal fixed-point number.\\n    function log10(int256 x) internal pure returns (int256 result) {\\n        if (x <= 0) {\\n            revert PRBMathSD59x18__LogInputTooSmall(x);\\n        }\\n\\n        // Note that the \\\"mul\\\" in this block is the assembly mul operation, not the \\\"mul\\\" function defined in this contract.\\n        // prettier-ignore\\n        assembly {\\n            switch x\\n            case 1 { result := mul(SCALE, sub(0, 18)) }\\n            case 10 { result := mul(SCALE, sub(1, 18)) }\\n            case 100 { result := mul(SCALE, sub(2, 18)) }\\n            case 1000 { result := mul(SCALE, sub(3, 18)) }\\n            case 10000 { result := mul(SCALE, sub(4, 18)) }\\n            case 100000 { result := mul(SCALE, sub(5, 18)) }\\n            case 1000000 { result := mul(SCALE, sub(6, 18)) }\\n            case 10000000 { result := mul(SCALE, sub(7, 18)) }\\n            case 100000000 { result := mul(SCALE, sub(8, 18)) }\\n            case 1000000000 { result := mul(SCALE, sub(9, 18)) }\\n            case 10000000000 { result := mul(SCALE, sub(10, 18)) }\\n            case 100000000000 { result := mul(SCALE, sub(11, 18)) }\\n            case 1000000000000 { result := mul(SCALE, sub(12, 18)) }\\n            case 10000000000000 { result := mul(SCALE, sub(13, 18)) }\\n            case 100000000000000 { result := mul(SCALE, sub(14, 18)) }\\n            case 1000000000000000 { result := mul(SCALE, sub(15, 18)) }\\n            case 10000000000000000 { result := mul(SCALE, sub(16, 18)) }\\n            case 100000000000000000 { result := mul(SCALE, sub(17, 18)) }\\n            case 1000000000000000000 { result := 0 }\\n            case 10000000000000000000 { result := SCALE }\\n            case 100000000000000000000 { result := mul(SCALE, 2) }\\n            case 1000000000000000000000 { result := mul(SCALE, 3) }\\n            case 10000000000000000000000 { result := mul(SCALE, 4) }\\n            case 100000000000000000000000 { result := mul(SCALE, 5) }\\n            case 1000000000000000000000000 { result := mul(SCALE, 6) }\\n            case 10000000000000000000000000 { result := mul(SCALE, 7) }\\n            case 100000000000000000000000000 { result := mul(SCALE, 8) }\\n            case 1000000000000000000000000000 { result := mul(SCALE, 9) }\\n            case 10000000000000000000000000000 { result := mul(SCALE, 10) }\\n            case 100000000000000000000000000000 { result := mul(SCALE, 11) }\\n            case 1000000000000000000000000000000 { result := mul(SCALE, 12) }\\n            case 10000000000000000000000000000000 { result := mul(SCALE, 13) }\\n            case 100000000000000000000000000000000 { result := mul(SCALE, 14) }\\n            case 1000000000000000000000000000000000 { result := mul(SCALE, 15) }\\n            case 10000000000000000000000000000000000 { result := mul(SCALE, 16) }\\n            case 100000000000000000000000000000000000 { result := mul(SCALE, 17) }\\n            case 1000000000000000000000000000000000000 { result := mul(SCALE, 18) }\\n            case 10000000000000000000000000000000000000 { result := mul(SCALE, 19) }\\n            case 100000000000000000000000000000000000000 { result := mul(SCALE, 20) }\\n            case 1000000000000000000000000000000000000000 { result := mul(SCALE, 21) }\\n            case 10000000000000000000000000000000000000000 { result := mul(SCALE, 22) }\\n            case 100000000000000000000000000000000000000000 { result := mul(SCALE, 23) }\\n            case 1000000000000000000000000000000000000000000 { result := mul(SCALE, 24) }\\n            case 10000000000000000000000000000000000000000000 { result := mul(SCALE, 25) }\\n            case 100000000000000000000000000000000000000000000 { result := mul(SCALE, 26) }\\n            case 1000000000000000000000000000000000000000000000 { result := mul(SCALE, 27) }\\n            case 10000000000000000000000000000000000000000000000 { result := mul(SCALE, 28) }\\n            case 100000000000000000000000000000000000000000000000 { result := mul(SCALE, 29) }\\n            case 1000000000000000000000000000000000000000000000000 { result := mul(SCALE, 30) }\\n            case 10000000000000000000000000000000000000000000000000 { result := mul(SCALE, 31) }\\n            case 100000000000000000000000000000000000000000000000000 { result := mul(SCALE, 32) }\\n            case 1000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 33) }\\n            case 10000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 34) }\\n            case 100000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 35) }\\n            case 1000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 36) }\\n            case 10000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 37) }\\n            case 100000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 38) }\\n            case 1000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 39) }\\n            case 10000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 40) }\\n            case 100000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 41) }\\n            case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 42) }\\n            case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 43) }\\n            case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 44) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 45) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 46) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 47) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 48) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 49) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 50) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 51) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 52) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 53) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 54) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 55) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 56) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 57) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 58) }\\n            default {\\n                result := MAX_SD59x18\\n            }\\n        }\\n\\n        if (result == MAX_SD59x18) {\\n            // Do the fixed-point division inline to save gas. The denominator is log2(10).\\n            unchecked {\\n                result = (log2(x) * SCALE) / 3_321928094887362347;\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the binary logarithm of x.\\n    ///\\n    /// @dev Based on the iterative approximation algorithm.\\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than zero.\\n    ///\\n    /// Caveats:\\n    /// - The results are not perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the binary logarithm.\\n    /// @return result The binary logarithm as a signed 59.18-decimal fixed-point number.\\n    function log2(int256 x) internal pure returns (int256 result) {\\n        if (x <= 0) {\\n            revert PRBMathSD59x18__LogInputTooSmall(x);\\n        }\\n        unchecked {\\n            // This works because log2(x) = -log2(1/x).\\n            int256 sign;\\n            if (x >= SCALE) {\\n                sign = 1;\\n            } else {\\n                sign = -1;\\n                // Do the fixed-point inversion inline to save gas. The numerator is SCALE * SCALE.\\n                assembly {\\n                    x := div(1000000000000000000000000000000000000, x)\\n                }\\n            }\\n\\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\\n            uint256 n = PRBMath.mostSignificantBit(uint256(x / SCALE));\\n\\n            // The integer part of the logarithm as a signed 59.18-decimal fixed-point number. The operation can't overflow\\n            // because n is maximum 255, SCALE is 1e18 and sign is either 1 or -1.\\n            result = int256(n) * SCALE;\\n\\n            // This is y = x * 2^(-n).\\n            int256 y = x >> n;\\n\\n            // If y = 1, the fractional part is zero.\\n            if (y == SCALE) {\\n                return result * sign;\\n            }\\n\\n            // Calculate the fractional part via the iterative approximation.\\n            // The \\\"delta >>= 1\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\n            for (int256 delta = int256(HALF_SCALE); delta > 0; delta >>= 1) {\\n                y = (y * y) / SCALE;\\n\\n                // Is y^2 > 2 and so in the range [2,4)?\\n                if (y >= 2 * SCALE) {\\n                    // Add the 2^(-m) factor to the logarithm.\\n                    result += delta;\\n\\n                    // Corresponds to z/2 on Wikipedia.\\n                    y >>= 1;\\n                }\\n            }\\n            result *= sign;\\n        }\\n    }\\n\\n    /// @notice Multiplies two signed 59.18-decimal fixed-point numbers together, returning a new signed 59.18-decimal\\n    /// fixed-point number.\\n    ///\\n    /// @dev Variant of \\\"mulDiv\\\" that works with signed numbers and employs constant folding, i.e. the denominator is\\n    /// always 1e18.\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"PRBMath.mulDivFixedPoint\\\".\\n    /// - None of the inputs can be MIN_SD59x18\\n    /// - The result must fit within MAX_SD59x18.\\n    ///\\n    /// Caveats:\\n    /// - The body is purposely left uncommented; see the NatSpec comments in \\\"PRBMath.mulDiv\\\" to understand how this works.\\n    ///\\n    /// @param x The multiplicand as a signed 59.18-decimal fixed-point number.\\n    /// @param y The multiplier as a signed 59.18-decimal fixed-point number.\\n    /// @return result The product as a signed 59.18-decimal fixed-point number.\\n    function mul(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == MIN_SD59x18 || y == MIN_SD59x18) {\\n            revert PRBMathSD59x18__MulInputTooSmall();\\n        }\\n\\n        unchecked {\\n            uint256 ax;\\n            uint256 ay;\\n            ax = x < 0 ? uint256(-x) : uint256(x);\\n            ay = y < 0 ? uint256(-y) : uint256(y);\\n\\n            uint256 rAbs = PRBMath.mulDivFixedPoint(ax, ay);\\n            if (rAbs > uint256(MAX_SD59x18)) {\\n                revert PRBMathSD59x18__MulOverflow(rAbs);\\n            }\\n\\n            uint256 sx;\\n            uint256 sy;\\n            assembly {\\n                sx := sgt(x, sub(0, 1))\\n                sy := sgt(y, sub(0, 1))\\n            }\\n            result = sx ^ sy == 1 ? -int256(rAbs) : int256(rAbs);\\n        }\\n    }\\n\\n    /// @notice Returns PI as a signed 59.18-decimal fixed-point number.\\n    function pi() internal pure returns (int256 result) {\\n        result = 3_141592653589793238;\\n    }\\n\\n    /// @notice Raises x to the power of y.\\n    ///\\n    /// @dev Based on the insight that x^y = 2^(log2(x) * y).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    /// - z cannot be zero.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x Number to raise to given power y, as a signed 59.18-decimal fixed-point number.\\n    /// @param y Exponent to raise x to, as a signed 59.18-decimal fixed-point number.\\n    /// @return result x raised to power y, as a signed 59.18-decimal fixed-point number.\\n    function pow(int256 x, int256 y) internal pure returns (int256 result) {\\n        if (x == 0) {\\n            result = y == 0 ? SCALE : int256(0);\\n        } else {\\n            result = exp2(mul(log2(x), y));\\n        }\\n    }\\n\\n    /// @notice Raises x (signed 59.18-decimal fixed-point number) to the power of y (basic unsigned integer) using the\\n    /// famous algorithm \\\"exponentiation by squaring\\\".\\n    ///\\n    /// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"abs\\\" and \\\"PRBMath.mulDivFixedPoint\\\".\\n    /// - The result must fit within MAX_SD59x18.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"PRBMath.mulDivFixedPoint\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x The base as a signed 59.18-decimal fixed-point number.\\n    /// @param y The exponent as an uint256.\\n    /// @return result The result as a signed 59.18-decimal fixed-point number.\\n    function powu(int256 x, uint256 y) internal pure returns (int256 result) {\\n        uint256 xAbs = uint256(abs(x));\\n\\n        // Calculate the first iteration of the loop in advance.\\n        uint256 rAbs = y & 1 > 0 ? xAbs : uint256(SCALE);\\n\\n        // Equivalent to \\\"for(y /= 2; y > 0; y /= 2)\\\" but faster.\\n        uint256 yAux = y;\\n        for (yAux >>= 1; yAux > 0; yAux >>= 1) {\\n            xAbs = PRBMath.mulDivFixedPoint(xAbs, xAbs);\\n\\n            // Equivalent to \\\"y % 2 == 1\\\" but faster.\\n            if (yAux & 1 > 0) {\\n                rAbs = PRBMath.mulDivFixedPoint(rAbs, xAbs);\\n            }\\n        }\\n\\n        // The result must fit within the 59.18-decimal fixed-point representation.\\n        if (rAbs > uint256(MAX_SD59x18)) {\\n            revert PRBMathSD59x18__PowuOverflow(rAbs);\\n        }\\n\\n        // Is the base negative and the exponent an odd number?\\n        bool isNegative = x < 0 && y & 1 == 1;\\n        result = isNegative ? -int256(rAbs) : int256(rAbs);\\n    }\\n\\n    /// @notice Returns 1 as a signed 59.18-decimal fixed-point number.\\n    function scale() internal pure returns (int256 result) {\\n        result = SCALE;\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Requirements:\\n    /// - x cannot be negative.\\n    /// - x must be less than MAX_SD59x18 / SCALE.\\n    ///\\n    /// @param x The signed 59.18-decimal fixed-point number for which to calculate the square root.\\n    /// @return result The result as a signed 59.18-decimal fixed-point .\\n    function sqrt(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            if (x < 0) {\\n                revert PRBMathSD59x18__SqrtNegativeInput(x);\\n            }\\n            if (x > MAX_SD59x18 / SCALE) {\\n                revert PRBMathSD59x18__SqrtOverflow(x);\\n            }\\n            // Multiply x by the SCALE to account for the factor of SCALE that is picked up when multiplying two signed\\n            // 59.18-decimal fixed-point numbers together (in this case, those two numbers are both the square root).\\n            result = int256(PRBMath.sqrt(uint256(x * SCALE)));\\n        }\\n    }\\n\\n    /// @notice Converts a signed 59.18-decimal fixed-point number to basic integer form, rounding down in the process.\\n    /// @param x The signed 59.18-decimal fixed-point number to convert.\\n    /// @return result The same number in basic integer form.\\n    function toInt(int256 x) internal pure returns (int256 result) {\\n        unchecked {\\n            result = x / SCALE;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1886d687eace717c05b7dcc20e43a088df0e549df86b453c2222961b520308f0\",\"license\":\"Unlicense\"},\"prb-math/contracts/PRBMathUD60x18.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.8.4;\\n\\nimport \\\"./PRBMath.sol\\\";\\n\\n/// @title PRBMathUD60x18\\n/// @author Paul Razvan Berg\\n/// @notice Smart contract library for advanced fixed-point math that works with uint256 numbers considered to have 18\\n/// trailing decimals. We call this number representation unsigned 60.18-decimal fixed-point, since there can be up to 60\\n/// digits in the integer part and up to 18 decimals in the fractional part. The numbers are bound by the minimum and the\\n/// maximum values permitted by the Solidity type uint256.\\nlibrary PRBMathUD60x18 {\\n    /// @dev Half the SCALE number.\\n    uint256 internal constant HALF_SCALE = 5e17;\\n\\n    /// @dev log2(e) as an unsigned 60.18-decimal fixed-point number.\\n    uint256 internal constant LOG2_E = 1_442695040888963407;\\n\\n    /// @dev The maximum value an unsigned 60.18-decimal fixed-point number can have.\\n    uint256 internal constant MAX_UD60x18 =\\n        115792089237316195423570985008687907853269984665640564039457_584007913129639935;\\n\\n    /// @dev The maximum whole value an unsigned 60.18-decimal fixed-point number can have.\\n    uint256 internal constant MAX_WHOLE_UD60x18 =\\n        115792089237316195423570985008687907853269984665640564039457_000000000000000000;\\n\\n    /// @dev How many trailing decimals can be represented.\\n    uint256 internal constant SCALE = 1e18;\\n\\n    /// @notice Calculates the arithmetic average of x and y, rounding down.\\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The arithmetic average as an unsigned 60.18-decimal fixed-point number.\\n    function avg(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        // The operations can never overflow.\\n        unchecked {\\n            // The last operand checks if both x and y are odd and if that is the case, we add 1 to the result. We need\\n            // to do this because if both numbers are odd, the 0.5 remainder gets truncated twice.\\n            result = (x >> 1) + (y >> 1) + (x & y & 1);\\n        }\\n    }\\n\\n    /// @notice Yields the least unsigned 60.18 decimal fixed-point number greater than or equal to x.\\n    ///\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than or equal to MAX_WHOLE_UD60x18.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number to ceil.\\n    /// @param result The least integer greater than or equal to x, as an unsigned 60.18-decimal fixed-point number.\\n    function ceil(uint256 x) internal pure returns (uint256 result) {\\n        if (x > MAX_WHOLE_UD60x18) {\\n            revert PRBMathUD60x18__CeilOverflow(x);\\n        }\\n        assembly {\\n            // Equivalent to \\\"x % SCALE\\\" but faster.\\n            let remainder := mod(x, SCALE)\\n\\n            // Equivalent to \\\"SCALE - remainder\\\" but faster.\\n            let delta := sub(SCALE, remainder)\\n\\n            // Equivalent to \\\"x + delta * (remainder > 0 ? 1 : 0)\\\" but faster.\\n            result := add(x, mul(delta, gt(remainder, 0)))\\n        }\\n    }\\n\\n    /// @notice Divides two unsigned 60.18-decimal fixed-point numbers, returning a new unsigned 60.18-decimal fixed-point number.\\n    ///\\n    /// @dev Uses mulDiv to enable overflow-safe multiplication and division.\\n    ///\\n    /// Requirements:\\n    /// - The denominator cannot be zero.\\n    ///\\n    /// @param x The numerator as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The denominator as an unsigned 60.18-decimal fixed-point number.\\n    /// @param result The quotient as an unsigned 60.18-decimal fixed-point number.\\n    function div(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        result = PRBMath.mulDiv(x, SCALE, y);\\n    }\\n\\n    /// @notice Returns Euler's number as an unsigned 60.18-decimal fixed-point number.\\n    /// @dev See https://en.wikipedia.org/wiki/E_(mathematical_constant).\\n    function e() internal pure returns (uint256 result) {\\n        result = 2_718281828459045235;\\n    }\\n\\n    /// @notice Calculates the natural exponent of x.\\n    ///\\n    /// @dev Based on the insight that e^x = 2^(x * log2(e)).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    /// - x must be less than 133.084258667509499441.\\n    ///\\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp(uint256 x) internal pure returns (uint256 result) {\\n        // Without this check, the value passed to \\\"exp2\\\" would be greater than 192.\\n        if (x >= 133_084258667509499441) {\\n            revert PRBMathUD60x18__ExpInputTooBig(x);\\n        }\\n\\n        // Do the fixed-point multiplication inline to save gas.\\n        unchecked {\\n            uint256 doubleScaleProduct = x * LOG2_E;\\n            result = exp2((doubleScaleProduct + HALF_SCALE) / SCALE);\\n        }\\n    }\\n\\n    /// @notice Calculates the binary exponent of x using the binary fraction method.\\n    ///\\n    /// @dev See https://ethereum.stackexchange.com/q/79903/24693.\\n    ///\\n    /// Requirements:\\n    /// - x must be 192 or less.\\n    /// - The result must fit within MAX_UD60x18.\\n    ///\\n    /// @param x The exponent as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function exp2(uint256 x) internal pure returns (uint256 result) {\\n        // 2^192 doesn't fit within the 192.64-bit format used internally in this function.\\n        if (x >= 192e18) {\\n            revert PRBMathUD60x18__Exp2InputTooBig(x);\\n        }\\n\\n        unchecked {\\n            // Convert x to the 192.64-bit fixed-point format.\\n            uint256 x192x64 = (x << 64) / SCALE;\\n\\n            // Pass x to the PRBMath.exp2 function, which uses the 192.64-bit fixed-point number representation.\\n            result = PRBMath.exp2(x192x64);\\n        }\\n    }\\n\\n    /// @notice Yields the greatest unsigned 60.18 decimal fixed-point number less than or equal to x.\\n    /// @dev Optimized for fractional value inputs, because for every whole value there are (1e18 - 1) fractional counterparts.\\n    /// See https://en.wikipedia.org/wiki/Floor_and_ceiling_functions.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to floor.\\n    /// @param result The greatest integer less than or equal to x, as an unsigned 60.18-decimal fixed-point number.\\n    function floor(uint256 x) internal pure returns (uint256 result) {\\n        assembly {\\n            // Equivalent to \\\"x % SCALE\\\" but faster.\\n            let remainder := mod(x, SCALE)\\n\\n            // Equivalent to \\\"x - remainder * (remainder > 0 ? 1 : 0)\\\" but faster.\\n            result := sub(x, mul(remainder, gt(remainder, 0)))\\n        }\\n    }\\n\\n    /// @notice Yields the excess beyond the floor of x.\\n    /// @dev Based on the odd function definition https://en.wikipedia.org/wiki/Fractional_part.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to get the fractional part of.\\n    /// @param result The fractional part of x as an unsigned 60.18-decimal fixed-point number.\\n    function frac(uint256 x) internal pure returns (uint256 result) {\\n        assembly {\\n            result := mod(x, SCALE)\\n        }\\n    }\\n\\n    /// @notice Converts a number from basic integer form to unsigned 60.18-decimal fixed-point representation.\\n    ///\\n    /// @dev Requirements:\\n    /// - x must be less than or equal to MAX_UD60x18 divided by SCALE.\\n    ///\\n    /// @param x The basic integer to convert.\\n    /// @param result The same number in unsigned 60.18-decimal fixed-point representation.\\n    function fromUint(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            if (x > MAX_UD60x18 / SCALE) {\\n                revert PRBMathUD60x18__FromUintOverflow(x);\\n            }\\n            result = x * SCALE;\\n        }\\n    }\\n\\n    /// @notice Calculates geometric mean of x and y, i.e. sqrt(x * y), rounding down.\\n    ///\\n    /// @dev Requirements:\\n    /// - x * y must fit within MAX_UD60x18, lest it overflows.\\n    ///\\n    /// @param x The first operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The second operand as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function gm(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        unchecked {\\n            // Checking for overflow this way is faster than letting Solidity do it.\\n            uint256 xy = x * y;\\n            if (xy / x != y) {\\n                revert PRBMathUD60x18__GmOverflow(x, y);\\n            }\\n\\n            // We don't need to multiply by the SCALE here because the x*y product had already picked up a factor of SCALE\\n            // during multiplication. See the comments within the \\\"sqrt\\\" function.\\n            result = PRBMath.sqrt(xy);\\n        }\\n    }\\n\\n    /// @notice Calculates 1 / x, rounding toward zero.\\n    ///\\n    /// @dev Requirements:\\n    /// - x cannot be zero.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the inverse.\\n    /// @return result The inverse as an unsigned 60.18-decimal fixed-point number.\\n    function inv(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 1e36 is SCALE * SCALE.\\n            result = 1e36 / x;\\n        }\\n    }\\n\\n    /// @notice Calculates the natural logarithm of x.\\n    ///\\n    /// @dev Based on the insight that ln(x) = log2(x) / log2(e).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    /// - This doesn't return exactly 1 for 2.718281828459045235, for that we would need more fine-grained precision.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the natural logarithm.\\n    /// @return result The natural logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function ln(uint256 x) internal pure returns (uint256 result) {\\n        // Do the fixed-point multiplication inline to save gas. This is overflow-safe because the maximum value that log2(x)\\n        // can return is 196205294292027477728.\\n        unchecked {\\n            result = (log2(x) * SCALE) / LOG2_E;\\n        }\\n    }\\n\\n    /// @notice Calculates the common logarithm of x.\\n    ///\\n    /// @dev First checks if x is an exact power of ten and it stops if yes. If it's not, calculates the common\\n    /// logarithm based on the insight that log10(x) = log2(x) / log2(10).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"log2\\\".\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the common logarithm.\\n    /// @return result The common logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function log10(uint256 x) internal pure returns (uint256 result) {\\n        if (x < SCALE) {\\n            revert PRBMathUD60x18__LogInputTooSmall(x);\\n        }\\n\\n        // Note that the \\\"mul\\\" in this block is the assembly multiplication operation, not the \\\"mul\\\" function defined\\n        // in this contract.\\n        // prettier-ignore\\n        assembly {\\n            switch x\\n            case 1 { result := mul(SCALE, sub(0, 18)) }\\n            case 10 { result := mul(SCALE, sub(1, 18)) }\\n            case 100 { result := mul(SCALE, sub(2, 18)) }\\n            case 1000 { result := mul(SCALE, sub(3, 18)) }\\n            case 10000 { result := mul(SCALE, sub(4, 18)) }\\n            case 100000 { result := mul(SCALE, sub(5, 18)) }\\n            case 1000000 { result := mul(SCALE, sub(6, 18)) }\\n            case 10000000 { result := mul(SCALE, sub(7, 18)) }\\n            case 100000000 { result := mul(SCALE, sub(8, 18)) }\\n            case 1000000000 { result := mul(SCALE, sub(9, 18)) }\\n            case 10000000000 { result := mul(SCALE, sub(10, 18)) }\\n            case 100000000000 { result := mul(SCALE, sub(11, 18)) }\\n            case 1000000000000 { result := mul(SCALE, sub(12, 18)) }\\n            case 10000000000000 { result := mul(SCALE, sub(13, 18)) }\\n            case 100000000000000 { result := mul(SCALE, sub(14, 18)) }\\n            case 1000000000000000 { result := mul(SCALE, sub(15, 18)) }\\n            case 10000000000000000 { result := mul(SCALE, sub(16, 18)) }\\n            case 100000000000000000 { result := mul(SCALE, sub(17, 18)) }\\n            case 1000000000000000000 { result := 0 }\\n            case 10000000000000000000 { result := SCALE }\\n            case 100000000000000000000 { result := mul(SCALE, 2) }\\n            case 1000000000000000000000 { result := mul(SCALE, 3) }\\n            case 10000000000000000000000 { result := mul(SCALE, 4) }\\n            case 100000000000000000000000 { result := mul(SCALE, 5) }\\n            case 1000000000000000000000000 { result := mul(SCALE, 6) }\\n            case 10000000000000000000000000 { result := mul(SCALE, 7) }\\n            case 100000000000000000000000000 { result := mul(SCALE, 8) }\\n            case 1000000000000000000000000000 { result := mul(SCALE, 9) }\\n            case 10000000000000000000000000000 { result := mul(SCALE, 10) }\\n            case 100000000000000000000000000000 { result := mul(SCALE, 11) }\\n            case 1000000000000000000000000000000 { result := mul(SCALE, 12) }\\n            case 10000000000000000000000000000000 { result := mul(SCALE, 13) }\\n            case 100000000000000000000000000000000 { result := mul(SCALE, 14) }\\n            case 1000000000000000000000000000000000 { result := mul(SCALE, 15) }\\n            case 10000000000000000000000000000000000 { result := mul(SCALE, 16) }\\n            case 100000000000000000000000000000000000 { result := mul(SCALE, 17) }\\n            case 1000000000000000000000000000000000000 { result := mul(SCALE, 18) }\\n            case 10000000000000000000000000000000000000 { result := mul(SCALE, 19) }\\n            case 100000000000000000000000000000000000000 { result := mul(SCALE, 20) }\\n            case 1000000000000000000000000000000000000000 { result := mul(SCALE, 21) }\\n            case 10000000000000000000000000000000000000000 { result := mul(SCALE, 22) }\\n            case 100000000000000000000000000000000000000000 { result := mul(SCALE, 23) }\\n            case 1000000000000000000000000000000000000000000 { result := mul(SCALE, 24) }\\n            case 10000000000000000000000000000000000000000000 { result := mul(SCALE, 25) }\\n            case 100000000000000000000000000000000000000000000 { result := mul(SCALE, 26) }\\n            case 1000000000000000000000000000000000000000000000 { result := mul(SCALE, 27) }\\n            case 10000000000000000000000000000000000000000000000 { result := mul(SCALE, 28) }\\n            case 100000000000000000000000000000000000000000000000 { result := mul(SCALE, 29) }\\n            case 1000000000000000000000000000000000000000000000000 { result := mul(SCALE, 30) }\\n            case 10000000000000000000000000000000000000000000000000 { result := mul(SCALE, 31) }\\n            case 100000000000000000000000000000000000000000000000000 { result := mul(SCALE, 32) }\\n            case 1000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 33) }\\n            case 10000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 34) }\\n            case 100000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 35) }\\n            case 1000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 36) }\\n            case 10000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 37) }\\n            case 100000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 38) }\\n            case 1000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 39) }\\n            case 10000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 40) }\\n            case 100000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 41) }\\n            case 1000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 42) }\\n            case 10000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 43) }\\n            case 100000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 44) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 45) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 46) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 47) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 48) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 49) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 50) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 51) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 52) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 53) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 54) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 55) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 56) }\\n            case 1000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 57) }\\n            case 10000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 58) }\\n            case 100000000000000000000000000000000000000000000000000000000000000000000000000000 { result := mul(SCALE, 59) }\\n            default {\\n                result := MAX_UD60x18\\n            }\\n        }\\n\\n        if (result == MAX_UD60x18) {\\n            // Do the fixed-point division inline to save gas. The denominator is log2(10).\\n            unchecked {\\n                result = (log2(x) * SCALE) / 3_321928094887362347;\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the binary logarithm of x.\\n    ///\\n    /// @dev Based on the iterative approximation algorithm.\\n    /// https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n    ///\\n    /// Requirements:\\n    /// - x must be greater than or equal to SCALE, otherwise the result would be negative.\\n    ///\\n    /// Caveats:\\n    /// - The results are nor perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the binary logarithm.\\n    /// @return result The binary logarithm as an unsigned 60.18-decimal fixed-point number.\\n    function log2(uint256 x) internal pure returns (uint256 result) {\\n        if (x < SCALE) {\\n            revert PRBMathUD60x18__LogInputTooSmall(x);\\n        }\\n        unchecked {\\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\\n            uint256 n = PRBMath.mostSignificantBit(x / SCALE);\\n\\n            // The integer part of the logarithm as an unsigned 60.18-decimal fixed-point number. The operation can't overflow\\n            // because n is maximum 255 and SCALE is 1e18.\\n            result = n * SCALE;\\n\\n            // This is y = x * 2^(-n).\\n            uint256 y = x >> n;\\n\\n            // If y = 1, the fractional part is zero.\\n            if (y == SCALE) {\\n                return result;\\n            }\\n\\n            // Calculate the fractional part via the iterative approximation.\\n            // The \\\"delta >>= 1\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\n            for (uint256 delta = HALF_SCALE; delta > 0; delta >>= 1) {\\n                y = (y * y) / SCALE;\\n\\n                // Is y^2 > 2 and so in the range [2,4)?\\n                if (y >= 2 * SCALE) {\\n                    // Add the 2^(-m) factor to the logarithm.\\n                    result += delta;\\n\\n                    // Corresponds to z/2 on Wikipedia.\\n                    y >>= 1;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Multiplies two unsigned 60.18-decimal fixed-point numbers together, returning a new unsigned 60.18-decimal\\n    /// fixed-point number.\\n    /// @dev See the documentation for the \\\"PRBMath.mulDivFixedPoint\\\" function.\\n    /// @param x The multiplicand as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The multiplier as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result The product as an unsigned 60.18-decimal fixed-point number.\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        result = PRBMath.mulDivFixedPoint(x, y);\\n    }\\n\\n    /// @notice Returns PI as an unsigned 60.18-decimal fixed-point number.\\n    function pi() internal pure returns (uint256 result) {\\n        result = 3_141592653589793238;\\n    }\\n\\n    /// @notice Raises x to the power of y.\\n    ///\\n    /// @dev Based on the insight that x^y = 2^(log2(x) * y).\\n    ///\\n    /// Requirements:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"exp2\\\", \\\"log2\\\" and \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x Number to raise to given power y, as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y Exponent to raise x to, as an unsigned 60.18-decimal fixed-point number.\\n    /// @return result x raised to power y, as an unsigned 60.18-decimal fixed-point number.\\n    function pow(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        if (x == 0) {\\n            result = y == 0 ? SCALE : uint256(0);\\n        } else {\\n            result = exp2(mul(log2(x), y));\\n        }\\n    }\\n\\n    /// @notice Raises x (unsigned 60.18-decimal fixed-point number) to the power of y (basic unsigned integer) using the\\n    /// famous algorithm \\\"exponentiation by squaring\\\".\\n    ///\\n    /// @dev See https://en.wikipedia.org/wiki/Exponentiation_by_squaring\\n    ///\\n    /// Requirements:\\n    /// - The result must fit within MAX_UD60x18.\\n    ///\\n    /// Caveats:\\n    /// - All from \\\"mul\\\".\\n    /// - Assumes 0^0 is 1.\\n    ///\\n    /// @param x The base as an unsigned 60.18-decimal fixed-point number.\\n    /// @param y The exponent as an uint256.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point number.\\n    function powu(uint256 x, uint256 y) internal pure returns (uint256 result) {\\n        // Calculate the first iteration of the loop in advance.\\n        result = y & 1 > 0 ? x : SCALE;\\n\\n        // Equivalent to \\\"for(y /= 2; y > 0; y /= 2)\\\" but faster.\\n        for (y >>= 1; y > 0; y >>= 1) {\\n            x = PRBMath.mulDivFixedPoint(x, x);\\n\\n            // Equivalent to \\\"y % 2 == 1\\\" but faster.\\n            if (y & 1 > 0) {\\n                result = PRBMath.mulDivFixedPoint(result, x);\\n            }\\n        }\\n    }\\n\\n    /// @notice Returns 1 as an unsigned 60.18-decimal fixed-point number.\\n    function scale() internal pure returns (uint256 result) {\\n        result = SCALE;\\n    }\\n\\n    /// @notice Calculates the square root of x, rounding down.\\n    /// @dev Uses the Babylonian method https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method.\\n    ///\\n    /// Requirements:\\n    /// - x must be less than MAX_UD60x18 / SCALE.\\n    ///\\n    /// @param x The unsigned 60.18-decimal fixed-point number for which to calculate the square root.\\n    /// @return result The result as an unsigned 60.18-decimal fixed-point .\\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            if (x > MAX_UD60x18 / SCALE) {\\n                revert PRBMathUD60x18__SqrtOverflow(x);\\n            }\\n            // Multiply x by the SCALE to account for the factor of SCALE that is picked up when multiplying two unsigned\\n            // 60.18-decimal fixed-point numbers together (in this case, those two numbers are both the square root).\\n            result = PRBMath.sqrt(x * SCALE);\\n        }\\n    }\\n\\n    /// @notice Converts a unsigned 60.18-decimal fixed-point number to basic integer form, rounding down in the process.\\n    /// @param x The unsigned 60.18-decimal fixed-point number to convert.\\n    /// @return result The same number in basic integer form.\\n    function toUint(uint256 x) internal pure returns (uint256 result) {\\n        unchecked {\\n            result = x / SCALE;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2180489de7680a79844dd5ef145f800e4f68e515e0e89409242f0187dbbd657b\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200408838038062004088833981016040819052620000349162000089565b6001600160a01b0381166200006357604051632c9334bd60e11b81526000600482015260240160405180910390fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055620000bb565b6000602082840312156200009c57600080fd5b81516001600160a01b0381168114620000b457600080fd5b9392505050565b613fbd80620000cb6000396000f3fe608060405234801561001057600080fd5b50600436106102d35760003560e01c80633d5333f6116101865780639f4a8367116100e3578063c6854acc11610097578063eb44fdd311610071578063eb44fdd314610638578063f82a61ec1461064b578063fca9b4131461065e57600080fd5b8063c6854acc146105f2578063cc2923c514610605578063ce48674f1461062557600080fd5b8063b44a823f116100c8578063b44a823f146105b9578063c0bf8daa146105cc578063c55f3b0c146105df57600080fd5b80639f4a836714610593578063b15da792146105a657600080fd5b80636ccc242f1161013a57806382ac48d51161011f57806382ac48d51461054a578063895400a21461055d5780638e78dec21461057057600080fd5b80636ccc242f1461051757806379cd60fe1461052a57600080fd5b806351aa4c9d1161016b57806351aa4c9d146104b257806359e39aab146104c557806366e910dd1461050457600080fd5b80633d5333f61461048c5780634af6d8f21461049f57600080fd5b80631fb4ef67116102345780632b04e840116101e85780632caca468116101cd5780632caca468146104535780633adec5a7146104665780633c42f81f1461047957600080fd5b80632b04e8401461042d5780632b1c12c21461044057600080fd5b806324012fcd1161021957806324012fcd146103f457806326b59eae1461040757806329122eb01461041a57600080fd5b80631fb4ef67146103c15780631fdbc3c8146103d457600080fd5b806314816f931161028b57806317941c231161027057806317941c231461038857806318994a871461039b5780631da1783e146103ae57600080fd5b806314816f931461036257806314ee9c051461037557600080fd5b80630af96800116102bc5780630af96800146103115780630cd4ff3a1461033c5780630eedb38f1461034f57600080fd5b8063059d2cf5146102d85780630af4d784146102fe575b600080fd5b6102eb6102e63660046137c5565b610671565b6040519081526020015b60405180910390f35b6102eb61030c3660046137f5565b610785565b600054610324906001600160a01b031681565b6040516001600160a01b0390911681526020016102f5565b6102eb61034a3660046137c5565b610ab6565b6102eb61035d3660046137c5565b610b84565b6102eb61037036600461383d565b610dc1565b6102eb61038336600461383d565b610e90565b6102eb6103963660046137c5565b610f9c565b6102eb6103a9366004613856565b610fd5565b6102eb6103bc366004613882565b611118565b6102eb6103cf36600461383d565b611257565b6103e76103e23660046137c5565b611302565b6040516102f591906138a4565b6102eb6104023660046137c5565b611432565b6102eb610415366004613882565b6114e9565b6102eb61042836600461397e565b61160e565b6102eb61043b366004613856565b6116d7565b6102eb61044e3660046139ac565b61179f565b6102eb61046136600461383d565b61184d565b6102eb61047436600461383d565b6118f8565b6102eb6104873660046139ac565b6119a3565b6102eb61049a3660046139ac565b611acb565b6102eb6104ad3660046137c5565b611bf0565b6102eb6104c0366004613882565b611ca7565b6104d86104d33660046137c5565b611dcc565b604080518251600f90810b8252602080850151820b908301529282015190920b908201526060016102f5565b6104d86105123660046137c5565b611ed8565b6102eb6105253660046137c5565b611fa7565b61053d6105383660046139c9565b612075565b6040516102f59190613a01565b6102eb610558366004613a43565b6123ed565b6102eb61056b36600461383d565b6124e7565b61058361057e3660046137c5565b6125f3565b60405190151581526020016102f5565b6102eb6105a136600461383d565b6126e7565b6105836105b43660046137c5565b612792565b6105836105c7366004613856565b612849565b6105836105da3660046139ac565b61285e565b6102eb6105ed366004613882565b61292d565b6102eb610600366004613a70565b612a6c565b61061861061336600461383d565b612b91565b6040516102f59190613aef565b6102eb6106333660046137c5565b612c9d565b61032461064636600461383d565b612e82565b6102eb61065936600461383d565b612f51565b6102eb61066c366004613b6a565b612f76565b600061067d8383612792565b6106895750600061077f565b600054604051632cd0f65560e11b8152600481018590526001600160a01b03909116906359a1ecaa90602401602060405180830381865afa1580156106d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f69190613bbd565b6040517ffa9c7b9a0000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152919091169063fa9c7b9a906024015b602060405180830381865afa158015610758573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077c9190613bda565b90505b92915050565b6000806107928787611ed8565b60200151600f0b9050670de0b6b3a76400008511156107dd576040517f9932d97900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006107f26107eb87613188565b8390613193565b905060008083131561080e576108078261319f565b9350610aaa565b600061082161081c84613c09565b61319f565b905061083661082f8b6118f8565b82906131aa565b94506000600a61084787600f613c1e565b6108519190613c53565b90506000600a610862886005613c1e565b61086c9190613c53565b905060005b89811015610a455760026108858484613c75565b61088f9190613c53565b975060008054906101000a90046001600160a01b03166001600160a01b03166359a1ecaa8e6040518263ffffffff1660e01b81526004016108d291815260200190565b602060405180830381865afa1580156108ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109139190613bbd565b6001600160a01b031663e6574ee96040518163ffffffff1660e01b8152600401602060405180830381865afa158015610950573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109749190613bbd565b6001600160a01b031663f121cce661098b8f612e82565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b0390911660048201526000602482015260016044820152606481018b9052608401602060405180830381865afa1580156109fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a209190613bda565b9450838514610a455783851015610a3957879150610a3d565b8792505b600101610871565b5082841015610a52578196505b878411610aa65760405162461bcd60e51b815260206004820152601360248201527f416d6f756e7420697320746f6f20736d616c6c0000000000000000000000000060448201526064015b60405180910390fd5b5050505b50505095945050505050565b6000610ac28383612792565b610ace5750600061077f565b600054604051632cd0f65560e11b8152600481018590526001600160a01b03909116906359a1ecaa90602401602060405180830381865afa158015610b17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3b9190613bbd565b6040517f80e864fe0000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015291909116906380e864fe9060240161073b565b60008054604051632cd0f65560e11b81526004810185905282916001600160a01b0316906359a1ecaa90602401602060405180830381865afa158015610bce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf29190613bbd565b6040517fe873557a0000000000000000000000000000000000000000000000000000000081526001600160a01b03858116600483015291925060009183169063e873557a90602401602060405180830381865afa158015610c57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7b9190613bda565b90506000610d75610cec846001600160a01b031663632b6b116040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce79190613bda565b613188565b6040517fe65896c90000000000000000000000000000000000000000000000000000000081526001600160a01b03888116600483015286169063e65896c990602401602060405180830381865afa158015610d4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6f9190613bda565b90613193565b90506000610d838787612c9d565b905081600003610d9a57600094505050505061077f565b6000610da787600061160e565b9050610db5818584866131b6565b98975050505050505050565b60008054604051632cd0f65560e11b8152600481018490526001600160a01b03909116906359a1ecaa90602401602060405180830381865afa158015610e0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2f9190613bbd565b6001600160a01b03166389fd335b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e6c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077f9190613bda565b60008054604051632cd0f65560e11b8152600481018490526001600160a01b03909116906359a1ecaa90602401602060405180830381865afa158015610eda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610efe9190613bbd565b6001600160a01b031663c5f1916c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5f9190613bbd565b6001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e6c573d6000803e3d6000fd5b6000610fa88383612792565b610fb45750600061077f565b610fc1610ce78484610671565b610fcb8484610ab6565b61077c9190613c88565b6000805460405163adf1ab9b60e01b81526001600160a01b0385811660048301528392169063adf1ab9b90602401602060405180830381865afa158015611020573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110449190613bda565b905060006110518561179f565b60008054604051637ef8a2d360e01b81526001600160a01b03898116600483015293945091921690637ef8a2d390602401602060405180830381865afa15801561109f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c39190613bda565b905060006110d18287613193565b9050816000036110df575060005b60006110ec88600061160e565b905081846111046110fd8885613c88565b84906131e8565b61110e9190613c88565b610db59190613cb0565b60008054604051632cd0f65560e11b8152600481018590526001600160a01b03909116906359a1ecaa90602401602060405180830381865afa158015611162573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111869190613bbd565b6001600160a01b031663e6574ee96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e79190613bbd565b6001600160a01b031663f121cce66111fe85612e82565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b03909116600482015260016024820152600060448201526064810185905260840161073b565b60008054604051632cd0f65560e11b8152600481018490526001600160a01b03909116906359a1ecaa90602401602060405180830381865afa1580156112a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c59190613bbd565b6001600160a01b03166310bace8c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e6c573d6000803e3d6000fd5b6040805161010081018252600080825260208201819052818301819052606082018190526080820181905260a0820181905260c0820181905260e08201819052549151632cd0f65560e11b81526004810185905290916001600160a01b0316906359a1ecaa90602401602060405180830381865afa158015611388573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ac9190613bbd565b6040517fcefc49930000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152919091169063cefc49939060240161010060405180830381865afa15801561140e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077c9190613d57565b60008054604051632cd0f65560e11b8152600481018590526001600160a01b03909116906359a1ecaa90602401602060405180830381865afa15801561147c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a09190613bbd565b6040517faa407ae10000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152919091169063aa407ae19060240161073b565b60008054604051632cd0f65560e11b8152600481018590526001600160a01b03909116906359a1ecaa90602401602060405180830381865afa158015611533573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115579190613bbd565b6001600160a01b03166380f556056040518163ffffffff1660e01b8152600401602060405180830381865afa158015611594573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b89190613bbd565b6040517f556d6e9f0000000000000000000000000000000000000000000000000000000081526000600482015260016024820152604481018490526001600160a01b03919091169063556d6e9f9060640161073b565b60008060009054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611662573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116869190613bbd565b6040517f29122eb00000000000000000000000000000000000000000000000000000000081526001600160a01b038581166004830152841515602483015291909116906329122eb09060440161073b565b60008060009054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561172b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061174f9190613bbd565b6040517f2b04e8400000000000000000000000000000000000000000000000000000000081526001600160a01b038581166004830152602482018590529190911690632b04e8409060440161073b565b6000805b60008054906101000a90046001600160a01b03166001600160a01b031663295c39a56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118189190613bda565b811015611847576118298184612c9d565b6118339083613c88565b91508061183f81613dfb565b9150506117a3565b50919050565b60008054604051632cd0f65560e11b8152600481018490526001600160a01b03909116906359a1ecaa90602401602060405180830381865afa158015611897573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118bb9190613bbd565b6001600160a01b03166397c4fac76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e6c573d6000803e3d6000fd5b60008054604051632cd0f65560e11b8152600481018490526001600160a01b03909116906359a1ecaa90602401602060405180830381865afa158015611942573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119669190613bbd565b6001600160a01b03166345a153886040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e6c573d6000803e3d6000fd5b6000805460405163adf1ab9b60e01b81526001600160a01b0384811660048301528392169063adf1ab9b90602401602060405180830381865afa1580156119ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a129190613bda565b60008054604051637ef8a2d360e01b81526001600160a01b03878116600483015293945091921690637ef8a2d390602401602060405180830381865afa158015611a60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a849190613bda565b90506000611a918561179f565b905081600003611aa657506000949350505050565b6000611ab386600061160e565b9050611ac1818584866131b6565b9695505050505050565b6000805460405163adf1ab9b60e01b81526001600160a01b0384811660048301528392169063adf1ab9b90602401602060405180830381865afa158015611b16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b3a9190613bda565b60008054604051637ef8a2d360e01b81526001600160a01b03878116600483015293945091921690637ef8a2d390602401602060405180830381865afa158015611b88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bac9190613bda565b90506000611bb98561179f565b905081600003611bd55750670de0b6b3a7640000949350505050565b6000611be286600061160e565b9050611ac1818584866131f4565b60008054604051632cd0f65560e11b8152600481018590526001600160a01b03909116906359a1ecaa90602401602060405180830381865afa158015611c3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c5e9190613bbd565b6040517f2d3eb79b0000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301529190911690632d3eb79b9060240161073b565b60008054604051632cd0f65560e11b8152600481018590526001600160a01b03909116906359a1ecaa90602401602060405180830381865afa158015611cf1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d159190613bbd565b6001600160a01b03166380f556056040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d769190613bbd565b6040517f556d6e9f0000000000000000000000000000000000000000000000000000000081526001600482015260006024820152604481018490526001600160a01b03919091169063556d6e9f9060640161073b565b60408051606081018252600080825260208201819052818301819052549151632cd0f65560e11b81526004810185905290916001600160a01b0316906359a1ecaa90602401602060405180830381865afa158015611e2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e529190613bbd565b6040517fc70fbda00000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152919091169063c70fbda0906024015b606060405180830381865afa158015611eb4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077c9190613e15565b60408051606081018252600080825260208201819052818301819052549151632cd0f65560e11b81526004810185905290916001600160a01b0316906359a1ecaa90602401602060405180830381865afa158015611f3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f5e9190613bbd565b6040517f793962d80000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152919091169063793962d890602401611e97565b6000611fb383836125f3565b611fbf5750600061077f565b600054604051632cd0f65560e11b8152600481018590526001600160a01b03909116906359a1ecaa90602401602060405180830381865afa158015612008573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061202c9190613bbd565b6040517f76c469b60000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015291909116906376c469b69060240161073b565b61207d61378f565b816120888585611302565b606001516fffffffffffffffffffffffffffffffff1610156120d6576040517fca2fc97300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006120e1856124e7565b60008054604051632cd0f65560e11b815260048101899052929350909183916001600160a01b0316906359a1ecaa90602401602060405180830381865afa158015612130573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121549190613bbd565b6001600160a01b03166380f556056040518163ffffffff1660e01b8152600401602060405180830381865afa158015612191573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121b59190613bbd565b6040517f4903b0d1000000000000000000000000000000000000000000000000000000008152600060048201526001600160a01b039190911690634903b0d190602401602060405180830381865afa158015612215573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122399190613bda565b612244600187613e8f565b61224e9190613c1e565b6122589190613c53565b60008054604051632cd0f65560e11b8152600481018a9052929350909184916001600160a01b0316906359a1ecaa90602401602060405180830381865afa1580156122a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122cb9190613bbd565b6001600160a01b03166380f556056040518163ffffffff1660e01b8152600401602060405180830381865afa158015612308573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061232c9190613bbd565b6040517f4903b0d1000000000000000000000000000000000000000000000000000000008152600160048201526001600160a01b039190911690634903b0d190602401602060405180830381865afa15801561238c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123b09190613bda565b6123bb600188613e8f565b6123c59190613c1e565b6123cf9190613c53565b604080518082019091529283526020830152509150505b9392505050565b60008054604051632cd0f65560e11b8152600481018590526001600160a01b03909116906359a1ecaa90602401602060405180830381865afa158015612437573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061245b9190613bbd565b6001600160a01b03166380f556056040518163ffffffff1660e01b8152600401602060405180830381865afa158015612498573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124bc9190613bbd565b6001600160a01b0316638d8ea727836040518263ffffffff1660e01b815260040161073b9190613ea2565b60008054604051632cd0f65560e11b8152600481018490526001600160a01b03909116906359a1ecaa90602401602060405180830381865afa158015612531573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125559190613bbd565b6001600160a01b03166380f556056040518163ffffffff1660e01b8152600401602060405180830381865afa158015612592573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125b69190613bbd565b6001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f3b573d6000803e3d6000fd5b60008054604051632cd0f65560e11b8152600481018590526001600160a01b03909116906359a1ecaa90602401602060405180830381865afa15801561263d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126619190613bbd565b6040517fa42d66020000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152919091169063a42d6602906024015b602060405180830381865afa1580156126c3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077c9190613eb1565b60008054604051632cd0f65560e11b8152600481018490526001600160a01b03909116906359a1ecaa90602401602060405180830381865afa158015612731573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127559190613bbd565b6001600160a01b0316634bc36bd66040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f3b573d6000803e3d6000fd5b60008054604051632cd0f65560e11b8152600481018590526001600160a01b03909116906359a1ecaa90602401602060405180830381865afa1580156127dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128009190613bbd565b6040517f9d36b7590000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301529190911690639d36b759906024016126a6565b60008161285584611acb565b12159392505050565b60008054604080517f295c39a5000000000000000000000000000000000000000000000000000000008152905183926001600160a01b03169163295c39a59160048083019260209291908290030181865afa1580156128c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128e59190613bda565b905060005b81811015612923576128fc81856125f3565b8061290c575061290c8185612792565b1561291b575060019392505050565b6001016128ea565b5060009392505050565b60008054604051632cd0f65560e11b8152600481018590526001600160a01b03909116906359a1ecaa90602401602060405180830381865afa158015612977573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061299b9190613bbd565b6001600160a01b031663e6574ee96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156129d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129fc9190613bbd565b6001600160a01b031663f121cce6612a1385612e82565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b03909116600482015260006024820152600160448201526064810185905260840161073b565b60008054604051632cd0f65560e11b8152600481018a90526001600160a01b03909116906359a1ecaa90602401602060405180830381865afa158015612ab6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ada9190613bbd565b6001600160a01b031663a9f97b688888888888886040518763ffffffff1660e01b8152600401612b0f96959493929190613ece565b600060405180830381600087803b158015612b2957600080fd5b505af1925050508015612b3a575060015b612b86573d808015612b68576040519150601f19603f3d011682016040523d82523d6000602084013e612b6d565b606091505b5080806020019051810190612b829190613bda565b9150505b979650505050505050565b6040805161010081018252600080825260208201819052818301819052606082018190526080820181905260a0820181905260c0820181905260e08201819052549151632cd0f65560e11b81526004810184905290916001600160a01b0316906359a1ecaa90602401602060405180830381865afa158015612c17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c3b9190613bbd565b6001600160a01b0316639027b59e6040518163ffffffff1660e01b815260040161010060405180830381865afa158015612c79573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077f9190613f29565b60008054604051632cd0f65560e11b8152600481018590526001600160a01b03909116906359a1ecaa90602401602060405180830381865afa158015612ce7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d0b9190613bbd565b6040517faa407ae10000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152919091169063aa407ae190602401602060405180830381865afa158015612d6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d909190613bda565b600054604051632cd0f65560e11b8152600481018690526001600160a01b03909116906359a1ecaa90602401602060405180830381865afa158015612dd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dfd9190613bbd565b6040517f2d3eb79b0000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301529190911690632d3eb79b90602401602060405180830381865afa158015612e5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fcb9190613bda565b60008054604051632cd0f65560e11b8152600481018490526001600160a01b03909116906359a1ecaa90602401602060405180830381865afa158015612ecc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ef09190613bbd565b6001600160a01b03166380f556056040518163ffffffff1660e01b8152600401602060405180830381865afa158015612f2d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077f9190613bbd565b60008054612f699083906001600160a01b0316611ed8565b60200151600f0b92915050565b600080612f838787611dcc565b60200151600f0b9050670de0b6b3a7640000851115612fce576040517f9932d97900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000612fdc6107eb87613188565b90506000811315612ff757612ff08161319f565b925061317d565b6000613023876130078b8b611302565b606001516fffffffffffffffffffffffffffffffff16906131aa565b905060008061303461081c85613c09565b90506130a36130428c612e82565b6001600160a01b03166386fc88d36040518163ffffffff1660e01b8152600401602060405180830381865afa15801561307f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082f9190613bda565b95506000600a6130b488600f613c1e565b6130be9190613c53565b90506000600a6130cf896005613c1e565b6130d99190613c53565b905060005b8a8110156131575760026130f28484613c75565b6130fc9190613c53565b985061310f8e8e888d8d60006001612a6c565b94508385101561312157889150613136565b8385111561313157889250613136565b613157565b6131408284613e8f565b60010361314f57829850613157565b6001016130de565b5082841015613177578197506131748d8d878c8c60006001612a6c565b93505b50505050505b505095945050505050565b600061077f82613217565b600061077c83836132b3565b600061077f826133c0565b600061077c8383613412565b60006131df836131c68688613c88565b6131d09190613c88565b6131d98461341e565b90613429565b95945050505050565b600061077c8383613435565b60006131df6132028361341e565b8461320d8789613c88565b6131d99190613c88565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8211156132af5760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e206160448201527f6e20696e743235360000000000000000000000000000000000000000000000006064820152608401610a9d565b5090565b6000600160ff1b8314806132ca5750600160ff1b82145b15613301576040517f3406846c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080600085126133125784613317565b846000035b915060008412613327578361332c565b836000035b9050600061333a838361344b565b90507f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811115613399576040517fbf79e8d900000000000000000000000000000000000000000000000000000000815260048101829052602401610a9d565b6000198087139086138082186001146133b25782610db5565b505060000395945050505050565b6000808212156132af5760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f7369746976656044820152606401610a9d565b600061077c838361344b565b600061077f82613544565b600061077c8383613598565b6000818312613444578161077c565b5090919050565b60008080600019848609848602925082811083820303915050670de0b6b3a764000081106134a8576040517fd31b340200000000000000000000000000000000000000000000000000000000815260048101829052602401610a9d565b600080670de0b6b3a764000086880991506706f05b59d3b1ffff82119050826000036134e65780670de0b6b3a764000085040194505050505061077f565b6204000082850304939091119091037d40000000000000000000000000000000000000000000000000000000000002919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690201905092915050565b6000600160ff1b8203613583576040517f741d0b8c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008212613591578161077f565b5060000390565b6000600160ff1b8314806135af5750600160ff1b82145b156135e6576040517fb3c754a300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080600085126135f757846135fc565b846000035b91506000841261360c5783613611565b836000035b9050600061362883670de0b6b3a7640000846136a9565b90507f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811115613687576040517f7cb4bef500000000000000000000000000000000000000000000000000000000815260048101829052602401610a9d565b6000198087139086138082186001146136a05782610db5565b610db583613c09565b60008080600019858709858702925082811083820303915050806000036136e3578382816136d9576136d9613c3d565b04925050506123e6565b838110613726576040517f773cc18c0000000000000000000000000000000000000000000000000000000081526004810182905260248101859052604401610a9d565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b60405180604001604052806002906020820280368337509192915050565b6001600160a01b03811681146137c257600080fd5b50565b600080604083850312156137d857600080fd5b8235915060208301356137ea816137ad565b809150509250929050565b600080600080600060a0868803121561380d57600080fd5b85359450602086013561381f816137ad565b94979496505050506040830135926060810135926080909101359150565b60006020828403121561384f57600080fd5b5035919050565b6000806040838503121561386957600080fd5b8235613874816137ad565b946020939093013593505050565b6000806040838503121561389557600080fd5b50508035926020909101359150565b6000610100820190508251600f0b82526020830151600f0b60208301526040830151600f0b60408301526fffffffffffffffffffffffffffffffff606084015116606083015267ffffffffffffffff608084015116608083015260a083015161392160a08401826fffffffffffffffffffffffffffffffff169052565b5060c083015161394560c08401826fffffffffffffffffffffffffffffffff169052565b5060e083015161396960e08401826fffffffffffffffffffffffffffffffff169052565b5092915050565b80151581146137c257600080fd5b6000806040838503121561399157600080fd5b823561399c816137ad565b915060208301356137ea81613970565b6000602082840312156139be57600080fd5b81356123e6816137ad565b6000806000606084860312156139de57600080fd5b8335925060208401356139f0816137ad565b929592945050506040919091013590565b60408101818360005b6002811015613a29578151835260209283019290910190600101613a0a565b50505092915050565b806040810183101561077f57600080fd5b60008060608385031215613a5657600080fd5b82359150613a678460208501613a32565b90509250929050565b6000806000806000806000610100888a031215613a8c57600080fd5b873596506020880135613a9e816137ad565b955060408801359450613ab48960608a01613a32565b935060a0880135925060c088013560028110613acf57600080fd5b915060e0880135613adf81613970565b8091505092959891949750929550565b60006101008201905067ffffffffffffffff808451168352806020850151166020840152506040830151600f0b6040830152606083015160608301526fffffffffffffffffffffffffffffffff608084015116608083015260a083015161392160a08401826fffffffffffffffffffffffffffffffff169052565b600080600080600060c08688031215613b8257600080fd5b853594506020860135613b94816137ad565b93506040860135925060608601359150613bb18760808801613a32565b90509295509295909350565b600060208284031215613bcf57600080fd5b81516123e6816137ad565b600060208284031215613bec57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000600160ff1b820361359157613591613bf3565b6000816000190483118215151615613c3857613c38613bf3565b500290565b634e487b7160e01b600052601260045260246000fd5b600082613c7057634e487b7160e01b600052601260045260246000fd5b500490565b8082018082111561077f5761077f613bf3565b8082018281126000831280158216821582161715613ca857613ca8613bf3565b505092915050565b818103600083128015838313168383128216171561396957613969613bf3565b604051610100810167ffffffffffffffff81118282101715613d0257634e487b7160e01b600052604160045260246000fd5b60405290565b8051600f81900b8114613d1a57600080fd5b919050565b80516fffffffffffffffffffffffffffffffff81168114613d1a57600080fd5b805167ffffffffffffffff81168114613d1a57600080fd5b60006101008284031215613d6a57600080fd5b613d72613cd0565b613d7b83613d08565b8152613d8960208401613d08565b6020820152613d9a60408401613d08565b6040820152613dab60608401613d1f565b6060820152613dbc60808401613d3f565b6080820152613dcd60a08401613d1f565b60a0820152613dde60c08401613d1f565b60c0820152613def60e08401613d1f565b60e08201529392505050565b60006000198203613e0e57613e0e613bf3565b5060010190565b600060608284031215613e2757600080fd5b6040516060810181811067ffffffffffffffff82111715613e5857634e487b7160e01b600052604160045260246000fd5b604052613e6483613d08565b8152613e7260208401613d08565b6020820152613e8360408401613d08565b60408201529392505050565b8181038181111561077f5761077f613bf3565b60408181019083833792915050565b600060208284031215613ec357600080fd5b81516123e681613970565b6001600160a01b03871681526020810186905260e081016040868184013784608083015260028410613f1057634e487b7160e01b600052602160045260246000fd5b8360a083015282151560c0830152979650505050505050565b60006101008284031215613f3c57600080fd5b613f44613cd0565b613f4d83613d3f565b8152613f5b60208401613d3f565b6020820152613f6c60408401613d08565b604082015260608301516060820152613dbc60808401613d1f56fea2646970667358221220409f5fe40bbc7f8a6c097a7f787a1993efefe5b34e94b8f30bcc3d6409a9b79d64736f6c63430008100033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102d35760003560e01c80633d5333f6116101865780639f4a8367116100e3578063c6854acc11610097578063eb44fdd311610071578063eb44fdd314610638578063f82a61ec1461064b578063fca9b4131461065e57600080fd5b8063c6854acc146105f2578063cc2923c514610605578063ce48674f1461062557600080fd5b8063b44a823f116100c8578063b44a823f146105b9578063c0bf8daa146105cc578063c55f3b0c146105df57600080fd5b80639f4a836714610593578063b15da792146105a657600080fd5b80636ccc242f1161013a57806382ac48d51161011f57806382ac48d51461054a578063895400a21461055d5780638e78dec21461057057600080fd5b80636ccc242f1461051757806379cd60fe1461052a57600080fd5b806351aa4c9d1161016b57806351aa4c9d146104b257806359e39aab146104c557806366e910dd1461050457600080fd5b80633d5333f61461048c5780634af6d8f21461049f57600080fd5b80631fb4ef67116102345780632b04e840116101e85780632caca468116101cd5780632caca468146104535780633adec5a7146104665780633c42f81f1461047957600080fd5b80632b04e8401461042d5780632b1c12c21461044057600080fd5b806324012fcd1161021957806324012fcd146103f457806326b59eae1461040757806329122eb01461041a57600080fd5b80631fb4ef67146103c15780631fdbc3c8146103d457600080fd5b806314816f931161028b57806317941c231161027057806317941c231461038857806318994a871461039b5780631da1783e146103ae57600080fd5b806314816f931461036257806314ee9c051461037557600080fd5b80630af96800116102bc5780630af96800146103115780630cd4ff3a1461033c5780630eedb38f1461034f57600080fd5b8063059d2cf5146102d85780630af4d784146102fe575b600080fd5b6102eb6102e63660046137c5565b610671565b6040519081526020015b60405180910390f35b6102eb61030c3660046137f5565b610785565b600054610324906001600160a01b031681565b6040516001600160a01b0390911681526020016102f5565b6102eb61034a3660046137c5565b610ab6565b6102eb61035d3660046137c5565b610b84565b6102eb61037036600461383d565b610dc1565b6102eb61038336600461383d565b610e90565b6102eb6103963660046137c5565b610f9c565b6102eb6103a9366004613856565b610fd5565b6102eb6103bc366004613882565b611118565b6102eb6103cf36600461383d565b611257565b6103e76103e23660046137c5565b611302565b6040516102f591906138a4565b6102eb6104023660046137c5565b611432565b6102eb610415366004613882565b6114e9565b6102eb61042836600461397e565b61160e565b6102eb61043b366004613856565b6116d7565b6102eb61044e3660046139ac565b61179f565b6102eb61046136600461383d565b61184d565b6102eb61047436600461383d565b6118f8565b6102eb6104873660046139ac565b6119a3565b6102eb61049a3660046139ac565b611acb565b6102eb6104ad3660046137c5565b611bf0565b6102eb6104c0366004613882565b611ca7565b6104d86104d33660046137c5565b611dcc565b604080518251600f90810b8252602080850151820b908301529282015190920b908201526060016102f5565b6104d86105123660046137c5565b611ed8565b6102eb6105253660046137c5565b611fa7565b61053d6105383660046139c9565b612075565b6040516102f59190613a01565b6102eb610558366004613a43565b6123ed565b6102eb61056b36600461383d565b6124e7565b61058361057e3660046137c5565b6125f3565b60405190151581526020016102f5565b6102eb6105a136600461383d565b6126e7565b6105836105b43660046137c5565b612792565b6105836105c7366004613856565b612849565b6105836105da3660046139ac565b61285e565b6102eb6105ed366004613882565b61292d565b6102eb610600366004613a70565b612a6c565b61061861061336600461383d565b612b91565b6040516102f59190613aef565b6102eb6106333660046137c5565b612c9d565b61032461064636600461383d565b612e82565b6102eb61065936600461383d565b612f51565b6102eb61066c366004613b6a565b612f76565b600061067d8383612792565b6106895750600061077f565b600054604051632cd0f65560e11b8152600481018590526001600160a01b03909116906359a1ecaa90602401602060405180830381865afa1580156106d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f69190613bbd565b6040517ffa9c7b9a0000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152919091169063fa9c7b9a906024015b602060405180830381865afa158015610758573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077c9190613bda565b90505b92915050565b6000806107928787611ed8565b60200151600f0b9050670de0b6b3a76400008511156107dd576040517f9932d97900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006107f26107eb87613188565b8390613193565b905060008083131561080e576108078261319f565b9350610aaa565b600061082161081c84613c09565b61319f565b905061083661082f8b6118f8565b82906131aa565b94506000600a61084787600f613c1e565b6108519190613c53565b90506000600a610862886005613c1e565b61086c9190613c53565b905060005b89811015610a455760026108858484613c75565b61088f9190613c53565b975060008054906101000a90046001600160a01b03166001600160a01b03166359a1ecaa8e6040518263ffffffff1660e01b81526004016108d291815260200190565b602060405180830381865afa1580156108ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109139190613bbd565b6001600160a01b031663e6574ee96040518163ffffffff1660e01b8152600401602060405180830381865afa158015610950573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109749190613bbd565b6001600160a01b031663f121cce661098b8f612e82565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b0390911660048201526000602482015260016044820152606481018b9052608401602060405180830381865afa1580156109fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a209190613bda565b9450838514610a455783851015610a3957879150610a3d565b8792505b600101610871565b5082841015610a52578196505b878411610aa65760405162461bcd60e51b815260206004820152601360248201527f416d6f756e7420697320746f6f20736d616c6c0000000000000000000000000060448201526064015b60405180910390fd5b5050505b50505095945050505050565b6000610ac28383612792565b610ace5750600061077f565b600054604051632cd0f65560e11b8152600481018590526001600160a01b03909116906359a1ecaa90602401602060405180830381865afa158015610b17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3b9190613bbd565b6040517f80e864fe0000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015291909116906380e864fe9060240161073b565b60008054604051632cd0f65560e11b81526004810185905282916001600160a01b0316906359a1ecaa90602401602060405180830381865afa158015610bce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf29190613bbd565b6040517fe873557a0000000000000000000000000000000000000000000000000000000081526001600160a01b03858116600483015291925060009183169063e873557a90602401602060405180830381865afa158015610c57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7b9190613bda565b90506000610d75610cec846001600160a01b031663632b6b116040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce79190613bda565b613188565b6040517fe65896c90000000000000000000000000000000000000000000000000000000081526001600160a01b03888116600483015286169063e65896c990602401602060405180830381865afa158015610d4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6f9190613bda565b90613193565b90506000610d838787612c9d565b905081600003610d9a57600094505050505061077f565b6000610da787600061160e565b9050610db5818584866131b6565b98975050505050505050565b60008054604051632cd0f65560e11b8152600481018490526001600160a01b03909116906359a1ecaa90602401602060405180830381865afa158015610e0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2f9190613bbd565b6001600160a01b03166389fd335b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e6c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077f9190613bda565b60008054604051632cd0f65560e11b8152600481018490526001600160a01b03909116906359a1ecaa90602401602060405180830381865afa158015610eda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610efe9190613bbd565b6001600160a01b031663c5f1916c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5f9190613bbd565b6001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e6c573d6000803e3d6000fd5b6000610fa88383612792565b610fb45750600061077f565b610fc1610ce78484610671565b610fcb8484610ab6565b61077c9190613c88565b6000805460405163adf1ab9b60e01b81526001600160a01b0385811660048301528392169063adf1ab9b90602401602060405180830381865afa158015611020573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110449190613bda565b905060006110518561179f565b60008054604051637ef8a2d360e01b81526001600160a01b03898116600483015293945091921690637ef8a2d390602401602060405180830381865afa15801561109f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c39190613bda565b905060006110d18287613193565b9050816000036110df575060005b60006110ec88600061160e565b905081846111046110fd8885613c88565b84906131e8565b61110e9190613c88565b610db59190613cb0565b60008054604051632cd0f65560e11b8152600481018590526001600160a01b03909116906359a1ecaa90602401602060405180830381865afa158015611162573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111869190613bbd565b6001600160a01b031663e6574ee96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e79190613bbd565b6001600160a01b031663f121cce66111fe85612e82565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b03909116600482015260016024820152600060448201526064810185905260840161073b565b60008054604051632cd0f65560e11b8152600481018490526001600160a01b03909116906359a1ecaa90602401602060405180830381865afa1580156112a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c59190613bbd565b6001600160a01b03166310bace8c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e6c573d6000803e3d6000fd5b6040805161010081018252600080825260208201819052818301819052606082018190526080820181905260a0820181905260c0820181905260e08201819052549151632cd0f65560e11b81526004810185905290916001600160a01b0316906359a1ecaa90602401602060405180830381865afa158015611388573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ac9190613bbd565b6040517fcefc49930000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152919091169063cefc49939060240161010060405180830381865afa15801561140e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077c9190613d57565b60008054604051632cd0f65560e11b8152600481018590526001600160a01b03909116906359a1ecaa90602401602060405180830381865afa15801561147c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a09190613bbd565b6040517faa407ae10000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152919091169063aa407ae19060240161073b565b60008054604051632cd0f65560e11b8152600481018590526001600160a01b03909116906359a1ecaa90602401602060405180830381865afa158015611533573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115579190613bbd565b6001600160a01b03166380f556056040518163ffffffff1660e01b8152600401602060405180830381865afa158015611594573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b89190613bbd565b6040517f556d6e9f0000000000000000000000000000000000000000000000000000000081526000600482015260016024820152604481018490526001600160a01b03919091169063556d6e9f9060640161073b565b60008060009054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611662573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116869190613bbd565b6040517f29122eb00000000000000000000000000000000000000000000000000000000081526001600160a01b038581166004830152841515602483015291909116906329122eb09060440161073b565b60008060009054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561172b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061174f9190613bbd565b6040517f2b04e8400000000000000000000000000000000000000000000000000000000081526001600160a01b038581166004830152602482018590529190911690632b04e8409060440161073b565b6000805b60008054906101000a90046001600160a01b03166001600160a01b031663295c39a56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118189190613bda565b811015611847576118298184612c9d565b6118339083613c88565b91508061183f81613dfb565b9150506117a3565b50919050565b60008054604051632cd0f65560e11b8152600481018490526001600160a01b03909116906359a1ecaa90602401602060405180830381865afa158015611897573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118bb9190613bbd565b6001600160a01b03166397c4fac76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e6c573d6000803e3d6000fd5b60008054604051632cd0f65560e11b8152600481018490526001600160a01b03909116906359a1ecaa90602401602060405180830381865afa158015611942573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119669190613bbd565b6001600160a01b03166345a153886040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e6c573d6000803e3d6000fd5b6000805460405163adf1ab9b60e01b81526001600160a01b0384811660048301528392169063adf1ab9b90602401602060405180830381865afa1580156119ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a129190613bda565b60008054604051637ef8a2d360e01b81526001600160a01b03878116600483015293945091921690637ef8a2d390602401602060405180830381865afa158015611a60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a849190613bda565b90506000611a918561179f565b905081600003611aa657506000949350505050565b6000611ab386600061160e565b9050611ac1818584866131b6565b9695505050505050565b6000805460405163adf1ab9b60e01b81526001600160a01b0384811660048301528392169063adf1ab9b90602401602060405180830381865afa158015611b16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b3a9190613bda565b60008054604051637ef8a2d360e01b81526001600160a01b03878116600483015293945091921690637ef8a2d390602401602060405180830381865afa158015611b88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bac9190613bda565b90506000611bb98561179f565b905081600003611bd55750670de0b6b3a7640000949350505050565b6000611be286600061160e565b9050611ac1818584866131f4565b60008054604051632cd0f65560e11b8152600481018590526001600160a01b03909116906359a1ecaa90602401602060405180830381865afa158015611c3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c5e9190613bbd565b6040517f2d3eb79b0000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301529190911690632d3eb79b9060240161073b565b60008054604051632cd0f65560e11b8152600481018590526001600160a01b03909116906359a1ecaa90602401602060405180830381865afa158015611cf1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d159190613bbd565b6001600160a01b03166380f556056040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d769190613bbd565b6040517f556d6e9f0000000000000000000000000000000000000000000000000000000081526001600482015260006024820152604481018490526001600160a01b03919091169063556d6e9f9060640161073b565b60408051606081018252600080825260208201819052818301819052549151632cd0f65560e11b81526004810185905290916001600160a01b0316906359a1ecaa90602401602060405180830381865afa158015611e2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e529190613bbd565b6040517fc70fbda00000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152919091169063c70fbda0906024015b606060405180830381865afa158015611eb4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077c9190613e15565b60408051606081018252600080825260208201819052818301819052549151632cd0f65560e11b81526004810185905290916001600160a01b0316906359a1ecaa90602401602060405180830381865afa158015611f3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f5e9190613bbd565b6040517f793962d80000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152919091169063793962d890602401611e97565b6000611fb383836125f3565b611fbf5750600061077f565b600054604051632cd0f65560e11b8152600481018590526001600160a01b03909116906359a1ecaa90602401602060405180830381865afa158015612008573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061202c9190613bbd565b6040517f76c469b60000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015291909116906376c469b69060240161073b565b61207d61378f565b816120888585611302565b606001516fffffffffffffffffffffffffffffffff1610156120d6576040517fca2fc97300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006120e1856124e7565b60008054604051632cd0f65560e11b815260048101899052929350909183916001600160a01b0316906359a1ecaa90602401602060405180830381865afa158015612130573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121549190613bbd565b6001600160a01b03166380f556056040518163ffffffff1660e01b8152600401602060405180830381865afa158015612191573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121b59190613bbd565b6040517f4903b0d1000000000000000000000000000000000000000000000000000000008152600060048201526001600160a01b039190911690634903b0d190602401602060405180830381865afa158015612215573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122399190613bda565b612244600187613e8f565b61224e9190613c1e565b6122589190613c53565b60008054604051632cd0f65560e11b8152600481018a9052929350909184916001600160a01b0316906359a1ecaa90602401602060405180830381865afa1580156122a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122cb9190613bbd565b6001600160a01b03166380f556056040518163ffffffff1660e01b8152600401602060405180830381865afa158015612308573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061232c9190613bbd565b6040517f4903b0d1000000000000000000000000000000000000000000000000000000008152600160048201526001600160a01b039190911690634903b0d190602401602060405180830381865afa15801561238c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123b09190613bda565b6123bb600188613e8f565b6123c59190613c1e565b6123cf9190613c53565b604080518082019091529283526020830152509150505b9392505050565b60008054604051632cd0f65560e11b8152600481018590526001600160a01b03909116906359a1ecaa90602401602060405180830381865afa158015612437573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061245b9190613bbd565b6001600160a01b03166380f556056040518163ffffffff1660e01b8152600401602060405180830381865afa158015612498573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124bc9190613bbd565b6001600160a01b0316638d8ea727836040518263ffffffff1660e01b815260040161073b9190613ea2565b60008054604051632cd0f65560e11b8152600481018490526001600160a01b03909116906359a1ecaa90602401602060405180830381865afa158015612531573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125559190613bbd565b6001600160a01b03166380f556056040518163ffffffff1660e01b8152600401602060405180830381865afa158015612592573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125b69190613bbd565b6001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f3b573d6000803e3d6000fd5b60008054604051632cd0f65560e11b8152600481018590526001600160a01b03909116906359a1ecaa90602401602060405180830381865afa15801561263d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126619190613bbd565b6040517fa42d66020000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152919091169063a42d6602906024015b602060405180830381865afa1580156126c3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077c9190613eb1565b60008054604051632cd0f65560e11b8152600481018490526001600160a01b03909116906359a1ecaa90602401602060405180830381865afa158015612731573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127559190613bbd565b6001600160a01b0316634bc36bd66040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f3b573d6000803e3d6000fd5b60008054604051632cd0f65560e11b8152600481018590526001600160a01b03909116906359a1ecaa90602401602060405180830381865afa1580156127dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128009190613bbd565b6040517f9d36b7590000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301529190911690639d36b759906024016126a6565b60008161285584611acb565b12159392505050565b60008054604080517f295c39a5000000000000000000000000000000000000000000000000000000008152905183926001600160a01b03169163295c39a59160048083019260209291908290030181865afa1580156128c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128e59190613bda565b905060005b81811015612923576128fc81856125f3565b8061290c575061290c8185612792565b1561291b575060019392505050565b6001016128ea565b5060009392505050565b60008054604051632cd0f65560e11b8152600481018590526001600160a01b03909116906359a1ecaa90602401602060405180830381865afa158015612977573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061299b9190613bbd565b6001600160a01b031663e6574ee96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156129d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129fc9190613bbd565b6001600160a01b031663f121cce6612a1385612e82565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b03909116600482015260006024820152600160448201526064810185905260840161073b565b60008054604051632cd0f65560e11b8152600481018a90526001600160a01b03909116906359a1ecaa90602401602060405180830381865afa158015612ab6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ada9190613bbd565b6001600160a01b031663a9f97b688888888888886040518763ffffffff1660e01b8152600401612b0f96959493929190613ece565b600060405180830381600087803b158015612b2957600080fd5b505af1925050508015612b3a575060015b612b86573d808015612b68576040519150601f19603f3d011682016040523d82523d6000602084013e612b6d565b606091505b5080806020019051810190612b829190613bda565b9150505b979650505050505050565b6040805161010081018252600080825260208201819052818301819052606082018190526080820181905260a0820181905260c0820181905260e08201819052549151632cd0f65560e11b81526004810184905290916001600160a01b0316906359a1ecaa90602401602060405180830381865afa158015612c17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c3b9190613bbd565b6001600160a01b0316639027b59e6040518163ffffffff1660e01b815260040161010060405180830381865afa158015612c79573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077f9190613f29565b60008054604051632cd0f65560e11b8152600481018590526001600160a01b03909116906359a1ecaa90602401602060405180830381865afa158015612ce7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d0b9190613bbd565b6040517faa407ae10000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152919091169063aa407ae190602401602060405180830381865afa158015612d6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d909190613bda565b600054604051632cd0f65560e11b8152600481018690526001600160a01b03909116906359a1ecaa90602401602060405180830381865afa158015612dd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dfd9190613bbd565b6040517f2d3eb79b0000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301529190911690632d3eb79b90602401602060405180830381865afa158015612e5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fcb9190613bda565b60008054604051632cd0f65560e11b8152600481018490526001600160a01b03909116906359a1ecaa90602401602060405180830381865afa158015612ecc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ef09190613bbd565b6001600160a01b03166380f556056040518163ffffffff1660e01b8152600401602060405180830381865afa158015612f2d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077f9190613bbd565b60008054612f699083906001600160a01b0316611ed8565b60200151600f0b92915050565b600080612f838787611dcc565b60200151600f0b9050670de0b6b3a7640000851115612fce576040517f9932d97900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000612fdc6107eb87613188565b90506000811315612ff757612ff08161319f565b925061317d565b6000613023876130078b8b611302565b606001516fffffffffffffffffffffffffffffffff16906131aa565b905060008061303461081c85613c09565b90506130a36130428c612e82565b6001600160a01b03166386fc88d36040518163ffffffff1660e01b8152600401602060405180830381865afa15801561307f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082f9190613bda565b95506000600a6130b488600f613c1e565b6130be9190613c53565b90506000600a6130cf896005613c1e565b6130d99190613c53565b905060005b8a8110156131575760026130f28484613c75565b6130fc9190613c53565b985061310f8e8e888d8d60006001612a6c565b94508385101561312157889150613136565b8385111561313157889250613136565b613157565b6131408284613e8f565b60010361314f57829850613157565b6001016130de565b5082841015613177578197506131748d8d878c8c60006001612a6c565b93505b50505050505b505095945050505050565b600061077f82613217565b600061077c83836132b3565b600061077f826133c0565b600061077c8383613412565b60006131df836131c68688613c88565b6131d09190613c88565b6131d98461341e565b90613429565b95945050505050565b600061077c8383613435565b60006131df6132028361341e565b8461320d8789613c88565b6131d99190613c88565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8211156132af5760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e206160448201527f6e20696e743235360000000000000000000000000000000000000000000000006064820152608401610a9d565b5090565b6000600160ff1b8314806132ca5750600160ff1b82145b15613301576040517f3406846c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080600085126133125784613317565b846000035b915060008412613327578361332c565b836000035b9050600061333a838361344b565b90507f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811115613399576040517fbf79e8d900000000000000000000000000000000000000000000000000000000815260048101829052602401610a9d565b6000198087139086138082186001146133b25782610db5565b505060000395945050505050565b6000808212156132af5760405162461bcd60e51b815260206004820181905260248201527f53616665436173743a2076616c7565206d75737420626520706f7369746976656044820152606401610a9d565b600061077c838361344b565b600061077f82613544565b600061077c8383613598565b6000818312613444578161077c565b5090919050565b60008080600019848609848602925082811083820303915050670de0b6b3a764000081106134a8576040517fd31b340200000000000000000000000000000000000000000000000000000000815260048101829052602401610a9d565b600080670de0b6b3a764000086880991506706f05b59d3b1ffff82119050826000036134e65780670de0b6b3a764000085040194505050505061077f565b6204000082850304939091119091037d40000000000000000000000000000000000000000000000000000000000002919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690201905092915050565b6000600160ff1b8203613583576040517f741d0b8c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008212613591578161077f565b5060000390565b6000600160ff1b8314806135af5750600160ff1b82145b156135e6576040517fb3c754a300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080600085126135f757846135fc565b846000035b91506000841261360c5783613611565b836000035b9050600061362883670de0b6b3a7640000846136a9565b90507f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811115613687576040517f7cb4bef500000000000000000000000000000000000000000000000000000000815260048101829052602401610a9d565b6000198087139086138082186001146136a05782610db5565b610db583613c09565b60008080600019858709858702925082811083820303915050806000036136e3578382816136d9576136d9613c3d565b04925050506123e6565b838110613726576040517f773cc18c0000000000000000000000000000000000000000000000000000000081526004810182905260248101859052604401610a9d565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b60405180604001604052806002906020820280368337509192915050565b6001600160a01b03811681146137c257600080fd5b50565b600080604083850312156137d857600080fd5b8235915060208301356137ea816137ad565b809150509250929050565b600080600080600060a0868803121561380d57600080fd5b85359450602086013561381f816137ad565b94979496505050506040830135926060810135926080909101359150565b60006020828403121561384f57600080fd5b5035919050565b6000806040838503121561386957600080fd5b8235613874816137ad565b946020939093013593505050565b6000806040838503121561389557600080fd5b50508035926020909101359150565b6000610100820190508251600f0b82526020830151600f0b60208301526040830151600f0b60408301526fffffffffffffffffffffffffffffffff606084015116606083015267ffffffffffffffff608084015116608083015260a083015161392160a08401826fffffffffffffffffffffffffffffffff169052565b5060c083015161394560c08401826fffffffffffffffffffffffffffffffff169052565b5060e083015161396960e08401826fffffffffffffffffffffffffffffffff169052565b5092915050565b80151581146137c257600080fd5b6000806040838503121561399157600080fd5b823561399c816137ad565b915060208301356137ea81613970565b6000602082840312156139be57600080fd5b81356123e6816137ad565b6000806000606084860312156139de57600080fd5b8335925060208401356139f0816137ad565b929592945050506040919091013590565b60408101818360005b6002811015613a29578151835260209283019290910190600101613a0a565b50505092915050565b806040810183101561077f57600080fd5b60008060608385031215613a5657600080fd5b82359150613a678460208501613a32565b90509250929050565b6000806000806000806000610100888a031215613a8c57600080fd5b873596506020880135613a9e816137ad565b955060408801359450613ab48960608a01613a32565b935060a0880135925060c088013560028110613acf57600080fd5b915060e0880135613adf81613970565b8091505092959891949750929550565b60006101008201905067ffffffffffffffff808451168352806020850151166020840152506040830151600f0b6040830152606083015160608301526fffffffffffffffffffffffffffffffff608084015116608083015260a083015161392160a08401826fffffffffffffffffffffffffffffffff169052565b600080600080600060c08688031215613b8257600080fd5b853594506020860135613b94816137ad565b93506040860135925060608601359150613bb18760808801613a32565b90509295509295909350565b600060208284031215613bcf57600080fd5b81516123e6816137ad565b600060208284031215613bec57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000600160ff1b820361359157613591613bf3565b6000816000190483118215151615613c3857613c38613bf3565b500290565b634e487b7160e01b600052601260045260246000fd5b600082613c7057634e487b7160e01b600052601260045260246000fd5b500490565b8082018082111561077f5761077f613bf3565b8082018281126000831280158216821582161715613ca857613ca8613bf3565b505092915050565b818103600083128015838313168383128216171561396957613969613bf3565b604051610100810167ffffffffffffffff81118282101715613d0257634e487b7160e01b600052604160045260246000fd5b60405290565b8051600f81900b8114613d1a57600080fd5b919050565b80516fffffffffffffffffffffffffffffffff81168114613d1a57600080fd5b805167ffffffffffffffff81168114613d1a57600080fd5b60006101008284031215613d6a57600080fd5b613d72613cd0565b613d7b83613d08565b8152613d8960208401613d08565b6020820152613d9a60408401613d08565b6040820152613dab60608401613d1f565b6060820152613dbc60808401613d3f565b6080820152613dcd60a08401613d1f565b60a0820152613dde60c08401613d1f565b60c0820152613def60e08401613d1f565b60e08201529392505050565b60006000198203613e0e57613e0e613bf3565b5060010190565b600060608284031215613e2757600080fd5b6040516060810181811067ffffffffffffffff82111715613e5857634e487b7160e01b600052604160045260246000fd5b604052613e6483613d08565b8152613e7260208401613d08565b6020820152613e8360408401613d08565b60408201529392505050565b8181038181111561077f5761077f613bf3565b60408181019083833792915050565b600060208284031215613ec357600080fd5b81516123e681613970565b6001600160a01b03871681526020810186905260e081016040868184013784608083015260028410613f1057634e487b7160e01b600052602160045260246000fd5b8360a083015282151560c0830152979650505050505050565b60006101008284031215613f3c57600080fd5b613f44613cd0565b613f4d83613d3f565b8152613f5b60208401613d3f565b6020820152613f6c60408401613d08565b604082015260608301516060820152613dbc60808401613d1f56fea2646970667358221220409f5fe40bbc7f8a6c097a7f787a1993efefe5b34e94b8f30bcc3d6409a9b79d64736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "accountLeverage(address)": {
        "params": {
          "account": "User to get the account leverage from"
        }
      },
      "getBalance(address,uint256)": {
        "params": {
          "tokenIdx": "Token to get the balance of",
          "user": "User to get the balance of"
        }
      },
      "getBaseBalance(uint256)": {
        "params": {
          "idx": "Index of the perpetual market"
        }
      },
      "getBaseDust(uint256)": {
        "returns": {
          "_0": "Base balance of Governance. 18 decimals"
        }
      },
      "getExpectedLpTokenAmount(uint256,uint256[2])": {
        "details": "Given that the estimated amount might be slightly off (slippage) and that the market may move a bit      between this call and the next, users should apply a small reduction on the returned amount.",
        "params": {
          "amounts": "Array of 2 amounts, a vQuote and a vBase amount",
          "idx": "Index of the perpetual market"
        }
      },
      "getExpectedVBaseAmount(uint256,uint256)": {
        "details": "It's up to the client to apply a reduction of this amount (e.g. -1%) to then use it as a reasonable value for `minAmount` in `extendPosition`",
        "params": {
          "idx": "Index of the perpetual market",
          "vQuoteAmountToSpend": "Amount of vQuote to be exchanged against some vBase. 18 decimals"
        }
      },
      "getExpectedVBaseAmountExFees(uint256,uint256)": {
        "details": "It's up to the client to apply a reduction of this amount (e.g. -1%) to then use it as a reasonable value for `minAmount` in `extendPosition`",
        "params": {
          "idx": "Index of the perpetual market",
          "vQuoteAmountToSpend": "Amount of vQuote to be exchanged against some vBase. 18 decimals"
        }
      },
      "getExpectedVQuoteAmount(uint256,uint256)": {
        "details": "It's up to the client to apply a reduction of this amount (e.g. -1%) to then use it as a reasonable value for `minAmount` in `extendPosition`",
        "params": {
          "idx": "Index of the perpetual market",
          "vBaseAmountToSpend": "Amount of vBase to be exchanged against some vQuote. 18 decimals"
        }
      },
      "getExpectedVQuoteAmountExFees(uint256,uint256)": {
        "details": "It's up to the client to apply a reduction of this amount (e.g. -1%) to then use it as a reasonable value for `minAmount` in `extendPosition`",
        "params": {
          "idx": "Index of the perpetual market",
          "vBaseAmountToSpend": "Amount of vBase to be exchanged against some vQuote. 18 decimals"
        }
      },
      "getExpectedVirtualTokenAmountsFromLpTokenAmount(uint256,address,uint256)": {
        "details": "Apply a small reduction to the token amounts to ensure that the call to `removeLiquidity` passes",
        "params": {
          "account": "Address of the LP account",
          "idx": "Index of the perpetual market",
          "lpTokenAmountToWithdraw": "Amount of LP tokens to return to the market"
        }
      },
      "getFreeCollateralByRatio(address,int256)": {
        "details": "free collateral = profit + discounted collaterals USD value"
      },
      "getFundingPayments(uint256,address)": {
        "params": {
          "account": "User to get the funding payments of",
          "idx": "Index of the perpetual market"
        }
      },
      "getFundingPaymentsAcrossMarkets(address)": {
        "params": {
          "account": "User to get the funding payments of"
        }
      },
      "getGlobalPosition(uint256)": {
        "params": {
          "idx": "Index of the perpetual market"
        }
      },
      "getLpEstimatedPnl(uint256,address)": {
        "params": {
          "account": "Lp to get the pnl and trading fees earned from"
        },
        "returns": {
          "_0": "pnl Unrealized profit and loss and trading fees earned. 18 decimals"
        }
      },
      "getLpFundingPayments(uint256,address)": {
        "params": {
          "account": "Lp to get the funding payments",
          "idx": "Index of the perpetual market"
        }
      },
      "getLpPosition(uint256,address)": {
        "params": {
          "account": "Address to get the LP position from",
          "idx": "Index of the perpetual market"
        }
      },
      "getLpPositionAfterWithdrawal(uint256,address)": {
        "params": {
          "account": "Liquidity Provider"
        },
        "returns": {
          "_0": "(Active) Liquidity Provider position"
        }
      },
      "getLpProposedAmount(uint256,address,uint256,uint256,uint256[2])": {
        "params": {
          "idx": "Index of the perpetual market",
          "iter": "Maximum iterations",
          "minVTokenAmounts": "Minimum amount that the user is willing to accept of remove liquidity. 18 decimals",
          "reductionRatio": "Percentage of the position that the user wishes to close. Min: 0. Max: 1e18",
          "user": "Account"
        },
        "returns": {
          "proposedAmount": "Amount of tokens to swap. 18 decimals"
        }
      },
      "getLpTradingFees(uint256,address)": {
        "params": {
          "account": "Lp to get the trading fees earned from",
          "idx": "Index of the perpetual market"
        },
        "returns": {
          "_0": "tradingFeesEarned Trading fees earned by the Liquidity Provider. 18 decimals"
        }
      },
      "getLpUnrealizedPnL(uint256,address)": {
        "params": {
          "account": "Lp to get the unrealized PnL from",
          "idx": "Index of the perpetual market"
        }
      },
      "getMarket(uint256)": {
        "params": {
          "idx": "Index of the perpetual market"
        }
      },
      "getQuoteBalance(uint256)": {
        "params": {
          "idx": "Index of the perpetual market"
        }
      },
      "getReserveValue(address,bool)": {
        "params": {
          "account": "Address to get the portfolio value from",
          "isDiscounted": "Whether or not the reserve value should be discounted by the weight of the collateral"
        },
        "returns": {
          "_0": "reserveValue Value of collaterals in USD. 18 decimals"
        }
      },
      "getTotalLiquidityProvided(uint256)": {
        "params": {
          "idx": "Index of the perpetual market"
        }
      },
      "getTraderFundingPayments(uint256,address)": {
        "params": {
          "account": "User to get the funding payments of",
          "idx": "Index of the perpetual market"
        }
      },
      "getTraderPosition(uint256,address)": {
        "params": {
          "account": "Address to get the trading position from",
          "idx": "Index of the perpetual market"
        }
      },
      "getTraderProposedAmount(uint256,address,uint256,uint256,uint256)": {
        "params": {
          "idx": "Index of the perpetual market",
          "iter": "Maximum iterations",
          "minAmount": "Minimum amount that the user is willing to accept. 18 decimals",
          "reductionRatio": "Percentage of the position that the user wishes to close. Min: 0. Max: 1e18",
          "user": "Account"
        },
        "returns": {
          "proposedAmount": "Amount of tokens to swap. 18 decimals"
        }
      },
      "getTraderUnrealizedPnL(uint256,address)": {
        "params": {
          "account": "Trader to get the unrealized PnL from",
          "idx": "Index of the perpetual market"
        }
      },
      "indexPrice(uint256)": {
        "params": {
          "idx": "Index of the perpetual market"
        }
      },
      "insuranceFee(uint256)": {
        "params": {
          "idx": "Index of the perpetual market"
        }
      },
      "isLpPositionOpen(uint256,address)": {
        "params": {
          "account": "Address of the LP account",
          "idx": "Index of the perpetual market"
        }
      },
      "isMarginValid(address,int256)": {
        "details": "Differ from `ClearingHouse._isPositionValid` in that it includes an estimate of pending funding payments,      also `_isPositionValid` formula is arranged differently",
        "params": {
          "account": "Account of the position to get the margin ratio from",
          "ratio": "Proposed ratio to compare the position against"
        }
      },
      "isPositionOpen(address)": {
        "params": {
          "account": "Address of the user account"
        }
      },
      "isTraderPositionOpen(uint256,address)": {
        "params": {
          "account": "Address of the trading account",
          "idx": "Index of the perpetual market"
        }
      },
      "marginRatio(address)": {
        "details": "Unlike ClearingHouse.getFreeCollateralByRatio, ClearingHouseViewer.marginRatio includes fundingPayments      and formula is arranged differently",
        "params": {
          "account": "Account of the position to get the margin ratio from"
        }
      },
      "marketLeverage(uint256,address)": {
        "params": {
          "account": "User to get the account leverage from",
          "idx": "Index of the perpetual market"
        }
      },
      "marketPrice(uint256)": {
        "params": {
          "idx": "Index of the perpetual market"
        }
      },
      "removeLiquiditySwap(uint256,address,uint256,uint256[2],uint256,uint8,bool)": {
        "params": {
          "direction": "If Long, vQuote should be traded for vBase otherwise vBase should be traded for vQuote    /// @return proceeds received from swapping after removing liquidity",
          "idx": "Index of the perpetual market",
          "liquidityAmountToRemove": "Amount of liquidity (in LP tokens) to be removed from the pool. 18 decimals",
          "minVTokenAmounts": "Minimum amount of virtual tokens [vQuote, vBase] withdrawn from the curve pool. 18 decimals",
          "proposedAmount": "Amount at which to get the LP position (in vBase if LONG, in vQuote if SHORT). 18 decimals",
          "withCurveTradingFees": "Whether or not Curve trading fees should be included"
        }
      },
      "totalLpTokenSupply(uint256)": {
        "params": {
          "idx": "Index of the perpetual market"
        }
      }
    },
    "title": "Clearing House Helper Contract",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "ClearingHouseViewer_LpTokenAmountPassedLargerThanBalance()": [
        {
          "notice": "Emitted when the amount of LP tokens passed is larger than the user LP token balance"
        }
      ],
      "ClearingHouseViewer_ReductionRatioTooLarge()": [
        {
          "notice": "Emitted when the reduction ratio given is larger than 1e18"
        }
      ],
      "ClearingHouseViewer_ZeroAddressConstructor(uint8)": [
        {
          "notice": "Emitted when the zero address is provided as a parameter in the constructor"
        }
      ],
      "PRBMathSD59x18__AbsInputTooSmall()": [
        {
          "notice": "Emitted when the input is MIN_SD59x18."
        }
      ],
      "PRBMathSD59x18__DivInputTooSmall()": [
        {
          "notice": "Emitted when one of the inputs is MIN_SD59x18."
        }
      ],
      "PRBMathSD59x18__DivOverflow(uint256)": [
        {
          "notice": "Emitted when one of the intermediary unsigned results overflows SD59x18."
        }
      ],
      "PRBMathSD59x18__MulInputTooSmall()": [
        {
          "notice": "Emitted when one of the inputs is MIN_SD59x18."
        }
      ],
      "PRBMathSD59x18__MulOverflow(uint256)": [
        {
          "notice": "Emitted when the intermediary absolute result overflows SD59x18."
        }
      ],
      "PRBMath__MulDivFixedPointOverflow(uint256)": [
        {
          "notice": "Emitted when the result overflows uint256."
        }
      ],
      "PRBMath__MulDivOverflow(uint256,uint256)": [
        {
          "notice": "Emitted when the result overflows uint256."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "accountLeverage(address)": {
        "notice": "Get the account leverage across markets"
      },
      "getBalance(address,uint256)": {
        "notice": "Get User Collateral balance"
      },
      "getBaseBalance(uint256)": {
        "notice": "Return the total supply of base tokens provided to a perpetual market"
      },
      "getBaseDust(uint256)": {
        "notice": "Get the current (base) dust balance"
      },
      "getExpectedLpTokenAmount(uint256,uint256[2])": {
        "notice": "Return amount of LP tokens one would receive from exchanging `amounts` in a selected market"
      },
      "getExpectedVBaseAmount(uint256,uint256)": {
        "notice": "Return amount for vBase one would receive for exchanging `vQuoteAmountToSpend` in a select market (excluding slippage)"
      },
      "getExpectedVBaseAmountExFees(uint256,uint256)": {
        "notice": "Return amount for vBase one would receive for exchanging `vQuoteAmountToSpend` in a select market (excluding slippage)"
      },
      "getExpectedVQuoteAmount(uint256,uint256)": {
        "notice": "Return amount for vQuote one would receive for exchanging `vBaseAmountToSpend` in a select market (excluding slippage)"
      },
      "getExpectedVQuoteAmountExFees(uint256,uint256)": {
        "notice": "Return amount for vQuote one would receive for exchanging `vBaseAmountToSpend` in a select market (excluding slippage)"
      },
      "getExpectedVirtualTokenAmountsFromLpTokenAmount(uint256,address,uint256)": {
        "notice": "Return estimation of quote and base tokens one LP should get in exchange for LP tokens"
      },
      "getFreeCollateralByRatio(address,int256)": {
        "notice": "Get free collateral of a user, with a given ratio applied on his debts"
      },
      "getFundingPayments(uint256,address)": {
        "notice": "Get the funding payments of an user on a perpetual markets"
      },
      "getFundingPaymentsAcrossMarkets(address)": {
        "notice": "Get the funding payments of an user across all perpetual markets"
      },
      "getGlobalPosition(uint256)": {
        "notice": "Return a the GlobalPosition struct of a given market"
      },
      "getLpEstimatedPnl(uint256,address)": {
        "notice": "Get the unrealized profit and Loss and the trading fees earned of a  Liquidity Provider"
      },
      "getLpFundingPayments(uint256,address)": {
        "notice": "Calculate missed funding payments"
      },
      "getLpPosition(uint256,address)": {
        "notice": "Get Lp position"
      },
      "getLpPositionAfterWithdrawal(uint256,address)": {
        "notice": "Get the (active) position of a liquidity provider after withdrawing liquidity"
      },
      "getLpProposedAmount(uint256,address,uint256,uint256,uint256[2])": {
        "notice": "Get the proposed amount needed to close a lp position"
      },
      "getMarket(uint256)": {
        "notice": "Return the address of the curve market from a perpetual index"
      },
      "getQuoteBalance(uint256)": {
        "notice": "Return the total supply of quote tokens provided to a perpetual market"
      },
      "getReserveValue(address,bool)": {
        "notice": "Get the portfolio value of a trader / lp"
      },
      "getTotalLiquidityProvided(uint256)": {
        "notice": "Return the total supply of liquidity tokens in a perpetual market"
      },
      "getTraderFundingPayments(uint256,address)": {
        "notice": "Calculate missed funding payments"
      },
      "getTraderPosition(uint256,address)": {
        "notice": "Get trader position"
      },
      "getTraderProposedAmount(uint256,address,uint256,uint256,uint256)": {
        "notice": "Get the proposed amount needed to close a trader position"
      },
      "getTraderUnrealizedPnL(uint256,address)": {
        "notice": "Calculate missed funding payments"
      },
      "indexPrice(uint256)": {
        "notice": "Return the current off-chain exchange rate for vBase/vQuote"
      },
      "insuranceFee(uint256)": {
        "notice": "Return the insurance fee of a perpetual market"
      },
      "isLpPositionOpen(uint256,address)": {
        "notice": "Whether a given LP position is open"
      },
      "isMarginValid(address,int256)": {
        "notice": "Approximately determine whether or not a position is valid for a given margin ratio"
      },
      "isPositionOpen(address)": {
        "notice": "Whether any trader/lp position is open"
      },
      "isTraderPositionOpen(uint256,address)": {
        "notice": "Whether a given trader position is open"
      },
      "marginRatio(address)": {
        "notice": "Get the margin ratio of a user, i.e. all trading and LP positions across all markets"
      },
      "marketLeverage(uint256,address)": {
        "notice": "Get the account leverage for an market"
      },
      "marketPrice(uint256)": {
        "notice": "Return the last traded price (used for TWAP)"
      },
      "removeLiquiditySwap(uint256,address,uint256,uint256[2],uint256,uint8,bool)": {
        "notice": "ONLY STATIC CALLReturns amount of swapping after removing liquidityUsed to estimate proposedAmount for removing liquidity"
      },
      "totalLpTokenSupply(uint256)": {
        "notice": "Return the total supply of LP tokens in the market"
      }
    },
    "notice": "Utility functions to easily extract data from Perpetual Contracts",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8015,
        "contract": "contracts/ClearingHouseViewer.sol:ClearingHouseViewer",
        "label": "clearingHouse",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IClearingHouse)16655"
      }
    ],
    "types": {
      "t_contract(IClearingHouse)16655": {
        "encoding": "inplace",
        "label": "contract IClearingHouse",
        "numberOfBytes": "20"
      }
    }
  }
}

